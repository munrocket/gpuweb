=Grammar:

_blankspace: /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment: '//' /.*/
access_mode: 'read' | 'write' | 'read_write'
additive_expression: multiplicative_expression | additive_expression additive_operator multiplicative_expression
additive_operator: plus | minus
address_space: 'function' | 'private' | 'workgroup' | 'uniform' | 'storage'
and: '&'
and_and: '&&'
and_equal: '&='
argument_expression_list: paren_left argument_expression_list/0.1 paren_right
argument_expression_list/0.1: expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 | ε
argument_expression_list/0.1/0.1: argument_expression_list/0.1/0.1/0 | ε
argument_expression_list/0.1/0.1/0: argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 | ε
argument_expression_list/0.1/0.1/0/0.0: comma expression
argument_expression_list/0.1/0.2: comma | ε
array: 'array'
array_type_decl: 'array' less_than type_decl array_type_decl/0.3 greater_than
array_type_decl/0.3: comma element_count_expression | ε
arrow: '->'
assignment_statement: lhs_expression assignment_statement/0.1 expression
assignment_statement/0.1: equal | compound_assignment_operator
atomic: 'atomic'
attr: '@'
attrib_end: attrib_end/0.0 paren_right
attrib_end/0.0: comma | ε
attribute: attr 'align' paren_left expression attrib_end | attr 'binding' paren_left expression attrib_end | attr 'builtin' paren_left builtin_value_name attrib_end | attr 'const' | attr 'group' paren_left expression attrib_end | attr 'id' paren_left expression attrib_end | attr 'interpolate' paren_left interpolation_type_name attrib_end | attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end | attr 'invariant' | attr 'location' paren_left expression attrib_end | attr 'size' paren_left expression attrib_end | attr 'workgroup_size' paren_left expression attrib_end | attr 'workgroup_size' paren_left expression comma expression attrib_end | attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end | attr 'vertex' | attr 'fragment' | attr 'compute'
bang: '!'
binary_and_expression: unary_expression | binary_and_expression and unary_expression
binary_or_expression: unary_expression | binary_or_expression or unary_expression
binary_xor_expression: unary_expression | binary_xor_expression xor unary_expression
bitcast: 'bitcast'
bitwise_expression: binary_and_expression and unary_expression | binary_or_expression or unary_expression | binary_xor_expression xor unary_expression
bool: 'bool'
bool_literal: 'true' | 'false'
brace_left: '{'
brace_right: '}'
bracket_left: '['
bracket_right: ']'
break: 'break'
break_if_statement: 'break' 'if' expression semicolon
break_statement: 'break'
builtin_value_name: 'vertex_index' | 'instance_index' | 'position' | 'front_facing' | 'frag_depth' | 'local_invocation_id' | 'local_invocation_index' | 'global_invocation_id' | 'workgroup_id' | 'num_workgroups' | 'sample_index' | 'sample_mask'
callable: ident | type_decl_without_ident | vec_prefix | mat_prefix | 'array'
case: 'case'
case_clause: 'case' case_selectors case_clause/0.2 compound_statement
case_clause/0.2: colon | ε
case_selector: 'default' | expression
case_selectors: case_selector case_selectors/0.1 case_selectors/0.2
case_selectors/0.1: case_selectors/0.1/0 | ε
case_selectors/0.1/0: case_selectors/0.1/0/0.0 case_selectors/0.1/0 | ε
case_selectors/0.1/0/0.0: comma case_selector
case_selectors/0.2: comma | ε
colon: ':'
comma: ','
compound_assignment_operator: plus_equal | minus_equal | times_equal | division_equal | modulo_equal | and_equal | or_equal | xor_equal | shift_right_equal | shift_left_equal
compound_statement: brace_left compound_statement/0.1 brace_right
compound_statement/0.1: compound_statement/0.1/0 | ε
compound_statement/0.1/0: statement compound_statement/0.1/0 | ε
const: 'const'
const_literal: int_literal | float_literal | bool_literal
continue: 'continue'
continue_statement: 'continue'
continuing: 'continuing'
continuing_compound_statement: brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right
continuing_compound_statement/0.1: continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.1/0: statement continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.2: break_if_statement | ε
continuing_statement: 'continuing' continuing_compound_statement
core_lhs_expression: ident | paren_left lhs_expression paren_right
decimal_float_literal: /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+[eE][+-]?[0-9]+[fh]?/ | /0[fh]/ | /[1-9][0-9]*[fh]/
decrement_statement: lhs_expression minus_minus
default: 'default'
default_alone_clause: 'default' default_alone_clause/0.1 compound_statement
default_alone_clause/0.1: colon | ε
depth_texture_type: 'texture_depth_2d' | 'texture_depth_2d_array' | 'texture_depth_cube' | 'texture_depth_cube_array' | 'texture_depth_multisampled_2d'
discard: 'discard'
division_equal: '/='
element_count_expression: additive_expression | bitwise_expression
else: 'else'
else_clause: 'else' compound_statement
else_if_clause: 'else' 'if' expression compound_statement
enable: 'enable'
enable_directive: 'enable' extension_name semicolon
equal: '='
equal_equal: '=='
expression: relational_expression | short_circuit_or_expression or_or relational_expression | short_circuit_and_expression and_and relational_expression | bitwise_expression
extension_name: 'f16'
false: 'false'
float16: 'f16'
float32: 'f32'
float_literal: decimal_float_literal | hex_float_literal
fn: 'fn'
for: 'for'
for_header: for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4
for_header/0.0: for_init | ε
for_header/0.2: expression | ε
for_header/0.4: for_update | ε
for_init: variable_statement | variable_updating_statement | func_call_statement
for_statement: 'for' paren_left for_header paren_right compound_statement
for_update: variable_updating_statement | func_call_statement
forward_slash: '/'
func_call_statement: ident argument_expression_list
function: 'function'
function_decl: function_decl/0.0 function_header compound_statement
function_decl/0.0: function_decl/0.0/0 | ε
function_decl/0.0/0: attribute function_decl/0.0/0 | ε
function_header: 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5
function_header/0.3: param_list | ε
function_header/0.5: arrow function_header/0.5/0.1 type_decl | ε
function_header/0.5/0.1: function_header/0.5/0.1/0 | ε
function_header/0.5/0.1/0: attribute function_header/0.5/0.1/0 | ε
global_constant_decl: global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3
global_constant_decl/1.0: global_constant_decl/1.0/0 | ε
global_constant_decl/1.0/0: attribute global_constant_decl/1.0/0 | ε
global_constant_decl/1.3: equal expression | ε
global_decl: semicolon | global_variable_decl semicolon | global_constant_decl semicolon | type_alias_decl semicolon | struct_decl | function_decl | static_assert_statement semicolon
global_directive: enable_directive
global_variable_decl: global_variable_decl/0.0 variable_decl global_variable_decl/0.2
global_variable_decl/0.0: global_variable_decl/0.0/0 | ε
global_variable_decl/0.0/0: attribute global_variable_decl/0.0/0 | ε
global_variable_decl/0.2: equal expression | ε
greater_than: '>'
greater_than_equal: '>='
hex_float_literal: /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
ident: ident_pattern_token
ident_pattern_token: /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if: 'if'
if_clause: 'if' expression compound_statement
if_statement: if_clause if_statement/0.1 if_statement/0.2
if_statement/0.1: if_statement/0.1/0 | ε
if_statement/0.1/0: else_if_clause if_statement/0.1/0 | ε
if_statement/0.2: else_clause | ε
increment_statement: lhs_expression plus_plus
int32: 'i32'
int_literal: /0[xX][0-9a-fA-F]+[iu]?/ | /0[iu]?/ | /[1-9][0-9]*[iu]?/
interpolation_sample_name: 'center' | 'centroid' | 'sample'
interpolation_type_name: 'perspective' | 'linear' | 'flat'
language: translation_unit EndOfText
less_than: '<'
less_than_equal: '<='
let: 'let'
lhs_expression: lhs_expression/0.0 core_lhs_expression lhs_expression/0.2
lhs_expression/0.0: lhs_expression/0.0/0 | ε
lhs_expression/0.0/0: lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 | ε
lhs_expression/0.0/0/0.0: star | and
lhs_expression/0.2: postfix_expression | ε
loop: 'loop'
loop_statement: 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right
loop_statement/0.2: loop_statement/0.2/0 | ε
loop_statement/0.2/0: statement loop_statement/0.2/0 | ε
loop_statement/0.3: continuing_statement | ε
mat2x2: 'mat2x2'
mat2x3: 'mat2x3'
mat2x4: 'mat2x4'
mat3x2: 'mat3x2'
mat3x3: 'mat3x3'
mat3x4: 'mat3x4'
mat4x2: 'mat4x2'
mat4x3: 'mat4x3'
mat4x4: 'mat4x4'
mat_prefix: 'mat2x2' | 'mat2x3' | 'mat2x4' | 'mat3x2' | 'mat3x3' | 'mat3x4' | 'mat4x2' | 'mat4x3' | 'mat4x4'
member_ident: ident_pattern_token
minus: '-'
minus_equal: '-='
minus_minus: '--'
modulo: '%'
modulo_equal: '%='
multiplicative_expression: unary_expression | multiplicative_expression multiplicative_operator unary_expression
multiplicative_operator: star | forward_slash | modulo
multisampled_texture_type: 'texture_multisampled_2d'
not_equal: '!='
optionally_typed_ident: ident optionally_typed_ident/0.1
optionally_typed_ident/0.1: colon type_decl | ε
or: '|'
or_equal: '|='
or_or: '||'
override: 'override'
param: param/0.0 ident colon type_decl
param/0.0: param/0.0/0 | ε
param/0.0/0: attribute param/0.0/0 | ε
param_list: param param_list/0.1 param_list/0.2
param_list/0.1: param_list/0.1/0 | ε
param_list/0.1/0: param_list/0.1/0/0.0 param_list/0.1/0 | ε
param_list/0.1/0/0.0: comma param
param_list/0.2: comma | ε
paren_expression: paren_left expression paren_right
paren_left: '('
paren_right: ')'
period: '.'
plus: '+'
plus_equal: '+='
plus_plus: '++'
pointer: 'ptr'
postfix_expression: bracket_left expression bracket_right postfix_expression/0.3 | period member_ident postfix_expression/1.2 | period swizzle_name postfix_expression/2.2
postfix_expression/0.3: postfix_expression | ε
postfix_expression/1.2: postfix_expression | ε
postfix_expression/2.2: postfix_expression | ε
primary_expression: ident | callable argument_expression_list | const_literal | paren_expression | 'bitcast' less_than type_decl greater_than paren_expression
private: 'private'
relational_expression: shift_expression | shift_expression less_than shift_expression | shift_expression greater_than shift_expression | shift_expression less_than_equal shift_expression | shift_expression greater_than_equal shift_expression | shift_expression equal_equal shift_expression | shift_expression not_equal shift_expression
return: 'return'
return_statement: 'return' return_statement/0.1
return_statement/0.1: expression | ε
sampled_texture_type: 'texture_1d' | 'texture_2d' | 'texture_2d_array' | 'texture_3d' | 'texture_cube' | 'texture_cube_array'
sampler: 'sampler'
sampler_comparison: 'sampler_comparison'
sampler_type: 'sampler' | 'sampler_comparison'
semicolon: ';'
shift_expression: additive_expression | unary_expression shift_left unary_expression | unary_expression shift_right unary_expression
shift_left: '<<'
shift_left_equal: '<<='
shift_right: '>>'
shift_right_equal: '>>='
short_circuit_and_expression: relational_expression | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression: relational_expression | short_circuit_or_expression or_or relational_expression
singular_expression: primary_expression singular_expression/0.1
singular_expression/0.1: postfix_expression | ε
star: '*'
statement: semicolon | return_statement semicolon | if_statement | switch_statement | loop_statement | for_statement | while_statement | func_call_statement semicolon | variable_statement semicolon | break_statement semicolon | continue_statement semicolon | 'discard' semicolon | variable_updating_statement semicolon | compound_statement | static_assert_statement semicolon
static_assert: 'static_assert'
static_assert_statement: 'static_assert' expression
storage: 'storage'
storage_texture_type: 'texture_storage_1d' | 'texture_storage_2d' | 'texture_storage_2d_array' | 'texture_storage_3d'
struct: 'struct'
struct_body_decl: brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right
struct_body_decl/0.2: struct_body_decl/0.2/0 | ε
struct_body_decl/0.2/0: struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 | ε
struct_body_decl/0.2/0/0.0: comma struct_member
struct_body_decl/0.3: comma | ε
struct_decl: 'struct' ident struct_body_decl
struct_member: struct_member/0.0 member_ident colon type_decl
struct_member/0.0: struct_member/0.0/0 | ε
struct_member/0.0/0: attribute struct_member/0.0/0 | ε
switch: 'switch'
switch_body: case_clause | default_alone_clause
switch_statement: 'switch' expression brace_left switch_statement/0.3 brace_right
switch_statement/0.3: switch_statement/0.3/0
switch_statement/0.3/0: switch_body switch_statement/0.3/0 | ε
swizzle_name: '/[rgba]/' | '/[rgba][rgba]/' | '/[rgba][rgba][rgba]/' | '/[rgba][rgba][rgba][rgba]/' | '/[xyzw]/' | '/[xyzw][xyzw]/' | '/[xyzw][xyzw][xyzw]/' | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format: 'rgba8unorm' | 'rgba8snorm' | 'rgba8uint' | 'rgba8sint' | 'rgba16uint' | 'rgba16sint' | 'rgba16float' | 'r32uint' | 'r32sint' | 'r32float' | 'rg32uint' | 'rg32sint' | 'rg32float' | 'rgba32uint' | 'rgba32sint' | 'rgba32float'
texture_1d: 'texture_1d'
texture_2d: 'texture_2d'
texture_2d_array: 'texture_2d_array'
texture_3d: 'texture_3d'
texture_and_sampler_types: sampler_type | depth_texture_type | sampled_texture_type less_than type_decl greater_than | multisampled_texture_type less_than type_decl greater_than | storage_texture_type less_than texel_format comma access_mode greater_than
texture_cube: 'texture_cube'
texture_cube_array: 'texture_cube_array'
texture_depth_2d: 'texture_depth_2d'
texture_depth_2d_array: 'texture_depth_2d_array'
texture_depth_cube: 'texture_depth_cube'
texture_depth_cube_array: 'texture_depth_cube_array'
texture_depth_multisampled_2d: 'texture_depth_multisampled_2d'
texture_multisampled_2d: 'texture_multisampled_2d'
texture_storage_1d: 'texture_storage_1d'
texture_storage_2d: 'texture_storage_2d'
texture_storage_2d_array: 'texture_storage_2d_array'
texture_storage_3d: 'texture_storage_3d'
tilde: '~'
times_equal: '*='
translation_unit: translation_unit/0.0 translation_unit/0.1
translation_unit/0.0: translation_unit/0.0/0 | ε
translation_unit/0.0/0: global_directive translation_unit/0.0/0 | ε
translation_unit/0.1: translation_unit/0.1/0 | ε
translation_unit/0.1/0: global_decl translation_unit/0.1/0 | ε
true: 'true'
type: 'type'
type_alias_decl: 'type' ident equal type_decl
type_decl: ident | type_decl_without_ident
type_decl_without_ident: 'bool' | float32 | float16 | int32 | uint32 | pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than | array_type_decl | texture_and_sampler_types
type_decl_without_ident/7.5: comma access_mode | ε
uint32: 'u32'
unary_expression: singular_expression | minus unary_expression | bang unary_expression | tilde unary_expression | star unary_expression | and unary_expression
underscore: '_'
uniform: 'uniform'
var: 'var'
variable_decl: 'var' variable_decl/0.1 optionally_typed_ident
variable_decl/0.1: variable_qualifier | ε
variable_qualifier: less_than address_space variable_qualifier/0.2 greater_than
variable_qualifier/0.2: comma access_mode | ε
variable_statement: variable_decl | variable_decl equal expression | 'let' optionally_typed_ident equal expression | 'const' optionally_typed_ident equal expression
variable_updating_statement: assignment_statement | increment_statement | decrement_statement
vec2: 'vec2'
vec3: 'vec3'
vec4: 'vec4'
vec_prefix: 'vec2' | 'vec3' | 'vec4'
while: 'while'
while_statement: 'while' expression compound_statement
workgroup: 'workgroup'
xor: '^'
xor_equal: '^='

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name semicolon : {';' '@' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · semicolon : {';' '@' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#12
global_decl -> semicolon · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> static_assert_statement · semicolon : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#19
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'static_assert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}

#21
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#22
type_alias_decl -> 'type' · ident equal type_decl : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#23
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#24
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#25
static_assert_statement -> 'static_assert' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#26
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#27
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#28
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#29
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#30
attribute -> attr · 'align' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'binding' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'group' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'id' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'location' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr · 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#31
attr -> '@' · : {'const'}

#32
attribute -> attr 'align' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#33
attribute -> attr 'binding' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#34
attribute -> attr 'builtin' · paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {}

#35
attribute -> attr 'const' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#36
attribute -> attr 'group' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#37
attribute -> attr 'id' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#38
attribute -> attr 'interpolate' · paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'interpolate' · paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {}

#39
attribute -> attr 'invariant' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#40
attribute -> attr 'location' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#41
attribute -> attr 'size' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#42
attribute -> attr 'workgroup_size' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' · paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' · paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#43
attribute -> attr 'vertex' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#44
attribute -> attr 'fragment' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#45
attribute -> attr 'compute' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#46
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#47
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#48
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#49
static_assert_statement -> 'static_assert' expression · : {';'}

#50
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#51
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#52
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#53
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#54
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#55
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#56
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#57
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#58
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_operator -> · minus : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
additive_operator -> · plus : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#59
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#60
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_operator -> · forward_slash : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_operator -> · modulo : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_operator -> · star : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#61
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#62
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#63
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#64
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#65
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#66
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#67
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · postfix_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#68
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#69
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#70
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#71
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#72
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#73
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#74
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#75
primary_expression -> const_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#76
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#77
primary_expression -> 'bitcast' · less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#78
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#79
callable -> type_decl_without_ident · : {'('}

#80
callable -> vec_prefix · : {'('}

#81
callable -> mat_prefix · : {'('}

#82
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {'('}
callable -> 'array' · : {'('}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#83
const_literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#84
const_literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#85
const_literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#87
type_decl_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#88
type_decl_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#89
type_decl_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_decl_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_decl_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_decl_without_ident -> pointer · less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}

#93
type_decl_without_ident -> array_type_decl · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#94
type_decl_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#95
vec_prefix -> 'vec2' · : {'('}

#96
vec_prefix -> 'vec3' · : {'('}

#97
vec_prefix -> 'vec4' · : {'('}

#98
mat_prefix -> 'mat2x2' · : {'('}

#99
mat_prefix -> 'mat2x3' · : {'('}

#100
mat_prefix -> 'mat2x4' · : {'('}

#101
mat_prefix -> 'mat3x2' · : {'('}

#102
mat_prefix -> 'mat3x3' · : {'('}

#103
mat_prefix -> 'mat3x4' · : {'('}

#104
mat_prefix -> 'mat4x2' · : {'('}

#105
mat_prefix -> 'mat4x3' · : {'('}

#106
mat_prefix -> 'mat4x4' · : {'('}

#107
int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#108
int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#109
int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#110
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#115
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#116
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#117
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#118
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#119
pointer -> 'ptr' · : {'<'}

#120
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#121
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#122
texture_and_sampler_types -> sampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#123
texture_and_sampler_types -> multisampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#124
texture_and_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#125
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#126
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#127
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#128
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#129
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#130
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#131
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#132
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#133
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#134
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#135
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#136
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#137
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#138
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#139
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#140
sampled_texture_type -> 'texture_1d' · : {'<'}

#141
sampled_texture_type -> 'texture_2d' · : {'<'}

#142
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#143
sampled_texture_type -> 'texture_3d' · : {'<'}

#144
sampled_texture_type -> 'texture_cube' · : {'<'}

#145
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#146
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#147
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#148
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#149
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#150
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#151
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#152
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#153
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#154
type_alias_decl -> 'type' ident · equal type_decl : {';'}
equal -> · '=' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#155
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#156
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_variable_decl/0.2 -> · equal expression : {';'}

#157
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {';' '='}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#158
global_decl -> static_assert_statement semicolon · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#159
global_decl -> type_alias_decl semicolon · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#160
global_decl -> global_constant_decl semicolon · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#161
global_decl -> global_variable_decl semicolon · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#162
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#163
global_directive -> 'enable' extension_name semicolon · : {';' '@' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#164
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#165
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#166
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#167
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'function' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'private' 'ptr' 'sampler' 'sampler_comparison' 'storage' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'uniform' 'vec2' 'vec3' 'vec4' 'workgroup' '~'}

#168
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#169
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#170
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#171
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_constant_decl/1.3 -> · equal expression : {';'}

#172
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
optionally_typed_ident/0.1 -> · colon type_decl : {';' '='}

#173
type_alias_decl -> 'type' ident equal · type_decl : {';'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {';'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_decl -> · ident : {';'}
type_decl -> · type_decl_without_ident : {';'}
type_decl_without_ident -> · 'bool' : {';'}
type_decl_without_ident -> · array_type_decl : {';'}
type_decl_without_ident -> · float16 : {';'}
type_decl_without_ident -> · float32 : {';'}
type_decl_without_ident -> · int32 : {';'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {';'}
type_decl_without_ident -> · texture_and_sampler_types : {';'}
type_decl_without_ident -> · uint32 : {';'}
uint32 -> · 'u32' : {';'}

#174
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#175
struct_body_decl -> brace_left · struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#176
brace_left -> '{' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#177
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#178
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#179
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#180
texture_and_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#181
texture_and_sampler_types -> multisampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#182
texture_and_sampler_types -> sampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#183
type_decl_without_ident -> pointer less_than · address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#184
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#185
array_type_decl -> 'array' less_than · type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#186
primary_expression -> 'bitcast' less_than · type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#187
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#188
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1 -> · expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 : {')'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#189
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#190
singular_expression/0.1 -> postfix_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#191
postfix_expression -> bracket_left · expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#192
postfix_expression -> period · member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> period · swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#193
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#194
period -> '.' · : {}

#195
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#196
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#197
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#198
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#199
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#200
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#201
multiplicative_operator -> star · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#202
multiplicative_operator -> forward_slash · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#203
multiplicative_operator -> modulo · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#204
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#205
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#206
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#207
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#208
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#209
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#210
additive_expression -> additive_expression additive_operator · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#211
additive_operator -> plus · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#212
additive_operator -> minus · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#213
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#214
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#215
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#216
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#217
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#218
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · const_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#219
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#220
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#221
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#222
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#223
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#224
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#225
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#226
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#227
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#228
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#229
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#230
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#231
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#232
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#233
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#234
attribute -> attr 'workgroup_size' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' paren_left · expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' paren_left · expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#235
attribute -> attr 'size' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#236
attribute -> attr 'location' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#237
attribute -> attr 'interpolate' paren_left · interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'interpolate' paren_left · interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#238
attribute -> attr 'id' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#239
attribute -> attr 'group' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#240
attribute -> attr 'builtin' paren_left · builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#241
attribute -> attr 'binding' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#242
attribute -> attr 'align' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#243
attribute -> attr 'align' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#244
attribute -> attr 'binding' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#245
attribute -> attr 'builtin' paren_left builtin_value_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#246
builtin_value_name -> 'vertex_index' · : {')' ','}

#247
builtin_value_name -> 'instance_index' · : {')' ','}

#248
builtin_value_name -> 'position' · : {')' ','}

#249
builtin_value_name -> 'front_facing' · : {')' ','}

#250
builtin_value_name -> 'frag_depth' · : {')' ','}

#251
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#252
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#253
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#254
builtin_value_name -> 'workgroup_id' · : {')' ','}

#255
builtin_value_name -> 'num_workgroups' · : {')' ','}

#256
builtin_value_name -> 'sample_index' · : {')' ','}

#257
builtin_value_name -> 'sample_mask' · : {')' ','}

#258
attribute -> attr 'group' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#259
attribute -> attr 'id' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#260
attribute -> attr 'interpolate' paren_left interpolation_type_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'interpolate' paren_left interpolation_type_name · comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#261
interpolation_type_name -> 'perspective' · : {')' ','}

#262
interpolation_type_name -> 'linear' · : {')' ','}

#263
interpolation_type_name -> 'flat' · : {')' ','}

#264
attribute -> attr 'location' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#265
attribute -> attr 'size' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#266
attribute -> attr 'workgroup_size' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' paren_left expression · comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' paren_left expression · comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#267
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#268
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#269
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#270
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#271
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#272
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#273
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#274
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#275
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#276
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#277
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#278
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#279
additive_expression -> additive_expression additive_operator multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_operator -> · forward_slash : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_operator -> · modulo : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_operator -> · star : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#280
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#281
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#282
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#283
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#284
postfix_expression -> period member_ident · postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/1.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#285
postfix_expression -> period swizzle_name · postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/2.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#286
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#287
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#288
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#289
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#290
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#291
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#292
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#293
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#294
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#295
postfix_expression -> bracket_left expression · bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#296
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#297
argument_expression_list/0.1 -> expression · argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.1 -> · argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0 -> · argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0/0.0 -> · comma expression : {')' ','}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#298
primary_expression -> 'bitcast' less_than type_decl · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#299
type_decl -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#300
type_decl -> type_decl_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#301
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#302
array_type_decl -> 'array' less_than type_decl · array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#303
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#304
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' '{' '|' '|=' '||'}

#305
type_decl_without_ident -> pointer less_than address_space · comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#306
address_space -> 'function' · : {',' '>'}

#307
address_space -> 'private' · : {',' '>'}

#308
address_space -> 'workgroup' · : {',' '>'}

#309
address_space -> 'uniform' · : {',' '>'}

#310
address_space -> 'storage' · : {',' '>'}

#311
texture_and_sampler_types -> sampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#312
texture_and_sampler_types -> multisampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#313
texture_and_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#314
texel_format -> 'rgba8unorm' · : {','}

#315
texel_format -> 'rgba8snorm' · : {','}

#316
texel_format -> 'rgba8uint' · : {','}

#317
texel_format -> 'rgba8sint' · : {','}

#318
texel_format -> 'rgba16uint' · : {','}

#319
texel_format -> 'rgba16sint' · : {','}

#320
texel_format -> 'rgba16float' · : {','}

#321
texel_format -> 'r32uint' · : {','}

#322
texel_format -> 'r32sint' · : {','}

#323
texel_format -> 'r32float' · : {','}

#324
texel_format -> 'rg32uint' · : {','}

#325
texel_format -> 'rg32sint' · : {','}

#326
texel_format -> 'rg32float' · : {','}

#327
texel_format -> 'rgba32uint' · : {','}

#328
texel_format -> 'rgba32sint' · : {','}

#329
texel_format -> 'rgba32float' · : {','}

#330
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#331
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#332
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#333
statement -> semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#334
statement -> return_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#335
statement -> if_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#336
statement -> switch_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#337
statement -> loop_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#338
statement -> for_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#339
statement -> while_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#340
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#341
statement -> variable_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#342
statement -> break_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#343
statement -> continue_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#344
statement -> 'discard' · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#345
statement -> variable_updating_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#346
statement -> compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#347
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#348
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#349
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#350
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#351
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#352
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#354
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#355
variable_statement -> variable_decl · : {';'}
variable_statement -> variable_decl · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#356
variable_statement -> 'let' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#357
variable_statement -> 'const' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#358
break_statement -> 'break' · : {';'}

#359
continue_statement -> 'continue' · : {';'}

#360
variable_updating_statement -> assignment_statement · : {')' ';'}

#361
variable_updating_statement -> increment_statement · : {')' ';'}

#362
variable_updating_statement -> decrement_statement · : {')' ';'}

#363
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#364
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#365
lhs_expression -> lhs_expression/0.0 · core_lhs_expression lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}

#366
lhs_expression/0.0 -> lhs_expression/0.0/0 · : {'('}

#367
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 · lhs_expression/0.0/0 : {'('}
and -> · '&' : {'&' '(' '*'}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#368
lhs_expression/0.0/0/0.0 -> star · : {'&' '(' '*'}

#369
lhs_expression/0.0/0/0.0 -> and · : {'&' '(' '*'}

#370
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 ident colon type_decl : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {')'}

#371
struct_body_decl -> brace_left struct_member · struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · comma struct_member : {',' '}'}

#372
struct_member -> struct_member/0.0 · member_ident colon type_decl : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#373
struct_member/0.0 -> struct_member/0.0/0 · : {}

#374
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#375
type_alias_decl -> 'type' ident equal type_decl · : {';'}

#376
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {';' '='}

#377
optionally_typed_ident/0.1 -> colon · type_decl : {';' '='}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {';' '='}
depth_texture_type -> · 'texture_depth_2d' : {';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {';' '='}
depth_texture_type -> · 'texture_depth_cube' : {';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';' '='}
float16 -> · 'f16' : {';' '='}
float32 -> · 'f32' : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';' '='}
int32 -> · 'i32' : {';' '='}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';' '='}
sampler_type -> · 'sampler_comparison' : {';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';' '='}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {';' '='}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {';' '='}
texture_and_sampler_types -> · sampler_type : {';' '='}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';' '='}
type_decl -> · ident : {';' '='}
type_decl -> · type_decl_without_ident : {';' '='}
type_decl_without_ident -> · 'bool' : {';' '='}
type_decl_without_ident -> · array_type_decl : {';' '='}
type_decl_without_ident -> · float16 : {';' '='}
type_decl_without_ident -> · float32 : {';' '='}
type_decl_without_ident -> · int32 : {';' '='}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {';' '='}
type_decl_without_ident -> · texture_and_sampler_types : {';' '='}
type_decl_without_ident -> · uint32 : {';' '='}
uint32 -> · 'u32' : {';' '='}

#378
colon -> ':' · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' '{'}

#379
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {';'}

#380
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#381
global_variable_decl/0.2 -> equal expression · : {';'}

#382
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#383
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {';' '='}

#384
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#385
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#386
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#387
global_constant_decl/1.3 -> equal expression · : {';'}

#388
optionally_typed_ident/0.1 -> colon type_decl · : {';' '='}

#389
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#390
struct_member -> struct_member/0.0 member_ident · colon type_decl : {',' '}'}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#391
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 · struct_body_decl/0.3 brace_right : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#392
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {',' '}'}

#393
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {',' '}'}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · comma struct_member : {',' '}'}

#394
struct_body_decl/0.2/0/0.0 -> comma · struct_member : {',' '}'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#395
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#396
function_header/0.3 -> param_list · : {')'}

#397
param_list -> param · param_list/0.1 param_list/0.2 : {')'}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1 -> · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · comma param : {')' ','}

#398
param -> param/0.0 · ident colon type_decl : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#399
param/0.0 -> param/0.0/0 · : {}

#400
param/0.0/0 -> attribute · param/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
param/0.0/0 -> · attribute param/0.0/0 : {}

#401
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 · : {'('}

#402
lhs_expression -> lhs_expression/0.0 core_lhs_expression · lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
lhs_expression/0.2 -> · postfix_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#403
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#404
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {')'}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#405
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#406
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#407
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#408
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#409
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#410
plus_plus -> '++' · : {')' ';'}

#411
minus_minus -> '--' · : {')' ';'}

#412
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#413
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#414
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#415
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#416
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#417
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#418
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#419
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#420
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#421
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#422
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#423
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#424
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#425
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#426
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#427
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#428
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#429
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#430
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#431
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#432
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#433
variable_statement -> 'const' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#434
variable_statement -> 'let' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#435
variable_statement -> variable_decl equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#436
func_call_statement -> ident argument_expression_list · : {')' ';'}

#437
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#438
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · variable_statement : {';'}
for_init -> · variable_updating_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}

#439
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#440
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#441
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#442
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#443
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#444
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#445
return_statement -> 'return' return_statement/0.1 · : {';'}

#446
return_statement/0.1 -> expression · : {';'}

#447
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#448
statement -> variable_updating_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#449
statement -> 'discard' semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#450
statement -> continue_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#451
statement -> break_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#452
statement -> variable_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#453
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#454
statement -> return_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#455
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#456
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#457
brace_right -> '}' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#458
texture_and_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#459
texture_and_sampler_types -> multisampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#460
texture_and_sampler_types -> sampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#461
type_decl_without_ident -> pointer less_than address_space comma · type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#462
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#463
array_type_decl/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · const_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#464
primary_expression -> 'bitcast' less_than type_decl greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#465
argument_expression_list/0.1 -> expression argument_expression_list/0.1/0.1 · argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.2 -> · comma : {')'}
comma -> · ',' : {')'}

#466
argument_expression_list/0.1/0.1 -> argument_expression_list/0.1/0.1/0 · : {')' ','}

#467
argument_expression_list/0.1/0.1/0 -> argument_expression_list/0.1/0.1/0/0.0 · argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0 -> · argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0/0.0 -> · comma expression : {')' ','}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#468
argument_expression_list/0.1/0.1/0/0.0 -> comma · expression : {')' ','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#469
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#470
postfix_expression -> bracket_left expression bracket_right · postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/0.3 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#471
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#472
postfix_expression -> period swizzle_name postfix_expression/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#473
postfix_expression/2.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#474
postfix_expression -> period member_ident postfix_expression/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#475
postfix_expression/1.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#476
attribute -> attr 'workgroup_size' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#477
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#478
attrib_end -> attrib_end/0.0 · paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
paren_right -> · ')' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#479
attribute -> attr 'size' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#480
attrib_end/0.0 -> comma · : {')'}

#481
attribute -> attr 'location' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#482
attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#483
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'interpolate' paren_left interpolation_type_name comma · interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#484
attribute -> attr 'id' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#485
attribute -> attr 'group' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#486
attribute -> attr 'builtin' paren_left builtin_value_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#487
attribute -> attr 'binding' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#488
attribute -> attr 'align' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#489
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#490
interpolation_sample_name -> 'center' · : {')' ','}

#491
interpolation_sample_name -> 'centroid' · : {')' ','}

#492
interpolation_sample_name -> 'sample' · : {')' ','}

#493
attrib_end -> attrib_end/0.0 paren_right · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#494
attribute -> attr 'workgroup_size' paren_left expression comma expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attribute -> attr 'workgroup_size' paren_left expression comma expression · comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#495
postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#496
postfix_expression/0.3 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#497
argument_expression_list/0.1/0.1/0/0.0 -> comma expression · : {')' ','}

#498
argument_expression_list/0.1/0.1/0 -> argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 · : {')' ','}

#499
argument_expression_list/0.1 -> expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 · : {')'}

#500
argument_expression_list/0.1/0.2 -> comma · : {')'}

#501
primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#502
array_type_decl/0.3 -> comma element_count_expression · : {'>'}

#503
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
additive_operator -> · minus : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
additive_operator -> · plus : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#504
element_count_expression -> bitwise_expression · : {'>'}

#505
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#506
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#507
type_decl_without_ident -> pointer less_than address_space comma type_decl · type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_decl_without_ident/7.5 -> · comma access_mode : {'>'}

#508
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#509
access_mode -> 'read' · : {'>'}

#510
access_mode -> 'write' · : {'>'}

#511
access_mode -> 'read_write' · : {'>'}

#512
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#513
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#514
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#515
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#516
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#517
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#518
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#519
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#520
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#521
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#522
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#523
for_header/0.0 -> for_init · : {';'}

#524
for_init -> variable_statement · : {';'}

#525
for_init -> variable_updating_statement · : {';'}

#526
for_init -> func_call_statement · : {';'}

#527
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#528
variable_statement -> variable_decl equal expression · : {';'}

#529
variable_statement -> 'let' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#530
variable_statement -> 'const' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#531
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#532
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#533
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#534
lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#535
lhs_expression/0.2 -> postfix_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#536
param/0.0/0 -> attribute param/0.0/0 · : {}

#537
param -> param/0.0 ident · colon type_decl : {')' ','}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#538
param_list -> param param_list/0.1 · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#539
param_list/0.1 -> param_list/0.1/0 · : {')' ','}

#540
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {')' ','}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · comma param : {')' ','}

#541
param_list/0.1/0/0.0 -> comma · param : {')' ','}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
param -> · param/0.0 ident colon type_decl : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#542
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_decl : {'{'}

#543
struct_body_decl/0.2/0/0.0 -> comma struct_member · : {',' '}'}

#544
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {',' '}'}

#545
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 · brace_right : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#546
struct_body_decl/0.3 -> comma · : {'}'}

#547
struct_member -> struct_member/0.0 member_ident colon · type_decl : {',' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
float16 -> · 'f16' : {',' '}'}
float32 -> · 'f32' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
int32 -> · 'i32' : {',' '}'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '}'}
type_decl -> · ident : {',' '}'}
type_decl -> · type_decl_without_ident : {',' '}'}
type_decl_without_ident -> · 'bool' : {',' '}'}
type_decl_without_ident -> · array_type_decl : {',' '}'}
type_decl_without_ident -> · float16 : {',' '}'}
type_decl_without_ident -> · float32 : {',' '}'}
type_decl_without_ident -> · int32 : {',' '}'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '}'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '}'}
type_decl_without_ident -> · uint32 : {',' '}'}
uint32 -> · 'u32' : {',' '}'}

#548
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#549
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#550
struct_member -> struct_member/0.0 member_ident colon type_decl · : {',' '}'}

#551
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right · : {';' '@' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#552
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#553
function_header/0.5 -> arrow · function_header/0.5/0.1 type_decl : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#554
arrow -> '->' · : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#555
param_list/0.1/0/0.0 -> comma param · : {')' ','}

#556
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {')' ','}

#557
param_list -> param param_list/0.1 param_list/0.2 · : {')'}

#558
param_list/0.2 -> comma · : {')'}

#559
param -> param/0.0 ident colon · type_decl : {')' ','}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {')' ','}
depth_texture_type -> · 'texture_depth_2d' : {')' ','}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ','}
depth_texture_type -> · 'texture_depth_cube' : {')' ','}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ','}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ','}
float16 -> · 'f16' : {')' ','}
float32 -> · 'f32' : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
int32 -> · 'i32' : {')' ','}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ','}
sampler_type -> · 'sampler_comparison' : {')' ','}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ','}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {')' ','}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {')' ','}
texture_and_sampler_types -> · sampler_type : {')' ','}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ','}
type_decl -> · ident : {')' ','}
type_decl -> · type_decl_without_ident : {')' ','}
type_decl_without_ident -> · 'bool' : {')' ','}
type_decl_without_ident -> · array_type_decl : {')' ','}
type_decl_without_ident -> · float16 : {')' ','}
type_decl_without_ident -> · float32 : {')' ','}
type_decl_without_ident -> · int32 : {')' ','}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {')' ','}
type_decl_without_ident -> · texture_and_sampler_types : {')' ','}
type_decl_without_ident -> · uint32 : {')' ','}
uint32 -> · 'u32' : {')' ','}

#560
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#561
variable_statement -> 'const' optionally_typed_ident equal expression · : {';'}

#562
variable_statement -> 'let' optionally_typed_ident equal expression · : {';'}

#563
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#564
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#565
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#566
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#567
loop_statement/0.3 -> continuing_statement · : {'}'}

#568
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#569
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#570
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#571
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#572
switch_body -> case_clause · : {'case' 'default' '}'}

#573
switch_body -> default_alone_clause · : {'case' 'default' '}'}

#574
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '{'}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#575
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
default_alone_clause/0.1 -> · colon : {'{'}

#576
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#577
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#578
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#579
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#580
type_decl_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#581
attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#582
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma expression comma · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#583
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#584
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#585
type_decl_without_ident/7.5 -> comma access_mode · : {'>'}

#586
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#587
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#588
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'case' 'default' '}'}

#589
default_alone_clause/0.1 -> colon · : {'{'}

#590
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> · colon : {'{'}
colon -> · ':' : {'{'}

#591
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma case_selector : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#592
case_selector -> 'default' · : {',' ':' '{'}

#593
case_selector -> expression · : {',' ':' '{'}

#594
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#595
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#596
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#597
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#598
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#599
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#600
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#601
for_header/0.2 -> expression · : {';'}

#602
param -> param/0.0 ident colon type_decl · : {')' ','}

#603
function_header/0.5 -> arrow function_header/0.5/0.1 · type_decl : {'{'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'{'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'{'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'{'}
texture_and_sampler_types -> · sampler_type : {'{'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_decl -> · ident : {'{'}
type_decl -> · type_decl_without_ident : {'{'}
type_decl_without_ident -> · 'bool' : {'{'}
type_decl_without_ident -> · array_type_decl : {'{'}
type_decl_without_ident -> · float16 : {'{'}
type_decl_without_ident -> · float32 : {'{'}
type_decl_without_ident -> · int32 : {'{'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'{'}
type_decl_without_ident -> · texture_and_sampler_types : {'{'}
type_decl_without_ident -> · uint32 : {'{'}
uint32 -> · 'u32' : {'{'}

#604
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#605
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#606
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#607
function_header/0.5 -> arrow function_header/0.5/0.1 type_decl · : {'{'}

#608
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · variable_updating_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
variable_updating_statement -> · assignment_statement : {')'}
variable_updating_statement -> · decrement_statement : {')'}
variable_updating_statement -> · increment_statement : {')'}

#609
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#610
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#611
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#612
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#613
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#614
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma case_selector : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#615
case_selectors/0.1/0/0.0 -> comma · case_selector : {',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#616
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'case' 'default' '}'}

#617
case_clause/0.2 -> colon · : {'{'}

#618
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default' '}'}

#619
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var'}

#620
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default' '}'}

#621
case_selectors/0.1/0/0.0 -> comma case_selector · : {',' ':' '{'}

#622
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#623
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#624
case_selectors/0.2 -> comma · : {':' '{'}

#625
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#626
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#627
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#628
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#629
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#630
for_header/0.4 -> for_update · : {')'}

#631
for_update -> variable_updating_statement · : {')'}

#632
for_update -> func_call_statement · : {')'}

#633
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#634
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#635
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#636
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#3 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#4 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#5 global_decl -> semicolon ·
r#6 global_decl -> struct_decl ·
r#7 global_decl -> function_decl ·
r#8 semicolon -> ';' ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attr -> '@' ·
r#13 attribute -> attr 'const' ·
r#14 attribute -> attr 'invariant' ·
r#15 attribute -> attr 'vertex' ·
r#16 attribute -> attr 'fragment' ·
r#17 attribute -> attr 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 static_assert_statement -> 'static_assert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 minus -> '-' ·
r#35 bang -> '!' ·
r#36 tilde -> '~' ·
r#37 star -> '*' ·
r#38 and -> '&' ·
r#39 primary_expression -> ident ·
r#40 callable -> ident ·
r#41 primary_expression -> const_literal ·
r#42 primary_expression -> paren_expression ·
r#43 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#44 callable -> type_decl_without_ident ·
r#45 callable -> vec_prefix ·
r#46 callable -> mat_prefix ·
r#47 callable -> 'array' ·
r#48 const_literal -> int_literal ·
r#49 const_literal -> float_literal ·
r#50 const_literal -> bool_literal ·
r#51 type_decl_without_ident -> 'bool' ·
r#52 type_decl_without_ident -> float32 ·
r#53 type_decl_without_ident -> float16 ·
r#54 type_decl_without_ident -> int32 ·
r#55 type_decl_without_ident -> uint32 ·
r#56 type_decl_without_ident -> array_type_decl ·
r#57 type_decl_without_ident -> texture_and_sampler_types ·
r#58 vec_prefix -> 'vec2' ·
r#59 vec_prefix -> 'vec3' ·
r#60 vec_prefix -> 'vec4' ·
r#61 mat_prefix -> 'mat2x2' ·
r#62 mat_prefix -> 'mat2x3' ·
r#63 mat_prefix -> 'mat2x4' ·
r#64 mat_prefix -> 'mat3x2' ·
r#65 mat_prefix -> 'mat3x3' ·
r#66 mat_prefix -> 'mat3x4' ·
r#67 mat_prefix -> 'mat4x2' ·
r#68 mat_prefix -> 'mat4x3' ·
r#69 mat_prefix -> 'mat4x4' ·
r#70 int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#71 int_literal -> /0[iu]?/ ·
r#72 int_literal -> /[1-9][0-9]*[iu]?/ ·
r#73 float_literal -> decimal_float_literal ·
r#74 float_literal -> hex_float_literal ·
r#75 bool_literal -> 'true' ·
r#76 bool_literal -> 'false' ·
r#77 paren_left -> '(' ·
r#78 float32 -> 'f32' ·
r#79 float16 -> 'f16' ·
r#80 int32 -> 'i32' ·
r#81 uint32 -> 'u32' ·
r#82 pointer -> 'ptr' ·
r#83 texture_and_sampler_types -> sampler_type ·
r#84 texture_and_sampler_types -> depth_texture_type ·
r#85 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#86 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#87 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#88 decimal_float_literal -> /0[fh]/ ·
r#89 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#90 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#91 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#92 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#93 sampler_type -> 'sampler' ·
r#94 sampler_type -> 'sampler_comparison' ·
r#95 depth_texture_type -> 'texture_depth_2d' ·
r#96 depth_texture_type -> 'texture_depth_2d_array' ·
r#97 depth_texture_type -> 'texture_depth_cube' ·
r#98 depth_texture_type -> 'texture_depth_cube_array' ·
r#99 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#100 sampled_texture_type -> 'texture_1d' ·
r#101 sampled_texture_type -> 'texture_2d' ·
r#102 sampled_texture_type -> 'texture_2d_array' ·
r#103 sampled_texture_type -> 'texture_3d' ·
r#104 sampled_texture_type -> 'texture_cube' ·
r#105 sampled_texture_type -> 'texture_cube_array' ·
r#106 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#107 storage_texture_type -> 'texture_storage_1d' ·
r#108 storage_texture_type -> 'texture_storage_2d' ·
r#109 storage_texture_type -> 'texture_storage_2d_array' ·
r#110 storage_texture_type -> 'texture_storage_3d' ·
r#111 global_decl -> static_assert_statement semicolon ·
r#112 global_decl -> type_alias_decl semicolon ·
r#113 global_decl -> global_constant_decl semicolon ·
r#114 global_decl -> global_variable_decl semicolon ·
r#115 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#116 global_directive -> 'enable' extension_name semicolon ·
r#117 variable_decl/0.1 -> variable_qualifier ·
r#118 less_than -> '<' ·
r#119 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#120 equal -> '=' ·
r#121 struct_decl -> 'struct' ident struct_body_decl ·
r#122 brace_left -> '{' ·
r#123 function_decl -> function_decl/0.0 function_header compound_statement ·
r#124 primary_expression -> callable argument_expression_list ·
r#125 singular_expression -> primary_expression singular_expression/0.1 ·
r#126 singular_expression/0.1 -> postfix_expression ·
r#127 bracket_left -> '[' ·
r#128 unary_expression -> and unary_expression ·
r#129 unary_expression -> star unary_expression ·
r#130 unary_expression -> tilde unary_expression ·
r#131 unary_expression -> bang unary_expression ·
r#132 unary_expression -> minus unary_expression ·
r#133 multiplicative_operator -> star ·
r#134 multiplicative_operator -> forward_slash ·
r#135 multiplicative_operator -> modulo ·
r#136 forward_slash -> '/' ·
r#137 modulo -> '%' ·
r#138 shift_left -> '<<' ·
r#139 shift_right -> '>>' ·
r#140 additive_operator -> plus ·
r#141 additive_operator -> minus ·
r#142 plus -> '+' ·
r#143 xor -> '^' ·
r#144 or -> '|' ·
r#145 greater_than -> '>' ·
r#146 less_than_equal -> '<=' ·
r#147 greater_than_equal -> '>=' ·
r#148 equal_equal -> '==' ·
r#149 not_equal -> '!=' ·
r#150 and_and -> '&&' ·
r#151 or_or -> '||' ·
r#152 builtin_value_name -> 'vertex_index' ·
r#153 builtin_value_name -> 'instance_index' ·
r#154 builtin_value_name -> 'position' ·
r#155 builtin_value_name -> 'front_facing' ·
r#156 builtin_value_name -> 'frag_depth' ·
r#157 builtin_value_name -> 'local_invocation_id' ·
r#158 builtin_value_name -> 'local_invocation_index' ·
r#159 builtin_value_name -> 'global_invocation_id' ·
r#160 builtin_value_name -> 'workgroup_id' ·
r#161 builtin_value_name -> 'num_workgroups' ·
r#162 builtin_value_name -> 'sample_index' ·
r#163 builtin_value_name -> 'sample_mask' ·
r#164 interpolation_type_name -> 'perspective' ·
r#165 interpolation_type_name -> 'linear' ·
r#166 interpolation_type_name -> 'flat' ·
r#167 expression -> short_circuit_or_expression or_or relational_expression ·
r#168 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#169 expression -> short_circuit_and_expression and_and relational_expression ·
r#170 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#171 relational_expression -> shift_expression not_equal shift_expression ·
r#172 relational_expression -> shift_expression equal_equal shift_expression ·
r#173 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#174 relational_expression -> shift_expression less_than_equal shift_expression ·
r#175 relational_expression -> shift_expression greater_than shift_expression ·
r#176 relational_expression -> shift_expression less_than shift_expression ·
r#177 bitwise_expression -> binary_and_expression and unary_expression ·
r#178 binary_and_expression -> binary_and_expression and unary_expression ·
r#179 bitwise_expression -> binary_or_expression or unary_expression ·
r#180 binary_or_expression -> binary_or_expression or unary_expression ·
r#181 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#182 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#183 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#184 shift_expression -> unary_expression shift_right unary_expression ·
r#185 shift_expression -> unary_expression shift_left unary_expression ·
r#186 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#187 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#188 swizzle_name -> '/[rgba]/' ·
r#189 swizzle_name -> '/[rgba][rgba]/' ·
r#190 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#191 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#192 swizzle_name -> '/[xyzw]/' ·
r#193 swizzle_name -> '/[xyzw][xyzw]/' ·
r#194 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#195 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#196 type_decl -> ident ·
r#197 type_decl -> type_decl_without_ident ·
r#198 paren_expression -> paren_left expression paren_right ·
r#199 paren_right -> ')' ·
r#200 address_space -> 'function' ·
r#201 address_space -> 'private' ·
r#202 address_space -> 'workgroup' ·
r#203 address_space -> 'uniform' ·
r#204 address_space -> 'storage' ·
r#205 texel_format -> 'rgba8unorm' ·
r#206 texel_format -> 'rgba8snorm' ·
r#207 texel_format -> 'rgba8uint' ·
r#208 texel_format -> 'rgba8sint' ·
r#209 texel_format -> 'rgba16uint' ·
r#210 texel_format -> 'rgba16sint' ·
r#211 texel_format -> 'rgba16float' ·
r#212 texel_format -> 'r32uint' ·
r#213 texel_format -> 'r32sint' ·
r#214 texel_format -> 'r32float' ·
r#215 texel_format -> 'rg32uint' ·
r#216 texel_format -> 'rg32sint' ·
r#217 texel_format -> 'rg32float' ·
r#218 texel_format -> 'rgba32uint' ·
r#219 texel_format -> 'rgba32sint' ·
r#220 texel_format -> 'rgba32float' ·
r#221 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#222 statement -> semicolon ·
r#223 statement -> if_statement ·
r#224 statement -> switch_statement ·
r#225 statement -> loop_statement ·
r#226 statement -> for_statement ·
r#227 statement -> while_statement ·
r#228 statement -> compound_statement ·
r#229 variable_statement -> variable_decl ·
r#230 break_statement -> 'break' ·
r#231 continue_statement -> 'continue' ·
r#232 variable_updating_statement -> assignment_statement ·
r#233 variable_updating_statement -> increment_statement ·
r#234 variable_updating_statement -> decrement_statement ·
r#235 lhs_expression/0.0 -> lhs_expression/0.0/0 ·
r#236 lhs_expression/0.0/0/0.0 -> star ·
r#237 lhs_expression/0.0/0/0.0 -> and ·
r#238 type_alias_decl -> 'type' ident equal type_decl ·
r#239 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#240 colon -> ':' ·
r#241 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ·
r#242 global_variable_decl/0.2 -> equal expression ·
r#243 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#244 comma -> ',' ·
r#245 global_constant_decl/1.3 -> equal expression ·
r#246 optionally_typed_ident/0.1 -> colon type_decl ·
r#247 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#248 function_header/0.3 -> param_list ·
r#249 lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 ·
r#250 core_lhs_expression -> ident ·
r#251 increment_statement -> lhs_expression plus_plus ·
r#252 decrement_statement -> lhs_expression minus_minus ·
r#253 assignment_statement/0.1 -> equal ·
r#254 assignment_statement/0.1 -> compound_assignment_operator ·
r#255 plus_plus -> '++' ·
r#256 minus_minus -> '--' ·
r#257 compound_assignment_operator -> plus_equal ·
r#258 compound_assignment_operator -> minus_equal ·
r#259 compound_assignment_operator -> times_equal ·
r#260 compound_assignment_operator -> division_equal ·
r#261 compound_assignment_operator -> modulo_equal ·
r#262 compound_assignment_operator -> and_equal ·
r#263 compound_assignment_operator -> or_equal ·
r#264 compound_assignment_operator -> xor_equal ·
r#265 compound_assignment_operator -> shift_right_equal ·
r#266 compound_assignment_operator -> shift_left_equal ·
r#267 plus_equal -> '+=' ·
r#268 minus_equal -> '-=' ·
r#269 times_equal -> '*=' ·
r#270 division_equal -> '/=' ·
r#271 modulo_equal -> '%=' ·
r#272 and_equal -> '&=' ·
r#273 or_equal -> '|=' ·
r#274 xor_equal -> '^=' ·
r#275 shift_right_equal -> '>>=' ·
r#276 shift_left_equal -> '<<=' ·
r#277 func_call_statement -> ident argument_expression_list ·
r#278 if_statement/0.1 -> if_statement/0.1/0 ·
r#279 return_statement -> 'return' return_statement/0.1 ·
r#280 return_statement/0.1 -> expression ·
r#281 statement -> static_assert_statement semicolon ·
r#282 statement -> variable_updating_statement semicolon ·
r#283 statement -> 'discard' semicolon ·
r#284 statement -> continue_statement semicolon ·
r#285 statement -> break_statement semicolon ·
r#286 statement -> variable_statement semicolon ·
r#287 statement -> func_call_statement semicolon ·
r#288 statement -> return_statement semicolon ·
r#289 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#290 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#291 brace_right -> '}' ·
r#292 texture_and_sampler_types -> multisampled_texture_type less_than type_decl greater_than ·
r#293 texture_and_sampler_types -> sampled_texture_type less_than type_decl greater_than ·
r#294 argument_expression_list/0.1/0.1 -> argument_expression_list/0.1/0.1/0 ·
r#295 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#296 bracket_right -> ']' ·
r#297 postfix_expression -> period swizzle_name postfix_expression/2.2 ·
r#298 postfix_expression/2.2 -> postfix_expression ·
r#299 postfix_expression -> period member_ident postfix_expression/1.2 ·
r#300 postfix_expression/1.2 -> postfix_expression ·
r#301 attribute -> attr 'workgroup_size' paren_left expression attrib_end ·
r#302 attrib_end/0.0 -> comma ·
r#303 attribute -> attr 'size' paren_left expression attrib_end ·
r#304 attribute -> attr 'location' paren_left expression attrib_end ·
r#305 attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end ·
r#306 attribute -> attr 'id' paren_left expression attrib_end ·
r#307 attribute -> attr 'group' paren_left expression attrib_end ·
r#308 attribute -> attr 'builtin' paren_left builtin_value_name attrib_end ·
r#309 attribute -> attr 'binding' paren_left expression attrib_end ·
r#310 attribute -> attr 'align' paren_left expression attrib_end ·
r#311 interpolation_sample_name -> 'center' ·
r#312 interpolation_sample_name -> 'centroid' ·
r#313 interpolation_sample_name -> 'sample' ·
r#314 attrib_end -> attrib_end/0.0 paren_right ·
r#315 postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 ·
r#316 postfix_expression/0.3 -> postfix_expression ·
r#317 argument_expression_list/0.1/0.1/0/0.0 -> comma expression ·
r#318 argument_expression_list/0.1/0.1/0 -> argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 ·
r#319 argument_expression_list/0.1 -> expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 ·
r#320 argument_expression_list/0.1/0.2 -> comma ·
r#321 primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression ·
r#322 array_type_decl/0.3 -> comma element_count_expression ·
r#323 element_count_expression -> additive_expression ·
r#324 element_count_expression -> bitwise_expression ·
r#325 array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than ·
r#326 access_mode -> 'read' ·
r#327 access_mode -> 'write' ·
r#328 access_mode -> 'read_write' ·
r#329 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#330 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#331 if_statement/0.2 -> else_clause ·
r#332 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#333 for_header/0.0 -> for_init ·
r#334 for_init -> variable_statement ·
r#335 for_init -> variable_updating_statement ·
r#336 for_init -> func_call_statement ·
r#337 while_statement -> 'while' expression compound_statement ·
r#338 variable_statement -> variable_decl equal expression ·
r#339 if_clause -> 'if' expression compound_statement ·
r#340 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#341 lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 ·
r#342 lhs_expression/0.2 -> postfix_expression ·
r#343 param_list/0.1 -> param_list/0.1/0 ·
r#344 struct_body_decl/0.2/0/0.0 -> comma struct_member ·
r#345 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#346 struct_body_decl/0.3 -> comma ·
r#347 variable_qualifier/0.2 -> comma access_mode ·
r#348 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#349 struct_member -> struct_member/0.0 member_ident colon type_decl ·
r#350 struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right ·
r#351 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#352 arrow -> '->' ·
r#353 param_list/0.1/0/0.0 -> comma param ·
r#354 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#355 param_list -> param param_list/0.1 param_list/0.2 ·
r#356 param_list/0.2 -> comma ·
r#357 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#358 variable_statement -> 'const' optionally_typed_ident equal expression ·
r#359 variable_statement -> 'let' optionally_typed_ident equal expression ·
r#360 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#361 loop_statement/0.3 -> continuing_statement ·
r#362 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#363 switch_body -> case_clause ·
r#364 switch_body -> default_alone_clause ·
r#365 else_clause -> 'else' compound_statement ·
r#366 texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#367 attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end ·
r#368 attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end ·
r#369 type_decl_without_ident/7.5 -> comma access_mode ·
r#370 type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than ·
r#371 else_if_clause -> 'else' 'if' expression compound_statement ·
r#372 default_alone_clause/0.1 -> colon ·
r#373 case_selector -> 'default' ·
r#374 case_selector -> expression ·
r#375 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#376 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#377 continuing_statement -> 'continuing' continuing_compound_statement ·
r#378 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#379 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#380 for_header/0.2 -> expression ·
r#381 param -> param/0.0 ident colon type_decl ·
r#382 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#383 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#384 function_header/0.5 -> arrow function_header/0.5/0.1 type_decl ·
r#385 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#386 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#387 case_clause/0.2 -> colon ·
r#388 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#389 attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end ·
r#390 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#391 case_selectors/0.1/0/0.0 -> comma case_selector ·
r#392 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#393 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#394 case_selectors/0.2 -> comma ·
r#395 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#396 continuing_compound_statement/0.2 -> break_if_statement ·
r#397 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#398 for_header/0.4 -> for_update ·
r#399 for_update -> variable_updating_statement ·
r#400 for_update -> func_call_statement ·
r#401 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#402 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#19
[#2 '@']: s#31
[#2 'static_assert']: s#25
[#2 'struct']: s#23
[#2 'type']: s#22
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'static_assert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#19
[#7 ';']: r#1
[#8 ';']: r#2
[#8 '@']: r#2
[#8 'fn']: r#2
[#8 'override']: r#2
[#8 'static_assert']: r#2
[#8 'struct']: r#2
[#8 'type']: r#2
[#8 'var']: r#2
[#8 EndOfText]: r#2
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 ';']: s#19
[#11 '@']: s#31
[#11 'static_assert']: s#25
[#11 'struct']: s#23
[#11 'type']: s#22
[#12 ';']: r#5
[#12 '@']: r#5
[#12 'fn']: r#5
[#12 'override']: r#5
[#12 'static_assert']: r#5
[#12 'struct']: r#5
[#12 'type']: r#5
[#12 'var']: r#5
[#12 EndOfText]: r#5
[#13 ';']: s#19
[#14 ';']: s#19
[#15 ';']: s#19
[#16 ';']: r#6
[#16 '@']: r#6
[#16 'fn']: r#6
[#16 'override']: r#6
[#16 'static_assert']: r#6
[#16 'struct']: r#6
[#16 'type']: r#6
[#16 'var']: r#6
[#16 EndOfText]: r#6
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'static_assert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#19
[#19 '!']: r#8
[#19 '&']: r#8
[#19 '(']: r#8
[#19 ')']: r#8
[#19 '*']: r#8
[#19 '-']: r#8
[#19 ';']: r#8
[#19 '@']: r#8
[#19 'array']: r#8
[#19 'bitcast']: r#8
[#19 'bool']: r#8
[#19 'break']: r#8
[#19 'const']: r#8
[#19 'continue']: r#8
[#19 'continuing']: r#8
[#19 'discard']: r#8
[#19 'enable']: r#8
[#19 'f16']: r#8
[#19 'f32']: r#8
[#19 'false']: r#8
[#19 'fn']: r#8
[#19 'for']: r#8
[#19 'i32']: r#8
[#19 'if']: r#8
[#19 'let']: r#8
[#19 'loop']: r#8
[#19 'mat2x2']: r#8
[#19 'mat2x3']: r#8
[#19 'mat2x4']: r#8
[#19 'mat3x2']: r#8
[#19 'mat3x3']: r#8
[#19 'mat3x4']: r#8
[#19 'mat4x2']: r#8
[#19 'mat4x3']: r#8
[#19 'mat4x4']: r#8
[#19 'override']: r#8
[#19 'ptr']: r#8
[#19 'return']: r#8
[#19 'sampler']: r#8
[#19 'sampler_comparison']: r#8
[#19 'static_assert']: r#8
[#19 'struct']: r#8
[#19 'switch']: r#8
[#19 'texture_1d']: r#8
[#19 'texture_2d']: r#8
[#19 'texture_2d_array']: r#8
[#19 'texture_3d']: r#8
[#19 'texture_cube']: r#8
[#19 'texture_cube_array']: r#8
[#19 'texture_depth_2d']: r#8
[#19 'texture_depth_2d_array']: r#8
[#19 'texture_depth_cube']: r#8
[#19 'texture_depth_cube_array']: r#8
[#19 'texture_depth_multisampled_2d']: r#8
[#19 'texture_multisampled_2d']: r#8
[#19 'texture_storage_1d']: r#8
[#19 'texture_storage_2d']: r#8
[#19 'texture_storage_2d_array']: r#8
[#19 'texture_storage_3d']: r#8
[#19 'true']: r#8
[#19 'type']: r#8
[#19 'u32']: r#8
[#19 'var']: r#8
[#19 'vec2']: r#8
[#19 'vec3']: r#8
[#19 'vec4']: r#8
[#19 'while']: r#8
[#19 '{']: r#8
[#19 '}']: r#8
[#19 '~']: r#8
[#19 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#8
[#19 EndOfText]: r#8
[#20 'var']: s#157
[#21 'override']: s#155
[#22 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#24 'fn']: s#152
[#25 '!']: s#69
[#25 '&']: s#72
[#25 '(']: s#114
[#25 '*']: s#71
[#25 '-']: s#68
[#25 'array']: s#82
[#25 'bitcast']: s#77
[#25 'bool']: s#87
[#25 'f16']: s#116
[#25 'f32']: s#115
[#25 'false']: s#113
[#25 'i32']: s#117
[#25 'mat2x2']: s#98
[#25 'mat2x3']: s#99
[#25 'mat2x4']: s#100
[#25 'mat3x2']: s#101
[#25 'mat3x3']: s#102
[#25 'mat3x4']: s#103
[#25 'mat4x2']: s#104
[#25 'mat4x3']: s#105
[#25 'mat4x4']: s#106
[#25 'ptr']: s#119
[#25 'sampler']: s#133
[#25 'sampler_comparison']: s#134
[#25 'texture_1d']: s#140
[#25 'texture_2d']: s#141
[#25 'texture_2d_array']: s#142
[#25 'texture_3d']: s#143
[#25 'texture_cube']: s#144
[#25 'texture_cube_array']: s#145
[#25 'texture_depth_2d']: s#135
[#25 'texture_depth_2d_array']: s#136
[#25 'texture_depth_cube']: s#137
[#25 'texture_depth_cube_array']: s#138
[#25 'texture_depth_multisampled_2d']: s#139
[#25 'texture_multisampled_2d']: s#146
[#25 'texture_storage_1d']: s#147
[#25 'texture_storage_2d']: s#148
[#25 'texture_storage_2d_array']: s#149
[#25 'texture_storage_3d']: s#150
[#25 'true']: s#112
[#25 'u32']: s#118
[#25 'vec2']: s#95
[#25 'vec3']: s#96
[#25 'vec4']: s#97
[#25 '~']: s#70
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#25 /0[fh]/]: s#128
[#25 /0[iu]?/]: s#108
[#25 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#25 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#25 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#25 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#25 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#25 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#25 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#25 /[1-9][0-9]*[fh]/]: s#129
[#25 /[1-9][0-9]*[iu]?/]: s#109
[#26 'var']: r#9
[#27 'override']: r#10
[#28 'fn']: r#11
[#29 '@']: s#31
[#30 'align']: s#32
[#30 'binding']: s#33
[#30 'builtin']: s#34
[#30 'compute']: s#45
[#30 'const']: s#35
[#30 'fragment']: s#44
[#30 'group']: s#36
[#30 'id']: s#37
[#30 'interpolate']: s#38
[#30 'invariant']: s#39
[#30 'location']: s#40
[#30 'size']: s#41
[#30 'vertex']: s#43
[#30 'workgroup_size']: s#42
[#31 'const']: r#12
[#32 '(']: s#114
[#33 '(']: s#114
[#34 '(']: s#114
[#35 '@']: r#13
[#35 'array']: r#13
[#35 'bool']: r#13
[#35 'f16']: r#13
[#35 'f32']: r#13
[#35 'fn']: r#13
[#35 'i32']: r#13
[#35 'override']: r#13
[#35 'ptr']: r#13
[#35 'sampler']: r#13
[#35 'sampler_comparison']: r#13
[#35 'texture_1d']: r#13
[#35 'texture_2d']: r#13
[#35 'texture_2d_array']: r#13
[#35 'texture_3d']: r#13
[#35 'texture_cube']: r#13
[#35 'texture_cube_array']: r#13
[#35 'texture_depth_2d']: r#13
[#35 'texture_depth_2d_array']: r#13
[#35 'texture_depth_cube']: r#13
[#35 'texture_depth_cube_array']: r#13
[#35 'texture_depth_multisampled_2d']: r#13
[#35 'texture_multisampled_2d']: r#13
[#35 'texture_storage_1d']: r#13
[#35 'texture_storage_2d']: r#13
[#35 'texture_storage_2d_array']: r#13
[#35 'texture_storage_3d']: r#13
[#35 'u32']: r#13
[#35 'var']: r#13
[#36 '(']: s#114
[#37 '(']: s#114
[#38 '(']: s#114
[#39 '@']: r#14
[#39 'array']: r#14
[#39 'bool']: r#14
[#39 'f16']: r#14
[#39 'f32']: r#14
[#39 'fn']: r#14
[#39 'i32']: r#14
[#39 'override']: r#14
[#39 'ptr']: r#14
[#39 'sampler']: r#14
[#39 'sampler_comparison']: r#14
[#39 'texture_1d']: r#14
[#39 'texture_2d']: r#14
[#39 'texture_2d_array']: r#14
[#39 'texture_3d']: r#14
[#39 'texture_cube']: r#14
[#39 'texture_cube_array']: r#14
[#39 'texture_depth_2d']: r#14
[#39 'texture_depth_2d_array']: r#14
[#39 'texture_depth_cube']: r#14
[#39 'texture_depth_cube_array']: r#14
[#39 'texture_depth_multisampled_2d']: r#14
[#39 'texture_multisampled_2d']: r#14
[#39 'texture_storage_1d']: r#14
[#39 'texture_storage_2d']: r#14
[#39 'texture_storage_2d_array']: r#14
[#39 'texture_storage_3d']: r#14
[#39 'u32']: r#14
[#39 'var']: r#14
[#40 '(']: s#114
[#41 '(']: s#114
[#42 '(']: s#114
[#43 '@']: r#15
[#43 'array']: r#15
[#43 'bool']: r#15
[#43 'f16']: r#15
[#43 'f32']: r#15
[#43 'fn']: r#15
[#43 'i32']: r#15
[#43 'override']: r#15
[#43 'ptr']: r#15
[#43 'sampler']: r#15
[#43 'sampler_comparison']: r#15
[#43 'texture_1d']: r#15
[#43 'texture_2d']: r#15
[#43 'texture_2d_array']: r#15
[#43 'texture_3d']: r#15
[#43 'texture_cube']: r#15
[#43 'texture_cube_array']: r#15
[#43 'texture_depth_2d']: r#15
[#43 'texture_depth_2d_array']: r#15
[#43 'texture_depth_cube']: r#15
[#43 'texture_depth_cube_array']: r#15
[#43 'texture_depth_multisampled_2d']: r#15
[#43 'texture_multisampled_2d']: r#15
[#43 'texture_storage_1d']: r#15
[#43 'texture_storage_2d']: r#15
[#43 'texture_storage_2d_array']: r#15
[#43 'texture_storage_3d']: r#15
[#43 'u32']: r#15
[#43 'var']: r#15
[#44 '@']: r#16
[#44 'array']: r#16
[#44 'bool']: r#16
[#44 'f16']: r#16
[#44 'f32']: r#16
[#44 'fn']: r#16
[#44 'i32']: r#16
[#44 'override']: r#16
[#44 'ptr']: r#16
[#44 'sampler']: r#16
[#44 'sampler_comparison']: r#16
[#44 'texture_1d']: r#16
[#44 'texture_2d']: r#16
[#44 'texture_2d_array']: r#16
[#44 'texture_3d']: r#16
[#44 'texture_cube']: r#16
[#44 'texture_cube_array']: r#16
[#44 'texture_depth_2d']: r#16
[#44 'texture_depth_2d_array']: r#16
[#44 'texture_depth_cube']: r#16
[#44 'texture_depth_cube_array']: r#16
[#44 'texture_depth_multisampled_2d']: r#16
[#44 'texture_multisampled_2d']: r#16
[#44 'texture_storage_1d']: r#16
[#44 'texture_storage_2d']: r#16
[#44 'texture_storage_2d_array']: r#16
[#44 'texture_storage_3d']: r#16
[#44 'u32']: r#16
[#44 'var']: r#16
[#45 '@']: r#17
[#45 'array']: r#17
[#45 'bool']: r#17
[#45 'f16']: r#17
[#45 'f32']: r#17
[#45 'fn']: r#17
[#45 'i32']: r#17
[#45 'override']: r#17
[#45 'ptr']: r#17
[#45 'sampler']: r#17
[#45 'sampler_comparison']: r#17
[#45 'texture_1d']: r#17
[#45 'texture_2d']: r#17
[#45 'texture_2d_array']: r#17
[#45 'texture_3d']: r#17
[#45 'texture_cube']: r#17
[#45 'texture_cube_array']: r#17
[#45 'texture_depth_2d']: r#17
[#45 'texture_depth_2d_array']: r#17
[#45 'texture_depth_cube']: r#17
[#45 'texture_depth_cube_array']: r#17
[#45 'texture_depth_multisampled_2d']: r#17
[#45 'texture_multisampled_2d']: r#17
[#45 'texture_storage_1d']: r#17
[#45 'texture_storage_2d']: r#17
[#45 'texture_storage_2d_array']: r#17
[#45 'texture_storage_3d']: r#17
[#45 'u32']: r#17
[#45 'var']: r#17
[#46 'var']: r#18
[#47 'override']: r#19
[#48 'fn']: r#20
[#49 ';']: r#21
[#50 '&&']: r#24
[#50 ')']: r#22
[#50 ',']: r#22
[#50 ':']: r#22
[#50 ';']: r#22
[#50 ']']: r#22
[#50 '{']: r#22
[#50 '||']: r#23
[#51 '||']: s#233
[#52 '&&']: s#231
[#53 ')']: r#25
[#53 ',']: r#25
[#53 ':']: r#25
[#53 ';']: r#25
[#53 ']']: r#25
[#53 '{']: r#25
[#54 '!=']: s#229
[#54 '&&']: r#26
[#54 ')']: r#26
[#54 ',']: r#26
[#54 ':']: r#26
[#54 ';']: r#26
[#54 '<']: s#167
[#54 '<=']: s#226
[#54 '==']: s#228
[#54 '>']: s#225
[#54 '>=']: s#227
[#54 ']']: r#26
[#54 '{']: r#26
[#54 '||']: r#26
[#55 '&']: s#72
[#56 '|']: s#217
[#57 '^']: s#215
[#58 '!=']: r#27
[#58 '&&']: r#27
[#58 ')']: r#27
[#58 '+']: s#213
[#58 ',']: r#27
[#58 '-']: s#68
[#58 ':']: r#27
[#58 ';']: r#27
[#58 '<']: r#27
[#58 '<=']: r#27
[#58 '==']: r#27
[#58 '>']: r#27
[#58 '>=']: r#27
[#58 ']']: r#27
[#58 '{']: r#27
[#58 '||']: r#27
[#59 '!=']: r#31
[#59 '%']: r#31
[#59 '&&']: r#31
[#59 '&']: r#28
[#59 ')']: r#31
[#59 '*']: r#31
[#59 '+']: r#31
[#59 ',']: r#31
[#59 '-']: r#31
[#59 '/']: r#31
[#59 ':']: r#31
[#59 ';']: r#31
[#59 '<']: r#31
[#59 '<<']: s#208
[#59 '<=']: r#31
[#59 '==']: r#31
[#59 '>']: r#31
[#59 '>=']: r#31
[#59 '>>']: s#209
[#59 ']']: r#31
[#59 '^']: r#30
[#59 '{']: r#31
[#59 '|']: r#29
[#59 '||']: r#31
[#60 '!=']: r#32
[#60 '%']: s#205
[#60 '&&']: r#32
[#60 ')']: r#32
[#60 '*']: s#71
[#60 '+']: r#32
[#60 ',']: r#32
[#60 '-']: r#32
[#60 '/']: s#204
[#60 ':']: r#32
[#60 ';']: r#32
[#60 '<']: r#32
[#60 '<=']: r#32
[#60 '==']: r#32
[#60 '>']: r#32
[#60 '>=']: r#32
[#60 ']']: r#32
[#60 '{']: r#32
[#60 '||']: r#32
[#61 '!=']: r#33
[#61 '%']: r#33
[#61 '&&']: r#33
[#61 '&']: r#33
[#61 ')']: r#33
[#61 '*']: r#33
[#61 '+']: r#33
[#61 ',']: r#33
[#61 '-']: r#33
[#61 '/']: r#33
[#61 ':']: r#33
[#61 ';']: r#33
[#61 '<']: r#33
[#61 '<<']: r#33
[#61 '<=']: r#33
[#61 '==']: r#33
[#61 '>']: r#33
[#61 '>=']: r#33
[#61 '>>']: r#33
[#61 ']']: r#33
[#61 '^']: r#33
[#61 '{']: r#33
[#61 '|']: r#33
[#61 '||']: r#33
[#62 '!']: s#69
[#62 '&']: s#72
[#62 '(']: s#114
[#62 '*']: s#71
[#62 '-']: s#68
[#62 'array']: s#82
[#62 'bitcast']: s#77
[#62 'bool']: s#87
[#62 'f16']: s#116
[#62 'f32']: s#115
[#62 'false']: s#113
[#62 'i32']: s#117
[#62 'mat2x2']: s#98
[#62 'mat2x3']: s#99
[#62 'mat2x4']: s#100
[#62 'mat3x2']: s#101
[#62 'mat3x3']: s#102
[#62 'mat3x4']: s#103
[#62 'mat4x2']: s#104
[#62 'mat4x3']: s#105
[#62 'mat4x4']: s#106
[#62 'ptr']: s#119
[#62 'sampler']: s#133
[#62 'sampler_comparison']: s#134
[#62 'texture_1d']: s#140
[#62 'texture_2d']: s#141
[#62 'texture_2d_array']: s#142
[#62 'texture_3d']: s#143
[#62 'texture_cube']: s#144
[#62 'texture_cube_array']: s#145
[#62 'texture_depth_2d']: s#135
[#62 'texture_depth_2d_array']: s#136
[#62 'texture_depth_cube']: s#137
[#62 'texture_depth_cube_array']: s#138
[#62 'texture_depth_multisampled_2d']: s#139
[#62 'texture_multisampled_2d']: s#146
[#62 'texture_storage_1d']: s#147
[#62 'texture_storage_2d']: s#148
[#62 'texture_storage_2d_array']: s#149
[#62 'texture_storage_3d']: s#150
[#62 'true']: s#112
[#62 'u32']: s#118
[#62 'vec2']: s#95
[#62 'vec3']: s#96
[#62 'vec4']: s#97
[#62 '~']: s#70
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#62 /0[fh]/]: s#128
[#62 /0[iu]?/]: s#108
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#62 /[1-9][0-9]*[fh]/]: s#129
[#62 /[1-9][0-9]*[iu]?/]: s#109
[#63 '!']: s#69
[#63 '&']: s#72
[#63 '(']: s#114
[#63 '*']: s#71
[#63 '-']: s#68
[#63 'array']: s#82
[#63 'bitcast']: s#77
[#63 'bool']: s#87
[#63 'f16']: s#116
[#63 'f32']: s#115
[#63 'false']: s#113
[#63 'i32']: s#117
[#63 'mat2x2']: s#98
[#63 'mat2x3']: s#99
[#63 'mat2x4']: s#100
[#63 'mat3x2']: s#101
[#63 'mat3x3']: s#102
[#63 'mat3x4']: s#103
[#63 'mat4x2']: s#104
[#63 'mat4x3']: s#105
[#63 'mat4x4']: s#106
[#63 'ptr']: s#119
[#63 'sampler']: s#133
[#63 'sampler_comparison']: s#134
[#63 'texture_1d']: s#140
[#63 'texture_2d']: s#141
[#63 'texture_2d_array']: s#142
[#63 'texture_3d']: s#143
[#63 'texture_cube']: s#144
[#63 'texture_cube_array']: s#145
[#63 'texture_depth_2d']: s#135
[#63 'texture_depth_2d_array']: s#136
[#63 'texture_depth_cube']: s#137
[#63 'texture_depth_cube_array']: s#138
[#63 'texture_depth_multisampled_2d']: s#139
[#63 'texture_multisampled_2d']: s#146
[#63 'texture_storage_1d']: s#147
[#63 'texture_storage_2d']: s#148
[#63 'texture_storage_2d_array']: s#149
[#63 'texture_storage_3d']: s#150
[#63 'true']: s#112
[#63 'u32']: s#118
[#63 'vec2']: s#95
[#63 'vec3']: s#96
[#63 'vec4']: s#97
[#63 '~']: s#70
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#63 /0[fh]/]: s#128
[#63 /0[iu]?/]: s#108
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#63 /[1-9][0-9]*[fh]/]: s#129
[#63 /[1-9][0-9]*[iu]?/]: s#109
[#64 '!']: s#69
[#64 '&']: s#72
[#64 '(']: s#114
[#64 '*']: s#71
[#64 '-']: s#68
[#64 'array']: s#82
[#64 'bitcast']: s#77
[#64 'bool']: s#87
[#64 'f16']: s#116
[#64 'f32']: s#115
[#64 'false']: s#113
[#64 'i32']: s#117
[#64 'mat2x2']: s#98
[#64 'mat2x3']: s#99
[#64 'mat2x4']: s#100
[#64 'mat3x2']: s#101
[#64 'mat3x3']: s#102
[#64 'mat3x4']: s#103
[#64 'mat4x2']: s#104
[#64 'mat4x3']: s#105
[#64 'mat4x4']: s#106
[#64 'ptr']: s#119
[#64 'sampler']: s#133
[#64 'sampler_comparison']: s#134
[#64 'texture_1d']: s#140
[#64 'texture_2d']: s#141
[#64 'texture_2d_array']: s#142
[#64 'texture_3d']: s#143
[#64 'texture_cube']: s#144
[#64 'texture_cube_array']: s#145
[#64 'texture_depth_2d']: s#135
[#64 'texture_depth_2d_array']: s#136
[#64 'texture_depth_cube']: s#137
[#64 'texture_depth_cube_array']: s#138
[#64 'texture_depth_multisampled_2d']: s#139
[#64 'texture_multisampled_2d']: s#146
[#64 'texture_storage_1d']: s#147
[#64 'texture_storage_2d']: s#148
[#64 'texture_storage_2d_array']: s#149
[#64 'texture_storage_3d']: s#150
[#64 'true']: s#112
[#64 'u32']: s#118
[#64 'vec2']: s#95
[#64 'vec3']: s#96
[#64 'vec4']: s#97
[#64 '~']: s#70
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#64 /0[fh]/]: s#128
[#64 /0[iu]?/]: s#108
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#64 /[1-9][0-9]*[fh]/]: s#129
[#64 /[1-9][0-9]*[iu]?/]: s#109
[#65 '!']: s#69
[#65 '&']: s#72
[#65 '(']: s#114
[#65 '*']: s#71
[#65 '-']: s#68
[#65 'array']: s#82
[#65 'bitcast']: s#77
[#65 'bool']: s#87
[#65 'f16']: s#116
[#65 'f32']: s#115
[#65 'false']: s#113
[#65 'i32']: s#117
[#65 'mat2x2']: s#98
[#65 'mat2x3']: s#99
[#65 'mat2x4']: s#100
[#65 'mat3x2']: s#101
[#65 'mat3x3']: s#102
[#65 'mat3x4']: s#103
[#65 'mat4x2']: s#104
[#65 'mat4x3']: s#105
[#65 'mat4x4']: s#106
[#65 'ptr']: s#119
[#65 'sampler']: s#133
[#65 'sampler_comparison']: s#134
[#65 'texture_1d']: s#140
[#65 'texture_2d']: s#141
[#65 'texture_2d_array']: s#142
[#65 'texture_3d']: s#143
[#65 'texture_cube']: s#144
[#65 'texture_cube_array']: s#145
[#65 'texture_depth_2d']: s#135
[#65 'texture_depth_2d_array']: s#136
[#65 'texture_depth_cube']: s#137
[#65 'texture_depth_cube_array']: s#138
[#65 'texture_depth_multisampled_2d']: s#139
[#65 'texture_multisampled_2d']: s#146
[#65 'texture_storage_1d']: s#147
[#65 'texture_storage_2d']: s#148
[#65 'texture_storage_2d_array']: s#149
[#65 'texture_storage_3d']: s#150
[#65 'true']: s#112
[#65 'u32']: s#118
[#65 'vec2']: s#95
[#65 'vec3']: s#96
[#65 'vec4']: s#97
[#65 '~']: s#70
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#65 /0[fh]/]: s#128
[#65 /0[iu]?/]: s#108
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#65 /[1-9][0-9]*[fh]/]: s#129
[#65 /[1-9][0-9]*[iu]?/]: s#109
[#66 '!']: s#69
[#66 '&']: s#72
[#66 '(']: s#114
[#66 '*']: s#71
[#66 '-']: s#68
[#66 'array']: s#82
[#66 'bitcast']: s#77
[#66 'bool']: s#87
[#66 'f16']: s#116
[#66 'f32']: s#115
[#66 'false']: s#113
[#66 'i32']: s#117
[#66 'mat2x2']: s#98
[#66 'mat2x3']: s#99
[#66 'mat2x4']: s#100
[#66 'mat3x2']: s#101
[#66 'mat3x3']: s#102
[#66 'mat3x4']: s#103
[#66 'mat4x2']: s#104
[#66 'mat4x3']: s#105
[#66 'mat4x4']: s#106
[#66 'ptr']: s#119
[#66 'sampler']: s#133
[#66 'sampler_comparison']: s#134
[#66 'texture_1d']: s#140
[#66 'texture_2d']: s#141
[#66 'texture_2d_array']: s#142
[#66 'texture_3d']: s#143
[#66 'texture_cube']: s#144
[#66 'texture_cube_array']: s#145
[#66 'texture_depth_2d']: s#135
[#66 'texture_depth_2d_array']: s#136
[#66 'texture_depth_cube']: s#137
[#66 'texture_depth_cube_array']: s#138
[#66 'texture_depth_multisampled_2d']: s#139
[#66 'texture_multisampled_2d']: s#146
[#66 'texture_storage_1d']: s#147
[#66 'texture_storage_2d']: s#148
[#66 'texture_storage_2d_array']: s#149
[#66 'texture_storage_3d']: s#150
[#66 'true']: s#112
[#66 'u32']: s#118
[#66 'vec2']: s#95
[#66 'vec3']: s#96
[#66 'vec4']: s#97
[#66 '~']: s#70
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#66 /0[fh]/]: s#128
[#66 /0[iu]?/]: s#108
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#66 /[1-9][0-9]*[fh]/]: s#129
[#66 /[1-9][0-9]*[iu]?/]: s#109
[#67 '.']: s#194
[#67 '[']: s#193
[#68 '!']: r#34
[#68 '&']: r#34
[#68 '(']: r#34
[#68 '*']: r#34
[#68 '-']: r#34
[#68 'array']: r#34
[#68 'bitcast']: r#34
[#68 'bool']: r#34
[#68 'f16']: r#34
[#68 'f32']: r#34
[#68 'false']: r#34
[#68 'i32']: r#34
[#68 'mat2x2']: r#34
[#68 'mat2x3']: r#34
[#68 'mat2x4']: r#34
[#68 'mat3x2']: r#34
[#68 'mat3x3']: r#34
[#68 'mat3x4']: r#34
[#68 'mat4x2']: r#34
[#68 'mat4x3']: r#34
[#68 'mat4x4']: r#34
[#68 'ptr']: r#34
[#68 'sampler']: r#34
[#68 'sampler_comparison']: r#34
[#68 'texture_1d']: r#34
[#68 'texture_2d']: r#34
[#68 'texture_2d_array']: r#34
[#68 'texture_3d']: r#34
[#68 'texture_cube']: r#34
[#68 'texture_cube_array']: r#34
[#68 'texture_depth_2d']: r#34
[#68 'texture_depth_2d_array']: r#34
[#68 'texture_depth_cube']: r#34
[#68 'texture_depth_cube_array']: r#34
[#68 'texture_depth_multisampled_2d']: r#34
[#68 'texture_multisampled_2d']: r#34
[#68 'texture_storage_1d']: r#34
[#68 'texture_storage_2d']: r#34
[#68 'texture_storage_2d_array']: r#34
[#68 'texture_storage_3d']: r#34
[#68 'true']: r#34
[#68 'u32']: r#34
[#68 'vec2']: r#34
[#68 'vec3']: r#34
[#68 'vec4']: r#34
[#68 '~']: r#34
[#69 '!']: r#35
[#69 '&']: r#35
[#69 '(']: r#35
[#69 '*']: r#35
[#69 '-']: r#35
[#69 'array']: r#35
[#69 'bitcast']: r#35
[#69 'bool']: r#35
[#69 'f16']: r#35
[#69 'f32']: r#35
[#69 'false']: r#35
[#69 'i32']: r#35
[#69 'mat2x2']: r#35
[#69 'mat2x3']: r#35
[#69 'mat2x4']: r#35
[#69 'mat3x2']: r#35
[#69 'mat3x3']: r#35
[#69 'mat3x4']: r#35
[#69 'mat4x2']: r#35
[#69 'mat4x3']: r#35
[#69 'mat4x4']: r#35
[#69 'ptr']: r#35
[#69 'sampler']: r#35
[#69 'sampler_comparison']: r#35
[#69 'texture_1d']: r#35
[#69 'texture_2d']: r#35
[#69 'texture_2d_array']: r#35
[#69 'texture_3d']: r#35
[#69 'texture_cube']: r#35
[#69 'texture_cube_array']: r#35
[#69 'texture_depth_2d']: r#35
[#69 'texture_depth_2d_array']: r#35
[#69 'texture_depth_cube']: r#35
[#69 'texture_depth_cube_array']: r#35
[#69 'texture_depth_multisampled_2d']: r#35
[#69 'texture_multisampled_2d']: r#35
[#69 'texture_storage_1d']: r#35
[#69 'texture_storage_2d']: r#35
[#69 'texture_storage_2d_array']: r#35
[#69 'texture_storage_3d']: r#35
[#69 'true']: r#35
[#69 'u32']: r#35
[#69 'vec2']: r#35
[#69 'vec3']: r#35
[#69 'vec4']: r#35
[#69 '~']: r#35
[#70 '!']: r#36
[#70 '&']: r#36
[#70 '(']: r#36
[#70 '*']: r#36
[#70 '-']: r#36
[#70 'array']: r#36
[#70 'bitcast']: r#36
[#70 'bool']: r#36
[#70 'f16']: r#36
[#70 'f32']: r#36
[#70 'false']: r#36
[#70 'i32']: r#36
[#70 'mat2x2']: r#36
[#70 'mat2x3']: r#36
[#70 'mat2x4']: r#36
[#70 'mat3x2']: r#36
[#70 'mat3x3']: r#36
[#70 'mat3x4']: r#36
[#70 'mat4x2']: r#36
[#70 'mat4x3']: r#36
[#70 'mat4x4']: r#36
[#70 'ptr']: r#36
[#70 'sampler']: r#36
[#70 'sampler_comparison']: r#36
[#70 'texture_1d']: r#36
[#70 'texture_2d']: r#36
[#70 'texture_2d_array']: r#36
[#70 'texture_3d']: r#36
[#70 'texture_cube']: r#36
[#70 'texture_cube_array']: r#36
[#70 'texture_depth_2d']: r#36
[#70 'texture_depth_2d_array']: r#36
[#70 'texture_depth_cube']: r#36
[#70 'texture_depth_cube_array']: r#36
[#70 'texture_depth_multisampled_2d']: r#36
[#70 'texture_multisampled_2d']: r#36
[#70 'texture_storage_1d']: r#36
[#70 'texture_storage_2d']: r#36
[#70 'texture_storage_2d_array']: r#36
[#70 'texture_storage_3d']: r#36
[#70 'true']: r#36
[#70 'u32']: r#36
[#70 'vec2']: r#36
[#70 'vec3']: r#36
[#70 'vec4']: r#36
[#70 '~']: r#36
[#71 '!']: r#37
[#71 '&']: r#37
[#71 '(']: r#37
[#71 '*']: r#37
[#71 '-']: r#37
[#71 'array']: r#37
[#71 'bitcast']: r#37
[#71 'bool']: r#37
[#71 'f16']: r#37
[#71 'f32']: r#37
[#71 'false']: r#37
[#71 'i32']: r#37
[#71 'mat2x2']: r#37
[#71 'mat2x3']: r#37
[#71 'mat2x4']: r#37
[#71 'mat3x2']: r#37
[#71 'mat3x3']: r#37
[#71 'mat3x4']: r#37
[#71 'mat4x2']: r#37
[#71 'mat4x3']: r#37
[#71 'mat4x4']: r#37
[#71 'ptr']: r#37
[#71 'sampler']: r#37
[#71 'sampler_comparison']: r#37
[#71 'texture_1d']: r#37
[#71 'texture_2d']: r#37
[#71 'texture_2d_array']: r#37
[#71 'texture_3d']: r#37
[#71 'texture_cube']: r#37
[#71 'texture_cube_array']: r#37
[#71 'texture_depth_2d']: r#37
[#71 'texture_depth_2d_array']: r#37
[#71 'texture_depth_cube']: r#37
[#71 'texture_depth_cube_array']: r#37
[#71 'texture_depth_multisampled_2d']: r#37
[#71 'texture_multisampled_2d']: r#37
[#71 'texture_storage_1d']: r#37
[#71 'texture_storage_2d']: r#37
[#71 'texture_storage_2d_array']: r#37
[#71 'texture_storage_3d']: r#37
[#71 'true']: r#37
[#71 'u32']: r#37
[#71 'vec2']: r#37
[#71 'vec3']: r#37
[#71 'vec4']: r#37
[#71 '~']: r#37
[#72 '!']: r#38
[#72 '&']: r#38
[#72 '(']: r#38
[#72 '*']: r#38
[#72 '-']: r#38
[#72 'array']: r#38
[#72 'bitcast']: r#38
[#72 'bool']: r#38
[#72 'f16']: r#38
[#72 'f32']: r#38
[#72 'false']: r#38
[#72 'i32']: r#38
[#72 'mat2x2']: r#38
[#72 'mat2x3']: r#38
[#72 'mat2x4']: r#38
[#72 'mat3x2']: r#38
[#72 'mat3x3']: r#38
[#72 'mat3x4']: r#38
[#72 'mat4x2']: r#38
[#72 'mat4x3']: r#38
[#72 'mat4x4']: r#38
[#72 'ptr']: r#38
[#72 'sampler']: r#38
[#72 'sampler_comparison']: r#38
[#72 'texture_1d']: r#38
[#72 'texture_2d']: r#38
[#72 'texture_2d_array']: r#38
[#72 'texture_3d']: r#38
[#72 'texture_cube']: r#38
[#72 'texture_cube_array']: r#38
[#72 'texture_depth_2d']: r#38
[#72 'texture_depth_2d_array']: r#38
[#72 'texture_depth_cube']: r#38
[#72 'texture_depth_cube_array']: r#38
[#72 'texture_depth_multisampled_2d']: r#38
[#72 'texture_multisampled_2d']: r#38
[#72 'texture_storage_1d']: r#38
[#72 'texture_storage_2d']: r#38
[#72 'texture_storage_2d_array']: r#38
[#72 'texture_storage_3d']: r#38
[#72 'true']: r#38
[#72 'u32']: r#38
[#72 'vec2']: r#38
[#72 'vec3']: r#38
[#72 'vec4']: r#38
[#72 '~']: r#38
[#73 '!=']: r#39
[#73 '%']: r#39
[#73 '&&']: r#39
[#73 '&']: r#39
[#73 '(']: r#40
[#73 ')']: r#39
[#73 '*']: r#39
[#73 '+']: r#39
[#73 ',']: r#39
[#73 '-']: r#39
[#73 '.']: r#39
[#73 '/']: r#39
[#73 ':']: r#39
[#73 ';']: r#39
[#73 '<']: r#39
[#73 '<<']: r#39
[#73 '<=']: r#39
[#73 '==']: r#39
[#73 '>']: r#39
[#73 '>=']: r#39
[#73 '>>']: r#39
[#73 '[']: r#39
[#73 ']']: r#39
[#73 '^']: r#39
[#73 '{']: r#39
[#73 '|']: r#39
[#73 '||']: r#39
[#74 '(']: s#114
[#75 '!=']: r#41
[#75 '%']: r#41
[#75 '&&']: r#41
[#75 '&']: r#41
[#75 ')']: r#41
[#75 '*']: r#41
[#75 '+']: r#41
[#75 ',']: r#41
[#75 '-']: r#41
[#75 '.']: r#41
[#75 '/']: r#41
[#75 ':']: r#41
[#75 ';']: r#41
[#75 '<']: r#41
[#75 '<<']: r#41
[#75 '<=']: r#41
[#75 '==']: r#41
[#75 '>']: r#41
[#75 '>=']: r#41
[#75 '>>']: r#41
[#75 '[']: r#41
[#75 ']']: r#41
[#75 '^']: r#41
[#75 '{']: r#41
[#75 '|']: r#41
[#75 '||']: r#41
[#76 '!=']: r#42
[#76 '%']: r#42
[#76 '&&']: r#42
[#76 '&']: r#42
[#76 ')']: r#42
[#76 '*']: r#42
[#76 '+']: r#42
[#76 ',']: r#42
[#76 '-']: r#42
[#76 '.']: r#42
[#76 '/']: r#42
[#76 ':']: r#42
[#76 ';']: r#42
[#76 '<']: r#42
[#76 '<<']: r#42
[#76 '<=']: r#42
[#76 '==']: r#42
[#76 '>']: r#42
[#76 '>=']: r#42
[#76 '>>']: r#42
[#76 '[']: r#42
[#76 ']']: r#42
[#76 '^']: r#42
[#76 '{']: r#42
[#76 '|']: r#42
[#76 '||']: r#42
[#77 '<']: s#167
[#78 '!=']: r#43
[#78 '%']: r#43
[#78 '%=']: r#43
[#78 '&&']: r#43
[#78 '&']: r#43
[#78 '&=']: r#43
[#78 '(']: r#43
[#78 ')']: r#43
[#78 '*']: r#43
[#78 '*=']: r#43
[#78 '+']: r#43
[#78 '++']: r#43
[#78 '+=']: r#43
[#78 ',']: r#43
[#78 '-']: r#43
[#78 '--']: r#43
[#78 '-=']: r#43
[#78 '.']: r#43
[#78 '/']: r#43
[#78 '/=']: r#43
[#78 ':']: r#43
[#78 ';']: r#43
[#78 '<']: r#43
[#78 '<<']: r#43
[#78 '<<=']: r#43
[#78 '<=']: r#43
[#78 '=']: r#43
[#78 '==']: r#43
[#78 '>']: r#43
[#78 '>=']: r#43
[#78 '>>']: r#43
[#78 '>>=']: r#43
[#78 '[']: r#43
[#78 ']']: r#43
[#78 '^']: r#43
[#78 '^=']: r#43
[#78 '{']: r#43
[#78 '|']: r#43
[#78 '|=']: r#43
[#78 '||']: r#43
[#78 '}']: r#43
[#79 '(']: r#44
[#80 '(']: r#45
[#81 '(']: r#46
[#82 '(']: r#47
[#82 '<']: s#167
[#83 '!=']: r#48
[#83 '%']: r#48
[#83 '&&']: r#48
[#83 '&']: r#48
[#83 ')']: r#48
[#83 '*']: r#48
[#83 '+']: r#48
[#83 ',']: r#48
[#83 '-']: r#48
[#83 '.']: r#48
[#83 '/']: r#48
[#83 ':']: r#48
[#83 ';']: r#48
[#83 '<']: r#48
[#83 '<<']: r#48
[#83 '<=']: r#48
[#83 '==']: r#48
[#83 '>']: r#48
[#83 '>=']: r#48
[#83 '>>']: r#48
[#83 '[']: r#48
[#83 ']']: r#48
[#83 '^']: r#48
[#83 '{']: r#48
[#83 '|']: r#48
[#83 '||']: r#48
[#84 '!=']: r#49
[#84 '%']: r#49
[#84 '&&']: r#49
[#84 '&']: r#49
[#84 ')']: r#49
[#84 '*']: r#49
[#84 '+']: r#49
[#84 ',']: r#49
[#84 '-']: r#49
[#84 '.']: r#49
[#84 '/']: r#49
[#84 ':']: r#49
[#84 ';']: r#49
[#84 '<']: r#49
[#84 '<<']: r#49
[#84 '<=']: r#49
[#84 '==']: r#49
[#84 '>']: r#49
[#84 '>=']: r#49
[#84 '>>']: r#49
[#84 '[']: r#49
[#84 ']']: r#49
[#84 '^']: r#49
[#84 '{']: r#49
[#84 '|']: r#49
[#84 '||']: r#49
[#85 '!=']: r#50
[#85 '%']: r#50
[#85 '&&']: r#50
[#85 '&']: r#50
[#85 ')']: r#50
[#85 '*']: r#50
[#85 '+']: r#50
[#85 ',']: r#50
[#85 '-']: r#50
[#85 '.']: r#50
[#85 '/']: r#50
[#85 ':']: r#50
[#85 ';']: r#50
[#85 '<']: r#50
[#85 '<<']: r#50
[#85 '<=']: r#50
[#85 '==']: r#50
[#85 '>']: r#50
[#85 '>=']: r#50
[#85 '>>']: r#50
[#85 '[']: r#50
[#85 ']']: r#50
[#85 '^']: r#50
[#85 '{']: r#50
[#85 '|']: r#50
[#85 '||']: r#50
[#86 '!']: s#69
[#86 '&']: s#72
[#86 '(']: s#114
[#86 '*']: s#71
[#86 '-']: s#68
[#86 'array']: s#82
[#86 'bitcast']: s#77
[#86 'bool']: s#87
[#86 'f16']: s#116
[#86 'f32']: s#115
[#86 'false']: s#113
[#86 'i32']: s#117
[#86 'mat2x2']: s#98
[#86 'mat2x3']: s#99
[#86 'mat2x4']: s#100
[#86 'mat3x2']: s#101
[#86 'mat3x3']: s#102
[#86 'mat3x4']: s#103
[#86 'mat4x2']: s#104
[#86 'mat4x3']: s#105
[#86 'mat4x4']: s#106
[#86 'ptr']: s#119
[#86 'sampler']: s#133
[#86 'sampler_comparison']: s#134
[#86 'texture_1d']: s#140
[#86 'texture_2d']: s#141
[#86 'texture_2d_array']: s#142
[#86 'texture_3d']: s#143
[#86 'texture_cube']: s#144
[#86 'texture_cube_array']: s#145
[#86 'texture_depth_2d']: s#135
[#86 'texture_depth_2d_array']: s#136
[#86 'texture_depth_cube']: s#137
[#86 'texture_depth_cube_array']: s#138
[#86 'texture_depth_multisampled_2d']: s#139
[#86 'texture_multisampled_2d']: s#146
[#86 'texture_storage_1d']: s#147
[#86 'texture_storage_2d']: s#148
[#86 'texture_storage_2d_array']: s#149
[#86 'texture_storage_3d']: s#150
[#86 'true']: s#112
[#86 'u32']: s#118
[#86 'vec2']: s#95
[#86 'vec3']: s#96
[#86 'vec4']: s#97
[#86 '~']: s#70
[#86 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#86 /0[fh]/]: s#128
[#86 /0[iu]?/]: s#108
[#86 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#86 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#86 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#86 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#86 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#86 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#86 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#86 /[1-9][0-9]*[fh]/]: s#129
[#86 /[1-9][0-9]*[iu]?/]: s#109
[#87 '(']: r#51
[#87 ')']: r#51
[#87 ',']: r#51
[#87 ';']: r#51
[#87 '=']: r#51
[#87 '>']: r#51
[#87 '{']: r#51
[#87 '}']: r#51
[#88 '(']: r#52
[#88 ')']: r#52
[#88 ',']: r#52
[#88 ';']: r#52
[#88 '=']: r#52
[#88 '>']: r#52
[#88 '{']: r#52
[#88 '}']: r#52
[#89 '(']: r#53
[#89 ')']: r#53
[#89 ',']: r#53
[#89 ';']: r#53
[#89 '=']: r#53
[#89 '>']: r#53
[#89 '{']: r#53
[#89 '}']: r#53
[#90 '(']: r#54
[#90 ')']: r#54
[#90 ',']: r#54
[#90 ';']: r#54
[#90 '=']: r#54
[#90 '>']: r#54
[#90 '{']: r#54
[#90 '}']: r#54
[#91 '(']: r#55
[#91 ')']: r#55
[#91 ',']: r#55
[#91 ';']: r#55
[#91 '=']: r#55
[#91 '>']: r#55
[#91 '{']: r#55
[#91 '}']: r#55
[#92 '<']: s#167
[#93 '(']: r#56
[#93 ')']: r#56
[#93 ',']: r#56
[#93 ';']: r#56
[#93 '=']: r#56
[#93 '>']: r#56
[#93 '{']: r#56
[#93 '}']: r#56
[#94 '(']: r#57
[#94 ')']: r#57
[#94 ',']: r#57
[#94 ';']: r#57
[#94 '=']: r#57
[#94 '>']: r#57
[#94 '{']: r#57
[#94 '}']: r#57
[#95 '(']: r#58
[#96 '(']: r#59
[#97 '(']: r#60
[#98 '(']: r#61
[#99 '(']: r#62
[#100 '(']: r#63
[#101 '(']: r#64
[#102 '(']: r#65
[#103 '(']: r#66
[#104 '(']: r#67
[#105 '(']: r#68
[#106 '(']: r#69
[#107 '!=']: r#70
[#107 '%']: r#70
[#107 '&&']: r#70
[#107 '&']: r#70
[#107 ')']: r#70
[#107 '*']: r#70
[#107 '+']: r#70
[#107 ',']: r#70
[#107 '-']: r#70
[#107 '.']: r#70
[#107 '/']: r#70
[#107 ':']: r#70
[#107 ';']: r#70
[#107 '<']: r#70
[#107 '<<']: r#70
[#107 '<=']: r#70
[#107 '==']: r#70
[#107 '>']: r#70
[#107 '>=']: r#70
[#107 '>>']: r#70
[#107 '[']: r#70
[#107 ']']: r#70
[#107 '^']: r#70
[#107 '{']: r#70
[#107 '|']: r#70
[#107 '||']: r#70
[#108 '!=']: r#71
[#108 '%']: r#71
[#108 '&&']: r#71
[#108 '&']: r#71
[#108 ')']: r#71
[#108 '*']: r#71
[#108 '+']: r#71
[#108 ',']: r#71
[#108 '-']: r#71
[#108 '.']: r#71
[#108 '/']: r#71
[#108 ':']: r#71
[#108 ';']: r#71
[#108 '<']: r#71
[#108 '<<']: r#71
[#108 '<=']: r#71
[#108 '==']: r#71
[#108 '>']: r#71
[#108 '>=']: r#71
[#108 '>>']: r#71
[#108 '[']: r#71
[#108 ']']: r#71
[#108 '^']: r#71
[#108 '{']: r#71
[#108 '|']: r#71
[#108 '||']: r#71
[#109 '!=']: r#72
[#109 '%']: r#72
[#109 '&&']: r#72
[#109 '&']: r#72
[#109 ')']: r#72
[#109 '*']: r#72
[#109 '+']: r#72
[#109 ',']: r#72
[#109 '-']: r#72
[#109 '.']: r#72
[#109 '/']: r#72
[#109 ':']: r#72
[#109 ';']: r#72
[#109 '<']: r#72
[#109 '<<']: r#72
[#109 '<=']: r#72
[#109 '==']: r#72
[#109 '>']: r#72
[#109 '>=']: r#72
[#109 '>>']: r#72
[#109 '[']: r#72
[#109 ']']: r#72
[#109 '^']: r#72
[#109 '{']: r#72
[#109 '|']: r#72
[#109 '||']: r#72
[#110 '!=']: r#73
[#110 '%']: r#73
[#110 '&&']: r#73
[#110 '&']: r#73
[#110 ')']: r#73
[#110 '*']: r#73
[#110 '+']: r#73
[#110 ',']: r#73
[#110 '-']: r#73
[#110 '.']: r#73
[#110 '/']: r#73
[#110 ':']: r#73
[#110 ';']: r#73
[#110 '<']: r#73
[#110 '<<']: r#73
[#110 '<=']: r#73
[#110 '==']: r#73
[#110 '>']: r#73
[#110 '>=']: r#73
[#110 '>>']: r#73
[#110 '[']: r#73
[#110 ']']: r#73
[#110 '^']: r#73
[#110 '{']: r#73
[#110 '|']: r#73
[#110 '||']: r#73
[#111 '!=']: r#74
[#111 '%']: r#74
[#111 '&&']: r#74
[#111 '&']: r#74
[#111 ')']: r#74
[#111 '*']: r#74
[#111 '+']: r#74
[#111 ',']: r#74
[#111 '-']: r#74
[#111 '.']: r#74
[#111 '/']: r#74
[#111 ':']: r#74
[#111 ';']: r#74
[#111 '<']: r#74
[#111 '<<']: r#74
[#111 '<=']: r#74
[#111 '==']: r#74
[#111 '>']: r#74
[#111 '>=']: r#74
[#111 '>>']: r#74
[#111 '[']: r#74
[#111 ']']: r#74
[#111 '^']: r#74
[#111 '{']: r#74
[#111 '|']: r#74
[#111 '||']: r#74
[#112 '!=']: r#75
[#112 '%']: r#75
[#112 '&&']: r#75
[#112 '&']: r#75
[#112 ')']: r#75
[#112 '*']: r#75
[#112 '+']: r#75
[#112 ',']: r#75
[#112 '-']: r#75
[#112 '.']: r#75
[#112 '/']: r#75
[#112 ':']: r#75
[#112 ';']: r#75
[#112 '<']: r#75
[#112 '<<']: r#75
[#112 '<=']: r#75
[#112 '==']: r#75
[#112 '>']: r#75
[#112 '>=']: r#75
[#112 '>>']: r#75
[#112 '[']: r#75
[#112 ']']: r#75
[#112 '^']: r#75
[#112 '{']: r#75
[#112 '|']: r#75
[#112 '||']: r#75
[#113 '!=']: r#76
[#113 '%']: r#76
[#113 '&&']: r#76
[#113 '&']: r#76
[#113 ')']: r#76
[#113 '*']: r#76
[#113 '+']: r#76
[#113 ',']: r#76
[#113 '-']: r#76
[#113 '.']: r#76
[#113 '/']: r#76
[#113 ':']: r#76
[#113 ';']: r#76
[#113 '<']: r#76
[#113 '<<']: r#76
[#113 '<=']: r#76
[#113 '==']: r#76
[#113 '>']: r#76
[#113 '>=']: r#76
[#113 '>>']: r#76
[#113 '[']: r#76
[#113 ']']: r#76
[#113 '^']: r#76
[#113 '{']: r#76
[#113 '|']: r#76
[#113 '||']: r#76
[#114 '!']: r#77
[#114 '&']: r#77
[#114 '(']: r#77
[#114 ')']: r#77
[#114 '*']: r#77
[#114 '-']: r#77
[#114 ';']: r#77
[#114 '@']: r#77
[#114 'array']: r#77
[#114 'bitcast']: r#77
[#114 'bool']: r#77
[#114 'const']: r#77
[#114 'f16']: r#77
[#114 'f32']: r#77
[#114 'false']: r#77
[#114 'i32']: r#77
[#114 'let']: r#77
[#114 'mat2x2']: r#77
[#114 'mat2x3']: r#77
[#114 'mat2x4']: r#77
[#114 'mat3x2']: r#77
[#114 'mat3x3']: r#77
[#114 'mat3x4']: r#77
[#114 'mat4x2']: r#77
[#114 'mat4x3']: r#77
[#114 'mat4x4']: r#77
[#114 'ptr']: r#77
[#114 'sampler']: r#77
[#114 'sampler_comparison']: r#77
[#114 'texture_1d']: r#77
[#114 'texture_2d']: r#77
[#114 'texture_2d_array']: r#77
[#114 'texture_3d']: r#77
[#114 'texture_cube']: r#77
[#114 'texture_cube_array']: r#77
[#114 'texture_depth_2d']: r#77
[#114 'texture_depth_2d_array']: r#77
[#114 'texture_depth_cube']: r#77
[#114 'texture_depth_cube_array']: r#77
[#114 'texture_depth_multisampled_2d']: r#77
[#114 'texture_multisampled_2d']: r#77
[#114 'texture_storage_1d']: r#77
[#114 'texture_storage_2d']: r#77
[#114 'texture_storage_2d_array']: r#77
[#114 'texture_storage_3d']: r#77
[#114 'true']: r#77
[#114 'u32']: r#77
[#114 'var']: r#77
[#114 'vec2']: r#77
[#114 'vec3']: r#77
[#114 'vec4']: r#77
[#114 '~']: r#77
[#114 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#77
[#115 '(']: r#78
[#115 ')']: r#78
[#115 ',']: r#78
[#115 ';']: r#78
[#115 '=']: r#78
[#115 '>']: r#78
[#115 '{']: r#78
[#115 '}']: r#78
[#116 '(']: r#79
[#116 ')']: r#79
[#116 ',']: r#79
[#116 ';']: r#79
[#116 '=']: r#79
[#116 '>']: r#79
[#116 '{']: r#79
[#116 '}']: r#79
[#117 '(']: r#80
[#117 ')']: r#80
[#117 ',']: r#80
[#117 ';']: r#80
[#117 '=']: r#80
[#117 '>']: r#80
[#117 '{']: r#80
[#117 '}']: r#80
[#118 '(']: r#81
[#118 ')']: r#81
[#118 ',']: r#81
[#118 ';']: r#81
[#118 '=']: r#81
[#118 '>']: r#81
[#118 '{']: r#81
[#118 '}']: r#81
[#119 '<']: r#82
[#120 '(']: r#83
[#120 ')']: r#83
[#120 ',']: r#83
[#120 ';']: r#83
[#120 '=']: r#83
[#120 '>']: r#83
[#120 '{']: r#83
[#120 '}']: r#83
[#121 '(']: r#84
[#121 ')']: r#84
[#121 ',']: r#84
[#121 ';']: r#84
[#121 '=']: r#84
[#121 '>']: r#84
[#121 '{']: r#84
[#121 '}']: r#84
[#122 '<']: s#167
[#123 '<']: s#167
[#124 '<']: s#167
[#125 '!=']: r#85
[#125 '%']: r#85
[#125 '&&']: r#85
[#125 '&']: r#85
[#125 ')']: r#85
[#125 '*']: r#85
[#125 '+']: r#85
[#125 ',']: r#85
[#125 '-']: r#85
[#125 '.']: r#85
[#125 '/']: r#85
[#125 ':']: r#85
[#125 ';']: r#85
[#125 '<']: r#85
[#125 '<<']: r#85
[#125 '<=']: r#85
[#125 '==']: r#85
[#125 '>']: r#85
[#125 '>=']: r#85
[#125 '>>']: r#85
[#125 '[']: r#85
[#125 ']']: r#85
[#125 '^']: r#85
[#125 '{']: r#85
[#125 '|']: r#85
[#125 '||']: r#85
[#126 '!=']: r#86
[#126 '%']: r#86
[#126 '&&']: r#86
[#126 '&']: r#86
[#126 ')']: r#86
[#126 '*']: r#86
[#126 '+']: r#86
[#126 ',']: r#86
[#126 '-']: r#86
[#126 '.']: r#86
[#126 '/']: r#86
[#126 ':']: r#86
[#126 ';']: r#86
[#126 '<']: r#86
[#126 '<<']: r#86
[#126 '<=']: r#86
[#126 '==']: r#86
[#126 '>']: r#86
[#126 '>=']: r#86
[#126 '>>']: r#86
[#126 '[']: r#86
[#126 ']']: r#86
[#126 '^']: r#86
[#126 '{']: r#86
[#126 '|']: r#86
[#126 '||']: r#86
[#127 '!=']: r#87
[#127 '%']: r#87
[#127 '&&']: r#87
[#127 '&']: r#87
[#127 ')']: r#87
[#127 '*']: r#87
[#127 '+']: r#87
[#127 ',']: r#87
[#127 '-']: r#87
[#127 '.']: r#87
[#127 '/']: r#87
[#127 ':']: r#87
[#127 ';']: r#87
[#127 '<']: r#87
[#127 '<<']: r#87
[#127 '<=']: r#87
[#127 '==']: r#87
[#127 '>']: r#87
[#127 '>=']: r#87
[#127 '>>']: r#87
[#127 '[']: r#87
[#127 ']']: r#87
[#127 '^']: r#87
[#127 '{']: r#87
[#127 '|']: r#87
[#127 '||']: r#87
[#128 '!=']: r#88
[#128 '%']: r#88
[#128 '&&']: r#88
[#128 '&']: r#88
[#128 ')']: r#88
[#128 '*']: r#88
[#128 '+']: r#88
[#128 ',']: r#88
[#128 '-']: r#88
[#128 '.']: r#88
[#128 '/']: r#88
[#128 ':']: r#88
[#128 ';']: r#88
[#128 '<']: r#88
[#128 '<<']: r#88
[#128 '<=']: r#88
[#128 '==']: r#88
[#128 '>']: r#88
[#128 '>=']: r#88
[#128 '>>']: r#88
[#128 '[']: r#88
[#128 ']']: r#88
[#128 '^']: r#88
[#128 '{']: r#88
[#128 '|']: r#88
[#128 '||']: r#88
[#129 '!=']: r#89
[#129 '%']: r#89
[#129 '&&']: r#89
[#129 '&']: r#89
[#129 ')']: r#89
[#129 '*']: r#89
[#129 '+']: r#89
[#129 ',']: r#89
[#129 '-']: r#89
[#129 '.']: r#89
[#129 '/']: r#89
[#129 ':']: r#89
[#129 ';']: r#89
[#129 '<']: r#89
[#129 '<<']: r#89
[#129 '<=']: r#89
[#129 '==']: r#89
[#129 '>']: r#89
[#129 '>=']: r#89
[#129 '>>']: r#89
[#129 '[']: r#89
[#129 ']']: r#89
[#129 '^']: r#89
[#129 '{']: r#89
[#129 '|']: r#89
[#129 '||']: r#89
[#130 '!=']: r#90
[#130 '%']: r#90
[#130 '&&']: r#90
[#130 '&']: r#90
[#130 ')']: r#90
[#130 '*']: r#90
[#130 '+']: r#90
[#130 ',']: r#90
[#130 '-']: r#90
[#130 '.']: r#90
[#130 '/']: r#90
[#130 ':']: r#90
[#130 ';']: r#90
[#130 '<']: r#90
[#130 '<<']: r#90
[#130 '<=']: r#90
[#130 '==']: r#90
[#130 '>']: r#90
[#130 '>=']: r#90
[#130 '>>']: r#90
[#130 '[']: r#90
[#130 ']']: r#90
[#130 '^']: r#90
[#130 '{']: r#90
[#130 '|']: r#90
[#130 '||']: r#90
[#131 '!=']: r#91
[#131 '%']: r#91
[#131 '&&']: r#91
[#131 '&']: r#91
[#131 ')']: r#91
[#131 '*']: r#91
[#131 '+']: r#91
[#131 ',']: r#91
[#131 '-']: r#91
[#131 '.']: r#91
[#131 '/']: r#91
[#131 ':']: r#91
[#131 ';']: r#91
[#131 '<']: r#91
[#131 '<<']: r#91
[#131 '<=']: r#91
[#131 '==']: r#91
[#131 '>']: r#91
[#131 '>=']: r#91
[#131 '>>']: r#91
[#131 '[']: r#91
[#131 ']']: r#91
[#131 '^']: r#91
[#131 '{']: r#91
[#131 '|']: r#91
[#131 '||']: r#91
[#132 '!=']: r#92
[#132 '%']: r#92
[#132 '&&']: r#92
[#132 '&']: r#92
[#132 ')']: r#92
[#132 '*']: r#92
[#132 '+']: r#92
[#132 ',']: r#92
[#132 '-']: r#92
[#132 '.']: r#92
[#132 '/']: r#92
[#132 ':']: r#92
[#132 ';']: r#92
[#132 '<']: r#92
[#132 '<<']: r#92
[#132 '<=']: r#92
[#132 '==']: r#92
[#132 '>']: r#92
[#132 '>=']: r#92
[#132 '>>']: r#92
[#132 '[']: r#92
[#132 ']']: r#92
[#132 '^']: r#92
[#132 '{']: r#92
[#132 '|']: r#92
[#132 '||']: r#92
[#133 '(']: r#93
[#133 ')']: r#93
[#133 ',']: r#93
[#133 ';']: r#93
[#133 '=']: r#93
[#133 '>']: r#93
[#133 '{']: r#93
[#133 '}']: r#93
[#134 '(']: r#94
[#134 ')']: r#94
[#134 ',']: r#94
[#134 ';']: r#94
[#134 '=']: r#94
[#134 '>']: r#94
[#134 '{']: r#94
[#134 '}']: r#94
[#135 '(']: r#95
[#135 ')']: r#95
[#135 ',']: r#95
[#135 ';']: r#95
[#135 '=']: r#95
[#135 '>']: r#95
[#135 '{']: r#95
[#135 '}']: r#95
[#136 '(']: r#96
[#136 ')']: r#96
[#136 ',']: r#96
[#136 ';']: r#96
[#136 '=']: r#96
[#136 '>']: r#96
[#136 '{']: r#96
[#136 '}']: r#96
[#137 '(']: r#97
[#137 ')']: r#97
[#137 ',']: r#97
[#137 ';']: r#97
[#137 '=']: r#97
[#137 '>']: r#97
[#137 '{']: r#97
[#137 '}']: r#97
[#138 '(']: r#98
[#138 ')']: r#98
[#138 ',']: r#98
[#138 ';']: r#98
[#138 '=']: r#98
[#138 '>']: r#98
[#138 '{']: r#98
[#138 '}']: r#98
[#139 '(']: r#99
[#139 ')']: r#99
[#139 ',']: r#99
[#139 ';']: r#99
[#139 '=']: r#99
[#139 '>']: r#99
[#139 '{']: r#99
[#139 '}']: r#99
[#140 '<']: r#100
[#141 '<']: r#101
[#142 '<']: r#102
[#143 '<']: r#103
[#144 '<']: r#104
[#145 '<']: r#105
[#146 '<']: r#106
[#147 '<']: r#107
[#148 '<']: r#108
[#149 '<']: r#109
[#150 '<']: r#110
[#151 '{']: s#176
[#152 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#153 '{']: s#176
[#154 '=']: s#170
[#155 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#156 '=']: s#170
[#157 '<']: s#167
[#158 ';']: r#111
[#158 '@']: r#111
[#158 'fn']: r#111
[#158 'override']: r#111
[#158 'static_assert']: r#111
[#158 'struct']: r#111
[#158 'type']: r#111
[#158 'var']: r#111
[#158 EndOfText]: r#111
[#159 ';']: r#112
[#159 '@']: r#112
[#159 'fn']: r#112
[#159 'override']: r#112
[#159 'static_assert']: r#112
[#159 'struct']: r#112
[#159 'type']: r#112
[#159 'var']: r#112
[#159 EndOfText]: r#112
[#160 ';']: r#113
[#160 '@']: r#113
[#160 'fn']: r#113
[#160 'override']: r#113
[#160 'static_assert']: r#113
[#160 'struct']: r#113
[#160 'type']: r#113
[#160 'var']: r#113
[#160 EndOfText]: r#113
[#161 ';']: r#114
[#161 '@']: r#114
[#161 'fn']: r#114
[#161 'override']: r#114
[#161 'static_assert']: r#114
[#161 'struct']: r#114
[#161 'type']: r#114
[#161 'var']: r#114
[#161 EndOfText]: r#114
[#162 EndOfText]: r#115
[#163 ';']: r#116
[#163 '@']: r#116
[#163 'enable']: r#116
[#163 'fn']: r#116
[#163 'override']: r#116
[#163 'static_assert']: r#116
[#163 'struct']: r#116
[#163 'type']: r#116
[#163 'var']: r#116
[#163 EndOfText]: r#116
[#164 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#165 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#117
[#166 'function']: s#306
[#166 'private']: s#307
[#166 'storage']: s#310
[#166 'uniform']: s#309
[#166 'workgroup']: s#308
[#167 '!']: r#118
[#167 '&']: r#118
[#167 '(']: r#118
[#167 '*']: r#118
[#167 '-']: r#118
[#167 'array']: r#118
[#167 'bitcast']: r#118
[#167 'bool']: r#118
[#167 'f16']: r#118
[#167 'f32']: r#118
[#167 'false']: r#118
[#167 'function']: r#118
[#167 'i32']: r#118
[#167 'mat2x2']: r#118
[#167 'mat2x3']: r#118
[#167 'mat2x4']: r#118
[#167 'mat3x2']: r#118
[#167 'mat3x3']: r#118
[#167 'mat3x4']: r#118
[#167 'mat4x2']: r#118
[#167 'mat4x3']: r#118
[#167 'mat4x4']: r#118
[#167 'private']: r#118
[#167 'ptr']: r#118
[#167 'sampler']: r#118
[#167 'sampler_comparison']: r#118
[#167 'storage']: r#118
[#167 'texture_1d']: r#118
[#167 'texture_2d']: r#118
[#167 'texture_2d_array']: r#118
[#167 'texture_3d']: r#118
[#167 'texture_cube']: r#118
[#167 'texture_cube_array']: r#118
[#167 'texture_depth_2d']: r#118
[#167 'texture_depth_2d_array']: r#118
[#167 'texture_depth_cube']: r#118
[#167 'texture_depth_cube_array']: r#118
[#167 'texture_depth_multisampled_2d']: r#118
[#167 'texture_multisampled_2d']: r#118
[#167 'texture_storage_1d']: r#118
[#167 'texture_storage_2d']: r#118
[#167 'texture_storage_2d_array']: r#118
[#167 'texture_storage_3d']: r#118
[#167 'true']: r#118
[#167 'u32']: r#118
[#167 'uniform']: r#118
[#167 'vec2']: r#118
[#167 'vec3']: r#118
[#167 'vec4']: r#118
[#167 'workgroup']: r#118
[#167 '~']: r#118
[#168 ';']: r#119
[#169 '!']: s#69
[#169 '&']: s#72
[#169 '(']: s#114
[#169 '*']: s#71
[#169 '-']: s#68
[#169 'array']: s#82
[#169 'bitcast']: s#77
[#169 'bool']: s#87
[#169 'f16']: s#116
[#169 'f32']: s#115
[#169 'false']: s#113
[#169 'i32']: s#117
[#169 'mat2x2']: s#98
[#169 'mat2x3']: s#99
[#169 'mat2x4']: s#100
[#169 'mat3x2']: s#101
[#169 'mat3x3']: s#102
[#169 'mat3x4']: s#103
[#169 'mat4x2']: s#104
[#169 'mat4x3']: s#105
[#169 'mat4x4']: s#106
[#169 'ptr']: s#119
[#169 'sampler']: s#133
[#169 'sampler_comparison']: s#134
[#169 'texture_1d']: s#140
[#169 'texture_2d']: s#141
[#169 'texture_2d_array']: s#142
[#169 'texture_3d']: s#143
[#169 'texture_cube']: s#144
[#169 'texture_cube_array']: s#145
[#169 'texture_depth_2d']: s#135
[#169 'texture_depth_2d_array']: s#136
[#169 'texture_depth_cube']: s#137
[#169 'texture_depth_cube_array']: s#138
[#169 'texture_depth_multisampled_2d']: s#139
[#169 'texture_multisampled_2d']: s#146
[#169 'texture_storage_1d']: s#147
[#169 'texture_storage_2d']: s#148
[#169 'texture_storage_2d_array']: s#149
[#169 'texture_storage_3d']: s#150
[#169 'true']: s#112
[#169 'u32']: s#118
[#169 'vec2']: s#95
[#169 'vec3']: s#96
[#169 'vec4']: s#97
[#169 '~']: s#70
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#169 /0[fh]/]: s#128
[#169 /0[iu]?/]: s#108
[#169 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#169 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#169 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#169 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#169 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#169 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#169 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#169 /[1-9][0-9]*[fh]/]: s#129
[#169 /[1-9][0-9]*[iu]?/]: s#109
[#170 '!']: r#120
[#170 '&']: r#120
[#170 '(']: r#120
[#170 '*']: r#120
[#170 '-']: r#120
[#170 'array']: r#120
[#170 'bitcast']: r#120
[#170 'bool']: r#120
[#170 'f16']: r#120
[#170 'f32']: r#120
[#170 'false']: r#120
[#170 'i32']: r#120
[#170 'mat2x2']: r#120
[#170 'mat2x3']: r#120
[#170 'mat2x4']: r#120
[#170 'mat3x2']: r#120
[#170 'mat3x3']: r#120
[#170 'mat3x4']: r#120
[#170 'mat4x2']: r#120
[#170 'mat4x3']: r#120
[#170 'mat4x4']: r#120
[#170 'ptr']: r#120
[#170 'sampler']: r#120
[#170 'sampler_comparison']: r#120
[#170 'texture_1d']: r#120
[#170 'texture_2d']: r#120
[#170 'texture_2d_array']: r#120
[#170 'texture_3d']: r#120
[#170 'texture_cube']: r#120
[#170 'texture_cube_array']: r#120
[#170 'texture_depth_2d']: r#120
[#170 'texture_depth_2d_array']: r#120
[#170 'texture_depth_cube']: r#120
[#170 'texture_depth_cube_array']: r#120
[#170 'texture_depth_multisampled_2d']: r#120
[#170 'texture_multisampled_2d']: r#120
[#170 'texture_storage_1d']: r#120
[#170 'texture_storage_2d']: r#120
[#170 'texture_storage_2d_array']: r#120
[#170 'texture_storage_3d']: r#120
[#170 'true']: r#120
[#170 'u32']: r#120
[#170 'vec2']: r#120
[#170 'vec3']: r#120
[#170 'vec4']: r#120
[#170 '~']: r#120
[#171 '=']: s#170
[#172 ':']: s#378
[#173 'array']: s#301
[#173 'bool']: s#87
[#173 'f16']: s#116
[#173 'f32']: s#115
[#173 'i32']: s#117
[#173 'ptr']: s#119
[#173 'sampler']: s#133
[#173 'sampler_comparison']: s#134
[#173 'texture_1d']: s#140
[#173 'texture_2d']: s#141
[#173 'texture_2d_array']: s#142
[#173 'texture_3d']: s#143
[#173 'texture_cube']: s#144
[#173 'texture_cube_array']: s#145
[#173 'texture_depth_2d']: s#135
[#173 'texture_depth_2d_array']: s#136
[#173 'texture_depth_cube']: s#137
[#173 'texture_depth_cube_array']: s#138
[#173 'texture_depth_multisampled_2d']: s#139
[#173 'texture_multisampled_2d']: s#146
[#173 'texture_storage_1d']: s#147
[#173 'texture_storage_2d']: s#148
[#173 'texture_storage_2d_array']: s#149
[#173 'texture_storage_3d']: s#150
[#173 'u32']: s#118
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#174 ';']: r#121
[#174 '@']: r#121
[#174 'fn']: r#121
[#174 'override']: r#121
[#174 'static_assert']: r#121
[#174 'struct']: r#121
[#174 'type']: r#121
[#174 'var']: r#121
[#174 EndOfText]: r#121
[#175 '@']: s#31
[#176 '&']: r#122
[#176 '(']: r#122
[#176 '*']: r#122
[#176 ';']: r#122
[#176 '@']: r#122
[#176 'break']: r#122
[#176 'case']: r#122
[#176 'const']: r#122
[#176 'continue']: r#122
[#176 'continuing']: r#122
[#176 'default']: r#122
[#176 'discard']: r#122
[#176 'for']: r#122
[#176 'if']: r#122
[#176 'let']: r#122
[#176 'loop']: r#122
[#176 'return']: r#122
[#176 'static_assert']: r#122
[#176 'switch']: r#122
[#176 'var']: r#122
[#176 'while']: r#122
[#176 '{']: r#122
[#176 '}']: r#122
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#122
[#177 '(']: s#114
[#178 ';']: r#123
[#178 '@']: r#123
[#178 'fn']: r#123
[#178 'override']: r#123
[#178 'static_assert']: r#123
[#178 'struct']: r#123
[#178 'type']: r#123
[#178 'var']: r#123
[#178 EndOfText]: r#123
[#179 '&']: s#72
[#179 '*']: s#71
[#179 ';']: s#19
[#179 'break']: s#358
[#179 'const']: s#357
[#179 'continue']: s#359
[#179 'discard']: s#344
[#179 'for']: s#352
[#179 'if']: s#363
[#179 'let']: s#356
[#179 'loop']: s#351
[#179 'return']: s#348
[#179 'static_assert']: s#25
[#179 'switch']: s#350
[#179 'var']: s#157
[#179 'while']: s#353
[#179 '{']: s#176
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#180 'r32float']: s#323
[#180 'r32sint']: s#322
[#180 'r32uint']: s#321
[#180 'rg32float']: s#326
[#180 'rg32sint']: s#325
[#180 'rg32uint']: s#324
[#180 'rgba16float']: s#320
[#180 'rgba16sint']: s#319
[#180 'rgba16uint']: s#318
[#180 'rgba32float']: s#329
[#180 'rgba32sint']: s#328
[#180 'rgba32uint']: s#327
[#180 'rgba8sint']: s#317
[#180 'rgba8snorm']: s#315
[#180 'rgba8uint']: s#316
[#180 'rgba8unorm']: s#314
[#181 'array']: s#301
[#181 'bool']: s#87
[#181 'f16']: s#116
[#181 'f32']: s#115
[#181 'i32']: s#117
[#181 'ptr']: s#119
[#181 'sampler']: s#133
[#181 'sampler_comparison']: s#134
[#181 'texture_1d']: s#140
[#181 'texture_2d']: s#141
[#181 'texture_2d_array']: s#142
[#181 'texture_3d']: s#143
[#181 'texture_cube']: s#144
[#181 'texture_cube_array']: s#145
[#181 'texture_depth_2d']: s#135
[#181 'texture_depth_2d_array']: s#136
[#181 'texture_depth_cube']: s#137
[#181 'texture_depth_cube_array']: s#138
[#181 'texture_depth_multisampled_2d']: s#139
[#181 'texture_multisampled_2d']: s#146
[#181 'texture_storage_1d']: s#147
[#181 'texture_storage_2d']: s#148
[#181 'texture_storage_2d_array']: s#149
[#181 'texture_storage_3d']: s#150
[#181 'u32']: s#118
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#182 'array']: s#301
[#182 'bool']: s#87
[#182 'f16']: s#116
[#182 'f32']: s#115
[#182 'i32']: s#117
[#182 'ptr']: s#119
[#182 'sampler']: s#133
[#182 'sampler_comparison']: s#134
[#182 'texture_1d']: s#140
[#182 'texture_2d']: s#141
[#182 'texture_2d_array']: s#142
[#182 'texture_3d']: s#143
[#182 'texture_cube']: s#144
[#182 'texture_cube_array']: s#145
[#182 'texture_depth_2d']: s#135
[#182 'texture_depth_2d_array']: s#136
[#182 'texture_depth_cube']: s#137
[#182 'texture_depth_cube_array']: s#138
[#182 'texture_depth_multisampled_2d']: s#139
[#182 'texture_multisampled_2d']: s#146
[#182 'texture_storage_1d']: s#147
[#182 'texture_storage_2d']: s#148
[#182 'texture_storage_2d_array']: s#149
[#182 'texture_storage_3d']: s#150
[#182 'u32']: s#118
[#182 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#183 'function']: s#306
[#183 'private']: s#307
[#183 'storage']: s#310
[#183 'uniform']: s#309
[#183 'workgroup']: s#308
[#184 ')']: s#304
[#185 'array']: s#301
[#185 'bool']: s#87
[#185 'f16']: s#116
[#185 'f32']: s#115
[#185 'i32']: s#117
[#185 'ptr']: s#119
[#185 'sampler']: s#133
[#185 'sampler_comparison']: s#134
[#185 'texture_1d']: s#140
[#185 'texture_2d']: s#141
[#185 'texture_2d_array']: s#142
[#185 'texture_3d']: s#143
[#185 'texture_cube']: s#144
[#185 'texture_cube_array']: s#145
[#185 'texture_depth_2d']: s#135
[#185 'texture_depth_2d_array']: s#136
[#185 'texture_depth_cube']: s#137
[#185 'texture_depth_cube_array']: s#138
[#185 'texture_depth_multisampled_2d']: s#139
[#185 'texture_multisampled_2d']: s#146
[#185 'texture_storage_1d']: s#147
[#185 'texture_storage_2d']: s#148
[#185 'texture_storage_2d_array']: s#149
[#185 'texture_storage_3d']: s#150
[#185 'u32']: s#118
[#185 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#186 'array']: s#301
[#186 'bool']: s#87
[#186 'f16']: s#116
[#186 'f32']: s#115
[#186 'i32']: s#117
[#186 'ptr']: s#119
[#186 'sampler']: s#133
[#186 'sampler_comparison']: s#134
[#186 'texture_1d']: s#140
[#186 'texture_2d']: s#141
[#186 'texture_2d_array']: s#142
[#186 'texture_3d']: s#143
[#186 'texture_cube']: s#144
[#186 'texture_cube_array']: s#145
[#186 'texture_depth_2d']: s#135
[#186 'texture_depth_2d_array']: s#136
[#186 'texture_depth_cube']: s#137
[#186 'texture_depth_cube_array']: s#138
[#186 'texture_depth_multisampled_2d']: s#139
[#186 'texture_multisampled_2d']: s#146
[#186 'texture_storage_1d']: s#147
[#186 'texture_storage_2d']: s#148
[#186 'texture_storage_2d_array']: s#149
[#186 'texture_storage_3d']: s#150
[#186 'u32']: s#118
[#186 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#187 '!=']: r#124
[#187 '%']: r#124
[#187 '&&']: r#124
[#187 '&']: r#124
[#187 ')']: r#124
[#187 '*']: r#124
[#187 '+']: r#124
[#187 ',']: r#124
[#187 '-']: r#124
[#187 '.']: r#124
[#187 '/']: r#124
[#187 ':']: r#124
[#187 ';']: r#124
[#187 '<']: r#124
[#187 '<<']: r#124
[#187 '<=']: r#124
[#187 '==']: r#124
[#187 '>']: r#124
[#187 '>=']: r#124
[#187 '>>']: r#124
[#187 '[']: r#124
[#187 ']']: r#124
[#187 '^']: r#124
[#187 '{']: r#124
[#187 '|']: r#124
[#187 '||']: r#124
[#188 '!']: s#69
[#188 '&']: s#72
[#188 '(']: s#114
[#188 '*']: s#71
[#188 '-']: s#68
[#188 'array']: s#82
[#188 'bitcast']: s#77
[#188 'bool']: s#87
[#188 'f16']: s#116
[#188 'f32']: s#115
[#188 'false']: s#113
[#188 'i32']: s#117
[#188 'mat2x2']: s#98
[#188 'mat2x3']: s#99
[#188 'mat2x4']: s#100
[#188 'mat3x2']: s#101
[#188 'mat3x3']: s#102
[#188 'mat3x4']: s#103
[#188 'mat4x2']: s#104
[#188 'mat4x3']: s#105
[#188 'mat4x4']: s#106
[#188 'ptr']: s#119
[#188 'sampler']: s#133
[#188 'sampler_comparison']: s#134
[#188 'texture_1d']: s#140
[#188 'texture_2d']: s#141
[#188 'texture_2d_array']: s#142
[#188 'texture_3d']: s#143
[#188 'texture_cube']: s#144
[#188 'texture_cube_array']: s#145
[#188 'texture_depth_2d']: s#135
[#188 'texture_depth_2d_array']: s#136
[#188 'texture_depth_cube']: s#137
[#188 'texture_depth_cube_array']: s#138
[#188 'texture_depth_multisampled_2d']: s#139
[#188 'texture_multisampled_2d']: s#146
[#188 'texture_storage_1d']: s#147
[#188 'texture_storage_2d']: s#148
[#188 'texture_storage_2d_array']: s#149
[#188 'texture_storage_3d']: s#150
[#188 'true']: s#112
[#188 'u32']: s#118
[#188 'vec2']: s#95
[#188 'vec3']: s#96
[#188 'vec4']: s#97
[#188 '~']: s#70
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#188 /0[fh]/]: s#128
[#188 /0[iu]?/]: s#108
[#188 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#188 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#188 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#188 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#188 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#188 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#188 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#188 /[1-9][0-9]*[fh]/]: s#129
[#188 /[1-9][0-9]*[iu]?/]: s#109
[#189 '!=']: r#125
[#189 '%']: r#125
[#189 '&&']: r#125
[#189 '&']: r#125
[#189 ')']: r#125
[#189 '*']: r#125
[#189 '+']: r#125
[#189 ',']: r#125
[#189 '-']: r#125
[#189 '/']: r#125
[#189 ':']: r#125
[#189 ';']: r#125
[#189 '<']: r#125
[#189 '<<']: r#125
[#189 '<=']: r#125
[#189 '==']: r#125
[#189 '>']: r#125
[#189 '>=']: r#125
[#189 '>>']: r#125
[#189 ']']: r#125
[#189 '^']: r#125
[#189 '{']: r#125
[#189 '|']: r#125
[#189 '||']: r#125
[#190 '!=']: r#126
[#190 '%']: r#126
[#190 '&&']: r#126
[#190 '&']: r#126
[#190 ')']: r#126
[#190 '*']: r#126
[#190 '+']: r#126
[#190 ',']: r#126
[#190 '-']: r#126
[#190 '/']: r#126
[#190 ':']: r#126
[#190 ';']: r#126
[#190 '<']: r#126
[#190 '<<']: r#126
[#190 '<=']: r#126
[#190 '==']: r#126
[#190 '>']: r#126
[#190 '>=']: r#126
[#190 '>>']: r#126
[#190 ']']: r#126
[#190 '^']: r#126
[#190 '{']: r#126
[#190 '|']: r#126
[#190 '||']: r#126
[#191 '!']: s#69
[#191 '&']: s#72
[#191 '(']: s#114
[#191 '*']: s#71
[#191 '-']: s#68
[#191 'array']: s#82
[#191 'bitcast']: s#77
[#191 'bool']: s#87
[#191 'f16']: s#116
[#191 'f32']: s#115
[#191 'false']: s#113
[#191 'i32']: s#117
[#191 'mat2x2']: s#98
[#191 'mat2x3']: s#99
[#191 'mat2x4']: s#100
[#191 'mat3x2']: s#101
[#191 'mat3x3']: s#102
[#191 'mat3x4']: s#103
[#191 'mat4x2']: s#104
[#191 'mat4x3']: s#105
[#191 'mat4x4']: s#106
[#191 'ptr']: s#119
[#191 'sampler']: s#133
[#191 'sampler_comparison']: s#134
[#191 'texture_1d']: s#140
[#191 'texture_2d']: s#141
[#191 'texture_2d_array']: s#142
[#191 'texture_3d']: s#143
[#191 'texture_cube']: s#144
[#191 'texture_cube_array']: s#145
[#191 'texture_depth_2d']: s#135
[#191 'texture_depth_2d_array']: s#136
[#191 'texture_depth_cube']: s#137
[#191 'texture_depth_cube_array']: s#138
[#191 'texture_depth_multisampled_2d']: s#139
[#191 'texture_multisampled_2d']: s#146
[#191 'texture_storage_1d']: s#147
[#191 'texture_storage_2d']: s#148
[#191 'texture_storage_2d_array']: s#149
[#191 'texture_storage_3d']: s#150
[#191 'true']: s#112
[#191 'u32']: s#118
[#191 'vec2']: s#95
[#191 'vec3']: s#96
[#191 'vec4']: s#97
[#191 '~']: s#70
[#191 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#191 /0[fh]/]: s#128
[#191 /0[iu]?/]: s#108
[#191 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#191 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#191 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#191 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#191 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#191 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#191 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#191 /[1-9][0-9]*[fh]/]: s#129
[#191 /[1-9][0-9]*[iu]?/]: s#109
[#192 '/[rgba]/']: s#287
[#192 '/[rgba][rgba]/']: s#288
[#192 '/[rgba][rgba][rgba]/']: s#289
[#192 '/[rgba][rgba][rgba][rgba]/']: s#290
[#192 '/[xyzw]/']: s#291
[#192 '/[xyzw][xyzw]/']: s#292
[#192 '/[xyzw][xyzw][xyzw]/']: s#293
[#192 '/[xyzw][xyzw][xyzw][xyzw]/']: s#294
[#192 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#286
[#193 '!']: r#127
[#193 '&']: r#127
[#193 '(']: r#127
[#193 '*']: r#127
[#193 '-']: r#127
[#193 'array']: r#127
[#193 'bitcast']: r#127
[#193 'bool']: r#127
[#193 'f16']: r#127
[#193 'f32']: r#127
[#193 'false']: r#127
[#193 'i32']: r#127
[#193 'mat2x2']: r#127
[#193 'mat2x3']: r#127
[#193 'mat2x4']: r#127
[#193 'mat3x2']: r#127
[#193 'mat3x3']: r#127
[#193 'mat3x4']: r#127
[#193 'mat4x2']: r#127
[#193 'mat4x3']: r#127
[#193 'mat4x4']: r#127
[#193 'ptr']: r#127
[#193 'sampler']: r#127
[#193 'sampler_comparison']: r#127
[#193 'texture_1d']: r#127
[#193 'texture_2d']: r#127
[#193 'texture_2d_array']: r#127
[#193 'texture_3d']: r#127
[#193 'texture_cube']: r#127
[#193 'texture_cube_array']: r#127
[#193 'texture_depth_2d']: r#127
[#193 'texture_depth_2d_array']: r#127
[#193 'texture_depth_cube']: r#127
[#193 'texture_depth_cube_array']: r#127
[#193 'texture_depth_multisampled_2d']: r#127
[#193 'texture_multisampled_2d']: r#127
[#193 'texture_storage_1d']: r#127
[#193 'texture_storage_2d']: r#127
[#193 'texture_storage_2d_array']: r#127
[#193 'texture_storage_3d']: r#127
[#193 'true']: r#127
[#193 'u32']: r#127
[#193 'vec2']: r#127
[#193 'vec3']: r#127
[#193 'vec4']: r#127
[#193 '~']: r#127
[#195 '!=']: r#128
[#195 '%']: r#128
[#195 '&&']: r#128
[#195 '&']: r#128
[#195 ')']: r#128
[#195 '*']: r#128
[#195 '+']: r#128
[#195 ',']: r#128
[#195 '-']: r#128
[#195 '/']: r#128
[#195 ':']: r#128
[#195 ';']: r#128
[#195 '<']: r#128
[#195 '<<']: r#128
[#195 '<=']: r#128
[#195 '==']: r#128
[#195 '>']: r#128
[#195 '>=']: r#128
[#195 '>>']: r#128
[#195 ']']: r#128
[#195 '^']: r#128
[#195 '{']: r#128
[#195 '|']: r#128
[#195 '||']: r#128
[#196 '!=']: r#129
[#196 '%']: r#129
[#196 '&&']: r#129
[#196 '&']: r#129
[#196 ')']: r#129
[#196 '*']: r#129
[#196 '+']: r#129
[#196 ',']: r#129
[#196 '-']: r#129
[#196 '/']: r#129
[#196 ':']: r#129
[#196 ';']: r#129
[#196 '<']: r#129
[#196 '<<']: r#129
[#196 '<=']: r#129
[#196 '==']: r#129
[#196 '>']: r#129
[#196 '>=']: r#129
[#196 '>>']: r#129
[#196 ']']: r#129
[#196 '^']: r#129
[#196 '{']: r#129
[#196 '|']: r#129
[#196 '||']: r#129
[#197 '!=']: r#130
[#197 '%']: r#130
[#197 '&&']: r#130
[#197 '&']: r#130
[#197 ')']: r#130
[#197 '*']: r#130
[#197 '+']: r#130
[#197 ',']: r#130
[#197 '-']: r#130
[#197 '/']: r#130
[#197 ':']: r#130
[#197 ';']: r#130
[#197 '<']: r#130
[#197 '<<']: r#130
[#197 '<=']: r#130
[#197 '==']: r#130
[#197 '>']: r#130
[#197 '>=']: r#130
[#197 '>>']: r#130
[#197 ']']: r#130
[#197 '^']: r#130
[#197 '{']: r#130
[#197 '|']: r#130
[#197 '||']: r#130
[#198 '!=']: r#131
[#198 '%']: r#131
[#198 '&&']: r#131
[#198 '&']: r#131
[#198 ')']: r#131
[#198 '*']: r#131
[#198 '+']: r#131
[#198 ',']: r#131
[#198 '-']: r#131
[#198 '/']: r#131
[#198 ':']: r#131
[#198 ';']: r#131
[#198 '<']: r#131
[#198 '<<']: r#131
[#198 '<=']: r#131
[#198 '==']: r#131
[#198 '>']: r#131
[#198 '>=']: r#131
[#198 '>>']: r#131
[#198 ']']: r#131
[#198 '^']: r#131
[#198 '{']: r#131
[#198 '|']: r#131
[#198 '||']: r#131
[#199 '!=']: r#132
[#199 '%']: r#132
[#199 '&&']: r#132
[#199 '&']: r#132
[#199 ')']: r#132
[#199 '*']: r#132
[#199 '+']: r#132
[#199 ',']: r#132
[#199 '-']: r#132
[#199 '/']: r#132
[#199 ':']: r#132
[#199 ';']: r#132
[#199 '<']: r#132
[#199 '<<']: r#132
[#199 '<=']: r#132
[#199 '==']: r#132
[#199 '>']: r#132
[#199 '>=']: r#132
[#199 '>>']: r#132
[#199 ']']: r#132
[#199 '^']: r#132
[#199 '{']: r#132
[#199 '|']: r#132
[#199 '||']: r#132
[#200 '!']: s#69
[#200 '&']: s#72
[#200 '(']: s#114
[#200 '*']: s#71
[#200 '-']: s#68
[#200 'array']: s#82
[#200 'bitcast']: s#77
[#200 'bool']: s#87
[#200 'f16']: s#116
[#200 'f32']: s#115
[#200 'false']: s#113
[#200 'i32']: s#117
[#200 'mat2x2']: s#98
[#200 'mat2x3']: s#99
[#200 'mat2x4']: s#100
[#200 'mat3x2']: s#101
[#200 'mat3x3']: s#102
[#200 'mat3x4']: s#103
[#200 'mat4x2']: s#104
[#200 'mat4x3']: s#105
[#200 'mat4x4']: s#106
[#200 'ptr']: s#119
[#200 'sampler']: s#133
[#200 'sampler_comparison']: s#134
[#200 'texture_1d']: s#140
[#200 'texture_2d']: s#141
[#200 'texture_2d_array']: s#142
[#200 'texture_3d']: s#143
[#200 'texture_cube']: s#144
[#200 'texture_cube_array']: s#145
[#200 'texture_depth_2d']: s#135
[#200 'texture_depth_2d_array']: s#136
[#200 'texture_depth_cube']: s#137
[#200 'texture_depth_cube_array']: s#138
[#200 'texture_depth_multisampled_2d']: s#139
[#200 'texture_multisampled_2d']: s#146
[#200 'texture_storage_1d']: s#147
[#200 'texture_storage_2d']: s#148
[#200 'texture_storage_2d_array']: s#149
[#200 'texture_storage_3d']: s#150
[#200 'true']: s#112
[#200 'u32']: s#118
[#200 'vec2']: s#95
[#200 'vec3']: s#96
[#200 'vec4']: s#97
[#200 '~']: s#70
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#200 /0[fh]/]: s#128
[#200 /0[iu]?/]: s#108
[#200 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#200 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#200 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#200 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#200 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#200 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#200 /[1-9][0-9]*[fh]/]: s#129
[#200 /[1-9][0-9]*[iu]?/]: s#109
[#201 '!']: r#133
[#201 '&']: r#133
[#201 '(']: r#133
[#201 '*']: r#133
[#201 '-']: r#133
[#201 'array']: r#133
[#201 'bitcast']: r#133
[#201 'bool']: r#133
[#201 'f16']: r#133
[#201 'f32']: r#133
[#201 'false']: r#133
[#201 'i32']: r#133
[#201 'mat2x2']: r#133
[#201 'mat2x3']: r#133
[#201 'mat2x4']: r#133
[#201 'mat3x2']: r#133
[#201 'mat3x3']: r#133
[#201 'mat3x4']: r#133
[#201 'mat4x2']: r#133
[#201 'mat4x3']: r#133
[#201 'mat4x4']: r#133
[#201 'ptr']: r#133
[#201 'sampler']: r#133
[#201 'sampler_comparison']: r#133
[#201 'texture_1d']: r#133
[#201 'texture_2d']: r#133
[#201 'texture_2d_array']: r#133
[#201 'texture_3d']: r#133
[#201 'texture_cube']: r#133
[#201 'texture_cube_array']: r#133
[#201 'texture_depth_2d']: r#133
[#201 'texture_depth_2d_array']: r#133
[#201 'texture_depth_cube']: r#133
[#201 'texture_depth_cube_array']: r#133
[#201 'texture_depth_multisampled_2d']: r#133
[#201 'texture_multisampled_2d']: r#133
[#201 'texture_storage_1d']: r#133
[#201 'texture_storage_2d']: r#133
[#201 'texture_storage_2d_array']: r#133
[#201 'texture_storage_3d']: r#133
[#201 'true']: r#133
[#201 'u32']: r#133
[#201 'vec2']: r#133
[#201 'vec3']: r#133
[#201 'vec4']: r#133
[#201 '~']: r#133
[#202 '!']: r#134
[#202 '&']: r#134
[#202 '(']: r#134
[#202 '*']: r#134
[#202 '-']: r#134
[#202 'array']: r#134
[#202 'bitcast']: r#134
[#202 'bool']: r#134
[#202 'f16']: r#134
[#202 'f32']: r#134
[#202 'false']: r#134
[#202 'i32']: r#134
[#202 'mat2x2']: r#134
[#202 'mat2x3']: r#134
[#202 'mat2x4']: r#134
[#202 'mat3x2']: r#134
[#202 'mat3x3']: r#134
[#202 'mat3x4']: r#134
[#202 'mat4x2']: r#134
[#202 'mat4x3']: r#134
[#202 'mat4x4']: r#134
[#202 'ptr']: r#134
[#202 'sampler']: r#134
[#202 'sampler_comparison']: r#134
[#202 'texture_1d']: r#134
[#202 'texture_2d']: r#134
[#202 'texture_2d_array']: r#134
[#202 'texture_3d']: r#134
[#202 'texture_cube']: r#134
[#202 'texture_cube_array']: r#134
[#202 'texture_depth_2d']: r#134
[#202 'texture_depth_2d_array']: r#134
[#202 'texture_depth_cube']: r#134
[#202 'texture_depth_cube_array']: r#134
[#202 'texture_depth_multisampled_2d']: r#134
[#202 'texture_multisampled_2d']: r#134
[#202 'texture_storage_1d']: r#134
[#202 'texture_storage_2d']: r#134
[#202 'texture_storage_2d_array']: r#134
[#202 'texture_storage_3d']: r#134
[#202 'true']: r#134
[#202 'u32']: r#134
[#202 'vec2']: r#134
[#202 'vec3']: r#134
[#202 'vec4']: r#134
[#202 '~']: r#134
[#203 '!']: r#135
[#203 '&']: r#135
[#203 '(']: r#135
[#203 '*']: r#135
[#203 '-']: r#135
[#203 'array']: r#135
[#203 'bitcast']: r#135
[#203 'bool']: r#135
[#203 'f16']: r#135
[#203 'f32']: r#135
[#203 'false']: r#135
[#203 'i32']: r#135
[#203 'mat2x2']: r#135
[#203 'mat2x3']: r#135
[#203 'mat2x4']: r#135
[#203 'mat3x2']: r#135
[#203 'mat3x3']: r#135
[#203 'mat3x4']: r#135
[#203 'mat4x2']: r#135
[#203 'mat4x3']: r#135
[#203 'mat4x4']: r#135
[#203 'ptr']: r#135
[#203 'sampler']: r#135
[#203 'sampler_comparison']: r#135
[#203 'texture_1d']: r#135
[#203 'texture_2d']: r#135
[#203 'texture_2d_array']: r#135
[#203 'texture_3d']: r#135
[#203 'texture_cube']: r#135
[#203 'texture_cube_array']: r#135
[#203 'texture_depth_2d']: r#135
[#203 'texture_depth_2d_array']: r#135
[#203 'texture_depth_cube']: r#135
[#203 'texture_depth_cube_array']: r#135
[#203 'texture_depth_multisampled_2d']: r#135
[#203 'texture_multisampled_2d']: r#135
[#203 'texture_storage_1d']: r#135
[#203 'texture_storage_2d']: r#135
[#203 'texture_storage_2d_array']: r#135
[#203 'texture_storage_3d']: r#135
[#203 'true']: r#135
[#203 'u32']: r#135
[#203 'vec2']: r#135
[#203 'vec3']: r#135
[#203 'vec4']: r#135
[#203 '~']: r#135
[#204 '!']: r#136
[#204 '&']: r#136
[#204 '(']: r#136
[#204 '*']: r#136
[#204 '-']: r#136
[#204 'array']: r#136
[#204 'bitcast']: r#136
[#204 'bool']: r#136
[#204 'f16']: r#136
[#204 'f32']: r#136
[#204 'false']: r#136
[#204 'i32']: r#136
[#204 'mat2x2']: r#136
[#204 'mat2x3']: r#136
[#204 'mat2x4']: r#136
[#204 'mat3x2']: r#136
[#204 'mat3x3']: r#136
[#204 'mat3x4']: r#136
[#204 'mat4x2']: r#136
[#204 'mat4x3']: r#136
[#204 'mat4x4']: r#136
[#204 'ptr']: r#136
[#204 'sampler']: r#136
[#204 'sampler_comparison']: r#136
[#204 'texture_1d']: r#136
[#204 'texture_2d']: r#136
[#204 'texture_2d_array']: r#136
[#204 'texture_3d']: r#136
[#204 'texture_cube']: r#136
[#204 'texture_cube_array']: r#136
[#204 'texture_depth_2d']: r#136
[#204 'texture_depth_2d_array']: r#136
[#204 'texture_depth_cube']: r#136
[#204 'texture_depth_cube_array']: r#136
[#204 'texture_depth_multisampled_2d']: r#136
[#204 'texture_multisampled_2d']: r#136
[#204 'texture_storage_1d']: r#136
[#204 'texture_storage_2d']: r#136
[#204 'texture_storage_2d_array']: r#136
[#204 'texture_storage_3d']: r#136
[#204 'true']: r#136
[#204 'u32']: r#136
[#204 'vec2']: r#136
[#204 'vec3']: r#136
[#204 'vec4']: r#136
[#204 '~']: r#136
[#205 '!']: r#137
[#205 '&']: r#137
[#205 '(']: r#137
[#205 '*']: r#137
[#205 '-']: r#137
[#205 'array']: r#137
[#205 'bitcast']: r#137
[#205 'bool']: r#137
[#205 'f16']: r#137
[#205 'f32']: r#137
[#205 'false']: r#137
[#205 'i32']: r#137
[#205 'mat2x2']: r#137
[#205 'mat2x3']: r#137
[#205 'mat2x4']: r#137
[#205 'mat3x2']: r#137
[#205 'mat3x3']: r#137
[#205 'mat3x4']: r#137
[#205 'mat4x2']: r#137
[#205 'mat4x3']: r#137
[#205 'mat4x4']: r#137
[#205 'ptr']: r#137
[#205 'sampler']: r#137
[#205 'sampler_comparison']: r#137
[#205 'texture_1d']: r#137
[#205 'texture_2d']: r#137
[#205 'texture_2d_array']: r#137
[#205 'texture_3d']: r#137
[#205 'texture_cube']: r#137
[#205 'texture_cube_array']: r#137
[#205 'texture_depth_2d']: r#137
[#205 'texture_depth_2d_array']: r#137
[#205 'texture_depth_cube']: r#137
[#205 'texture_depth_cube_array']: r#137
[#205 'texture_depth_multisampled_2d']: r#137
[#205 'texture_multisampled_2d']: r#137
[#205 'texture_storage_1d']: r#137
[#205 'texture_storage_2d']: r#137
[#205 'texture_storage_2d_array']: r#137
[#205 'texture_storage_3d']: r#137
[#205 'true']: r#137
[#205 'u32']: r#137
[#205 'vec2']: r#137
[#205 'vec3']: r#137
[#205 'vec4']: r#137
[#205 '~']: r#137
[#206 '!']: s#69
[#206 '&']: s#72
[#206 '(']: s#114
[#206 '*']: s#71
[#206 '-']: s#68
[#206 'array']: s#82
[#206 'bitcast']: s#77
[#206 'bool']: s#87
[#206 'f16']: s#116
[#206 'f32']: s#115
[#206 'false']: s#113
[#206 'i32']: s#117
[#206 'mat2x2']: s#98
[#206 'mat2x3']: s#99
[#206 'mat2x4']: s#100
[#206 'mat3x2']: s#101
[#206 'mat3x3']: s#102
[#206 'mat3x4']: s#103
[#206 'mat4x2']: s#104
[#206 'mat4x3']: s#105
[#206 'mat4x4']: s#106
[#206 'ptr']: s#119
[#206 'sampler']: s#133
[#206 'sampler_comparison']: s#134
[#206 'texture_1d']: s#140
[#206 'texture_2d']: s#141
[#206 'texture_2d_array']: s#142
[#206 'texture_3d']: s#143
[#206 'texture_cube']: s#144
[#206 'texture_cube_array']: s#145
[#206 'texture_depth_2d']: s#135
[#206 'texture_depth_2d_array']: s#136
[#206 'texture_depth_cube']: s#137
[#206 'texture_depth_cube_array']: s#138
[#206 'texture_depth_multisampled_2d']: s#139
[#206 'texture_multisampled_2d']: s#146
[#206 'texture_storage_1d']: s#147
[#206 'texture_storage_2d']: s#148
[#206 'texture_storage_2d_array']: s#149
[#206 'texture_storage_3d']: s#150
[#206 'true']: s#112
[#206 'u32']: s#118
[#206 'vec2']: s#95
[#206 'vec3']: s#96
[#206 'vec4']: s#97
[#206 '~']: s#70
[#206 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#206 /0[fh]/]: s#128
[#206 /0[iu]?/]: s#108
[#206 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#206 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#206 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#206 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#206 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#206 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#206 /[1-9][0-9]*[fh]/]: s#129
[#206 /[1-9][0-9]*[iu]?/]: s#109
[#207 '!']: s#69
[#207 '&']: s#72
[#207 '(']: s#114
[#207 '*']: s#71
[#207 '-']: s#68
[#207 'array']: s#82
[#207 'bitcast']: s#77
[#207 'bool']: s#87
[#207 'f16']: s#116
[#207 'f32']: s#115
[#207 'false']: s#113
[#207 'i32']: s#117
[#207 'mat2x2']: s#98
[#207 'mat2x3']: s#99
[#207 'mat2x4']: s#100
[#207 'mat3x2']: s#101
[#207 'mat3x3']: s#102
[#207 'mat3x4']: s#103
[#207 'mat4x2']: s#104
[#207 'mat4x3']: s#105
[#207 'mat4x4']: s#106
[#207 'ptr']: s#119
[#207 'sampler']: s#133
[#207 'sampler_comparison']: s#134
[#207 'texture_1d']: s#140
[#207 'texture_2d']: s#141
[#207 'texture_2d_array']: s#142
[#207 'texture_3d']: s#143
[#207 'texture_cube']: s#144
[#207 'texture_cube_array']: s#145
[#207 'texture_depth_2d']: s#135
[#207 'texture_depth_2d_array']: s#136
[#207 'texture_depth_cube']: s#137
[#207 'texture_depth_cube_array']: s#138
[#207 'texture_depth_multisampled_2d']: s#139
[#207 'texture_multisampled_2d']: s#146
[#207 'texture_storage_1d']: s#147
[#207 'texture_storage_2d']: s#148
[#207 'texture_storage_2d_array']: s#149
[#207 'texture_storage_3d']: s#150
[#207 'true']: s#112
[#207 'u32']: s#118
[#207 'vec2']: s#95
[#207 'vec3']: s#96
[#207 'vec4']: s#97
[#207 '~']: s#70
[#207 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#207 /0[fh]/]: s#128
[#207 /0[iu]?/]: s#108
[#207 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#207 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#207 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#207 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#207 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#207 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#207 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#207 /[1-9][0-9]*[fh]/]: s#129
[#207 /[1-9][0-9]*[iu]?/]: s#109
[#208 '!']: r#138
[#208 '&']: r#138
[#208 '(']: r#138
[#208 '*']: r#138
[#208 '-']: r#138
[#208 'array']: r#138
[#208 'bitcast']: r#138
[#208 'bool']: r#138
[#208 'f16']: r#138
[#208 'f32']: r#138
[#208 'false']: r#138
[#208 'i32']: r#138
[#208 'mat2x2']: r#138
[#208 'mat2x3']: r#138
[#208 'mat2x4']: r#138
[#208 'mat3x2']: r#138
[#208 'mat3x3']: r#138
[#208 'mat3x4']: r#138
[#208 'mat4x2']: r#138
[#208 'mat4x3']: r#138
[#208 'mat4x4']: r#138
[#208 'ptr']: r#138
[#208 'sampler']: r#138
[#208 'sampler_comparison']: r#138
[#208 'texture_1d']: r#138
[#208 'texture_2d']: r#138
[#208 'texture_2d_array']: r#138
[#208 'texture_3d']: r#138
[#208 'texture_cube']: r#138
[#208 'texture_cube_array']: r#138
[#208 'texture_depth_2d']: r#138
[#208 'texture_depth_2d_array']: r#138
[#208 'texture_depth_cube']: r#138
[#208 'texture_depth_cube_array']: r#138
[#208 'texture_depth_multisampled_2d']: r#138
[#208 'texture_multisampled_2d']: r#138
[#208 'texture_storage_1d']: r#138
[#208 'texture_storage_2d']: r#138
[#208 'texture_storage_2d_array']: r#138
[#208 'texture_storage_3d']: r#138
[#208 'true']: r#138
[#208 'u32']: r#138
[#208 'vec2']: r#138
[#208 'vec3']: r#138
[#208 'vec4']: r#138
[#208 '~']: r#138
[#209 '!']: r#139
[#209 '&']: r#139
[#209 '(']: r#139
[#209 '*']: r#139
[#209 '-']: r#139
[#209 'array']: r#139
[#209 'bitcast']: r#139
[#209 'bool']: r#139
[#209 'f16']: r#139
[#209 'f32']: r#139
[#209 'false']: r#139
[#209 'i32']: r#139
[#209 'mat2x2']: r#139
[#209 'mat2x3']: r#139
[#209 'mat2x4']: r#139
[#209 'mat3x2']: r#139
[#209 'mat3x3']: r#139
[#209 'mat3x4']: r#139
[#209 'mat4x2']: r#139
[#209 'mat4x3']: r#139
[#209 'mat4x4']: r#139
[#209 'ptr']: r#139
[#209 'sampler']: r#139
[#209 'sampler_comparison']: r#139
[#209 'texture_1d']: r#139
[#209 'texture_2d']: r#139
[#209 'texture_2d_array']: r#139
[#209 'texture_3d']: r#139
[#209 'texture_cube']: r#139
[#209 'texture_cube_array']: r#139
[#209 'texture_depth_2d']: r#139
[#209 'texture_depth_2d_array']: r#139
[#209 'texture_depth_cube']: r#139
[#209 'texture_depth_cube_array']: r#139
[#209 'texture_depth_multisampled_2d']: r#139
[#209 'texture_multisampled_2d']: r#139
[#209 'texture_storage_1d']: r#139
[#209 'texture_storage_2d']: r#139
[#209 'texture_storage_2d_array']: r#139
[#209 'texture_storage_3d']: r#139
[#209 'true']: r#139
[#209 'u32']: r#139
[#209 'vec2']: r#139
[#209 'vec3']: r#139
[#209 'vec4']: r#139
[#209 '~']: r#139
[#210 '!']: s#69
[#210 '&']: s#72
[#210 '(']: s#114
[#210 '*']: s#71
[#210 '-']: s#68
[#210 'array']: s#82
[#210 'bitcast']: s#77
[#210 'bool']: s#87
[#210 'f16']: s#116
[#210 'f32']: s#115
[#210 'false']: s#113
[#210 'i32']: s#117
[#210 'mat2x2']: s#98
[#210 'mat2x3']: s#99
[#210 'mat2x4']: s#100
[#210 'mat3x2']: s#101
[#210 'mat3x3']: s#102
[#210 'mat3x4']: s#103
[#210 'mat4x2']: s#104
[#210 'mat4x3']: s#105
[#210 'mat4x4']: s#106
[#210 'ptr']: s#119
[#210 'sampler']: s#133
[#210 'sampler_comparison']: s#134
[#210 'texture_1d']: s#140
[#210 'texture_2d']: s#141
[#210 'texture_2d_array']: s#142
[#210 'texture_3d']: s#143
[#210 'texture_cube']: s#144
[#210 'texture_cube_array']: s#145
[#210 'texture_depth_2d']: s#135
[#210 'texture_depth_2d_array']: s#136
[#210 'texture_depth_cube']: s#137
[#210 'texture_depth_cube_array']: s#138
[#210 'texture_depth_multisampled_2d']: s#139
[#210 'texture_multisampled_2d']: s#146
[#210 'texture_storage_1d']: s#147
[#210 'texture_storage_2d']: s#148
[#210 'texture_storage_2d_array']: s#149
[#210 'texture_storage_3d']: s#150
[#210 'true']: s#112
[#210 'u32']: s#118
[#210 'vec2']: s#95
[#210 'vec3']: s#96
[#210 'vec4']: s#97
[#210 '~']: s#70
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#210 /0[fh]/]: s#128
[#210 /0[iu]?/]: s#108
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#210 /[1-9][0-9]*[fh]/]: s#129
[#210 /[1-9][0-9]*[iu]?/]: s#109
[#211 '!']: r#140
[#211 '&']: r#140
[#211 '(']: r#140
[#211 '*']: r#140
[#211 '-']: r#140
[#211 'array']: r#140
[#211 'bitcast']: r#140
[#211 'bool']: r#140
[#211 'f16']: r#140
[#211 'f32']: r#140
[#211 'false']: r#140
[#211 'i32']: r#140
[#211 'mat2x2']: r#140
[#211 'mat2x3']: r#140
[#211 'mat2x4']: r#140
[#211 'mat3x2']: r#140
[#211 'mat3x3']: r#140
[#211 'mat3x4']: r#140
[#211 'mat4x2']: r#140
[#211 'mat4x3']: r#140
[#211 'mat4x4']: r#140
[#211 'ptr']: r#140
[#211 'sampler']: r#140
[#211 'sampler_comparison']: r#140
[#211 'texture_1d']: r#140
[#211 'texture_2d']: r#140
[#211 'texture_2d_array']: r#140
[#211 'texture_3d']: r#140
[#211 'texture_cube']: r#140
[#211 'texture_cube_array']: r#140
[#211 'texture_depth_2d']: r#140
[#211 'texture_depth_2d_array']: r#140
[#211 'texture_depth_cube']: r#140
[#211 'texture_depth_cube_array']: r#140
[#211 'texture_depth_multisampled_2d']: r#140
[#211 'texture_multisampled_2d']: r#140
[#211 'texture_storage_1d']: r#140
[#211 'texture_storage_2d']: r#140
[#211 'texture_storage_2d_array']: r#140
[#211 'texture_storage_3d']: r#140
[#211 'true']: r#140
[#211 'u32']: r#140
[#211 'vec2']: r#140
[#211 'vec3']: r#140
[#211 'vec4']: r#140
[#211 '~']: r#140
[#212 '!']: r#141
[#212 '&']: r#141
[#212 '(']: r#141
[#212 '*']: r#141
[#212 '-']: r#141
[#212 'array']: r#141
[#212 'bitcast']: r#141
[#212 'bool']: r#141
[#212 'f16']: r#141
[#212 'f32']: r#141
[#212 'false']: r#141
[#212 'i32']: r#141
[#212 'mat2x2']: r#141
[#212 'mat2x3']: r#141
[#212 'mat2x4']: r#141
[#212 'mat3x2']: r#141
[#212 'mat3x3']: r#141
[#212 'mat3x4']: r#141
[#212 'mat4x2']: r#141
[#212 'mat4x3']: r#141
[#212 'mat4x4']: r#141
[#212 'ptr']: r#141
[#212 'sampler']: r#141
[#212 'sampler_comparison']: r#141
[#212 'texture_1d']: r#141
[#212 'texture_2d']: r#141
[#212 'texture_2d_array']: r#141
[#212 'texture_3d']: r#141
[#212 'texture_cube']: r#141
[#212 'texture_cube_array']: r#141
[#212 'texture_depth_2d']: r#141
[#212 'texture_depth_2d_array']: r#141
[#212 'texture_depth_cube']: r#141
[#212 'texture_depth_cube_array']: r#141
[#212 'texture_depth_multisampled_2d']: r#141
[#212 'texture_multisampled_2d']: r#141
[#212 'texture_storage_1d']: r#141
[#212 'texture_storage_2d']: r#141
[#212 'texture_storage_2d_array']: r#141
[#212 'texture_storage_3d']: r#141
[#212 'true']: r#141
[#212 'u32']: r#141
[#212 'vec2']: r#141
[#212 'vec3']: r#141
[#212 'vec4']: r#141
[#212 '~']: r#141
[#213 '!']: r#142
[#213 '&']: r#142
[#213 '(']: r#142
[#213 '*']: r#142
[#213 '-']: r#142
[#213 'array']: r#142
[#213 'bitcast']: r#142
[#213 'bool']: r#142
[#213 'f16']: r#142
[#213 'f32']: r#142
[#213 'false']: r#142
[#213 'i32']: r#142
[#213 'mat2x2']: r#142
[#213 'mat2x3']: r#142
[#213 'mat2x4']: r#142
[#213 'mat3x2']: r#142
[#213 'mat3x3']: r#142
[#213 'mat3x4']: r#142
[#213 'mat4x2']: r#142
[#213 'mat4x3']: r#142
[#213 'mat4x4']: r#142
[#213 'ptr']: r#142
[#213 'sampler']: r#142
[#213 'sampler_comparison']: r#142
[#213 'texture_1d']: r#142
[#213 'texture_2d']: r#142
[#213 'texture_2d_array']: r#142
[#213 'texture_3d']: r#142
[#213 'texture_cube']: r#142
[#213 'texture_cube_array']: r#142
[#213 'texture_depth_2d']: r#142
[#213 'texture_depth_2d_array']: r#142
[#213 'texture_depth_cube']: r#142
[#213 'texture_depth_cube_array']: r#142
[#213 'texture_depth_multisampled_2d']: r#142
[#213 'texture_multisampled_2d']: r#142
[#213 'texture_storage_1d']: r#142
[#213 'texture_storage_2d']: r#142
[#213 'texture_storage_2d_array']: r#142
[#213 'texture_storage_3d']: r#142
[#213 'true']: r#142
[#213 'u32']: r#142
[#213 'vec2']: r#142
[#213 'vec3']: r#142
[#213 'vec4']: r#142
[#213 '~']: r#142
[#214 '!']: s#69
[#214 '&']: s#72
[#214 '(']: s#114
[#214 '*']: s#71
[#214 '-']: s#68
[#214 'array']: s#82
[#214 'bitcast']: s#77
[#214 'bool']: s#87
[#214 'f16']: s#116
[#214 'f32']: s#115
[#214 'false']: s#113
[#214 'i32']: s#117
[#214 'mat2x2']: s#98
[#214 'mat2x3']: s#99
[#214 'mat2x4']: s#100
[#214 'mat3x2']: s#101
[#214 'mat3x3']: s#102
[#214 'mat3x4']: s#103
[#214 'mat4x2']: s#104
[#214 'mat4x3']: s#105
[#214 'mat4x4']: s#106
[#214 'ptr']: s#119
[#214 'sampler']: s#133
[#214 'sampler_comparison']: s#134
[#214 'texture_1d']: s#140
[#214 'texture_2d']: s#141
[#214 'texture_2d_array']: s#142
[#214 'texture_3d']: s#143
[#214 'texture_cube']: s#144
[#214 'texture_cube_array']: s#145
[#214 'texture_depth_2d']: s#135
[#214 'texture_depth_2d_array']: s#136
[#214 'texture_depth_cube']: s#137
[#214 'texture_depth_cube_array']: s#138
[#214 'texture_depth_multisampled_2d']: s#139
[#214 'texture_multisampled_2d']: s#146
[#214 'texture_storage_1d']: s#147
[#214 'texture_storage_2d']: s#148
[#214 'texture_storage_2d_array']: s#149
[#214 'texture_storage_3d']: s#150
[#214 'true']: s#112
[#214 'u32']: s#118
[#214 'vec2']: s#95
[#214 'vec3']: s#96
[#214 'vec4']: s#97
[#214 '~']: s#70
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#214 /0[fh]/]: s#128
[#214 /0[iu]?/]: s#108
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#214 /[1-9][0-9]*[fh]/]: s#129
[#214 /[1-9][0-9]*[iu]?/]: s#109
[#215 '!']: r#143
[#215 '&']: r#143
[#215 '(']: r#143
[#215 '*']: r#143
[#215 '-']: r#143
[#215 'array']: r#143
[#215 'bitcast']: r#143
[#215 'bool']: r#143
[#215 'f16']: r#143
[#215 'f32']: r#143
[#215 'false']: r#143
[#215 'i32']: r#143
[#215 'mat2x2']: r#143
[#215 'mat2x3']: r#143
[#215 'mat2x4']: r#143
[#215 'mat3x2']: r#143
[#215 'mat3x3']: r#143
[#215 'mat3x4']: r#143
[#215 'mat4x2']: r#143
[#215 'mat4x3']: r#143
[#215 'mat4x4']: r#143
[#215 'ptr']: r#143
[#215 'sampler']: r#143
[#215 'sampler_comparison']: r#143
[#215 'texture_1d']: r#143
[#215 'texture_2d']: r#143
[#215 'texture_2d_array']: r#143
[#215 'texture_3d']: r#143
[#215 'texture_cube']: r#143
[#215 'texture_cube_array']: r#143
[#215 'texture_depth_2d']: r#143
[#215 'texture_depth_2d_array']: r#143
[#215 'texture_depth_cube']: r#143
[#215 'texture_depth_cube_array']: r#143
[#215 'texture_depth_multisampled_2d']: r#143
[#215 'texture_multisampled_2d']: r#143
[#215 'texture_storage_1d']: r#143
[#215 'texture_storage_2d']: r#143
[#215 'texture_storage_2d_array']: r#143
[#215 'texture_storage_3d']: r#143
[#215 'true']: r#143
[#215 'u32']: r#143
[#215 'vec2']: r#143
[#215 'vec3']: r#143
[#215 'vec4']: r#143
[#215 '~']: r#143
[#216 '!']: s#69
[#216 '&']: s#72
[#216 '(']: s#114
[#216 '*']: s#71
[#216 '-']: s#68
[#216 'array']: s#82
[#216 'bitcast']: s#77
[#216 'bool']: s#87
[#216 'f16']: s#116
[#216 'f32']: s#115
[#216 'false']: s#113
[#216 'i32']: s#117
[#216 'mat2x2']: s#98
[#216 'mat2x3']: s#99
[#216 'mat2x4']: s#100
[#216 'mat3x2']: s#101
[#216 'mat3x3']: s#102
[#216 'mat3x4']: s#103
[#216 'mat4x2']: s#104
[#216 'mat4x3']: s#105
[#216 'mat4x4']: s#106
[#216 'ptr']: s#119
[#216 'sampler']: s#133
[#216 'sampler_comparison']: s#134
[#216 'texture_1d']: s#140
[#216 'texture_2d']: s#141
[#216 'texture_2d_array']: s#142
[#216 'texture_3d']: s#143
[#216 'texture_cube']: s#144
[#216 'texture_cube_array']: s#145
[#216 'texture_depth_2d']: s#135
[#216 'texture_depth_2d_array']: s#136
[#216 'texture_depth_cube']: s#137
[#216 'texture_depth_cube_array']: s#138
[#216 'texture_depth_multisampled_2d']: s#139
[#216 'texture_multisampled_2d']: s#146
[#216 'texture_storage_1d']: s#147
[#216 'texture_storage_2d']: s#148
[#216 'texture_storage_2d_array']: s#149
[#216 'texture_storage_3d']: s#150
[#216 'true']: s#112
[#216 'u32']: s#118
[#216 'vec2']: s#95
[#216 'vec3']: s#96
[#216 'vec4']: s#97
[#216 '~']: s#70
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#216 /0[fh]/]: s#128
[#216 /0[iu]?/]: s#108
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#216 /[1-9][0-9]*[fh]/]: s#129
[#216 /[1-9][0-9]*[iu]?/]: s#109
[#217 '!']: r#144
[#217 '&']: r#144
[#217 '(']: r#144
[#217 '*']: r#144
[#217 '-']: r#144
[#217 'array']: r#144
[#217 'bitcast']: r#144
[#217 'bool']: r#144
[#217 'f16']: r#144
[#217 'f32']: r#144
[#217 'false']: r#144
[#217 'i32']: r#144
[#217 'mat2x2']: r#144
[#217 'mat2x3']: r#144
[#217 'mat2x4']: r#144
[#217 'mat3x2']: r#144
[#217 'mat3x3']: r#144
[#217 'mat3x4']: r#144
[#217 'mat4x2']: r#144
[#217 'mat4x3']: r#144
[#217 'mat4x4']: r#144
[#217 'ptr']: r#144
[#217 'sampler']: r#144
[#217 'sampler_comparison']: r#144
[#217 'texture_1d']: r#144
[#217 'texture_2d']: r#144
[#217 'texture_2d_array']: r#144
[#217 'texture_3d']: r#144
[#217 'texture_cube']: r#144
[#217 'texture_cube_array']: r#144
[#217 'texture_depth_2d']: r#144
[#217 'texture_depth_2d_array']: r#144
[#217 'texture_depth_cube']: r#144
[#217 'texture_depth_cube_array']: r#144
[#217 'texture_depth_multisampled_2d']: r#144
[#217 'texture_multisampled_2d']: r#144
[#217 'texture_storage_1d']: r#144
[#217 'texture_storage_2d']: r#144
[#217 'texture_storage_2d_array']: r#144
[#217 'texture_storage_3d']: r#144
[#217 'true']: r#144
[#217 'u32']: r#144
[#217 'vec2']: r#144
[#217 'vec3']: r#144
[#217 'vec4']: r#144
[#217 '~']: r#144
[#218 '!']: s#69
[#218 '&']: s#72
[#218 '(']: s#114
[#218 '*']: s#71
[#218 '-']: s#68
[#218 'array']: s#82
[#218 'bitcast']: s#77
[#218 'bool']: s#87
[#218 'f16']: s#116
[#218 'f32']: s#115
[#218 'false']: s#113
[#218 'i32']: s#117
[#218 'mat2x2']: s#98
[#218 'mat2x3']: s#99
[#218 'mat2x4']: s#100
[#218 'mat3x2']: s#101
[#218 'mat3x3']: s#102
[#218 'mat3x4']: s#103
[#218 'mat4x2']: s#104
[#218 'mat4x3']: s#105
[#218 'mat4x4']: s#106
[#218 'ptr']: s#119
[#218 'sampler']: s#133
[#218 'sampler_comparison']: s#134
[#218 'texture_1d']: s#140
[#218 'texture_2d']: s#141
[#218 'texture_2d_array']: s#142
[#218 'texture_3d']: s#143
[#218 'texture_cube']: s#144
[#218 'texture_cube_array']: s#145
[#218 'texture_depth_2d']: s#135
[#218 'texture_depth_2d_array']: s#136
[#218 'texture_depth_cube']: s#137
[#218 'texture_depth_cube_array']: s#138
[#218 'texture_depth_multisampled_2d']: s#139
[#218 'texture_multisampled_2d']: s#146
[#218 'texture_storage_1d']: s#147
[#218 'texture_storage_2d']: s#148
[#218 'texture_storage_2d_array']: s#149
[#218 'texture_storage_3d']: s#150
[#218 'true']: s#112
[#218 'u32']: s#118
[#218 'vec2']: s#95
[#218 'vec3']: s#96
[#218 'vec4']: s#97
[#218 '~']: s#70
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#218 /0[fh]/]: s#128
[#218 /0[iu]?/]: s#108
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#218 /[1-9][0-9]*[fh]/]: s#129
[#218 /[1-9][0-9]*[iu]?/]: s#109
[#219 '!']: s#69
[#219 '&']: s#72
[#219 '(']: s#114
[#219 '*']: s#71
[#219 '-']: s#68
[#219 'array']: s#82
[#219 'bitcast']: s#77
[#219 'bool']: s#87
[#219 'f16']: s#116
[#219 'f32']: s#115
[#219 'false']: s#113
[#219 'i32']: s#117
[#219 'mat2x2']: s#98
[#219 'mat2x3']: s#99
[#219 'mat2x4']: s#100
[#219 'mat3x2']: s#101
[#219 'mat3x3']: s#102
[#219 'mat3x4']: s#103
[#219 'mat4x2']: s#104
[#219 'mat4x3']: s#105
[#219 'mat4x4']: s#106
[#219 'ptr']: s#119
[#219 'sampler']: s#133
[#219 'sampler_comparison']: s#134
[#219 'texture_1d']: s#140
[#219 'texture_2d']: s#141
[#219 'texture_2d_array']: s#142
[#219 'texture_3d']: s#143
[#219 'texture_cube']: s#144
[#219 'texture_cube_array']: s#145
[#219 'texture_depth_2d']: s#135
[#219 'texture_depth_2d_array']: s#136
[#219 'texture_depth_cube']: s#137
[#219 'texture_depth_cube_array']: s#138
[#219 'texture_depth_multisampled_2d']: s#139
[#219 'texture_multisampled_2d']: s#146
[#219 'texture_storage_1d']: s#147
[#219 'texture_storage_2d']: s#148
[#219 'texture_storage_2d_array']: s#149
[#219 'texture_storage_3d']: s#150
[#219 'true']: s#112
[#219 'u32']: s#118
[#219 'vec2']: s#95
[#219 'vec3']: s#96
[#219 'vec4']: s#97
[#219 '~']: s#70
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#219 /0[fh]/]: s#128
[#219 /0[iu]?/]: s#108
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#219 /[1-9][0-9]*[fh]/]: s#129
[#219 /[1-9][0-9]*[iu]?/]: s#109
[#220 '!']: s#69
[#220 '&']: s#72
[#220 '(']: s#114
[#220 '*']: s#71
[#220 '-']: s#68
[#220 'array']: s#82
[#220 'bitcast']: s#77
[#220 'bool']: s#87
[#220 'f16']: s#116
[#220 'f32']: s#115
[#220 'false']: s#113
[#220 'i32']: s#117
[#220 'mat2x2']: s#98
[#220 'mat2x3']: s#99
[#220 'mat2x4']: s#100
[#220 'mat3x2']: s#101
[#220 'mat3x3']: s#102
[#220 'mat3x4']: s#103
[#220 'mat4x2']: s#104
[#220 'mat4x3']: s#105
[#220 'mat4x4']: s#106
[#220 'ptr']: s#119
[#220 'sampler']: s#133
[#220 'sampler_comparison']: s#134
[#220 'texture_1d']: s#140
[#220 'texture_2d']: s#141
[#220 'texture_2d_array']: s#142
[#220 'texture_3d']: s#143
[#220 'texture_cube']: s#144
[#220 'texture_cube_array']: s#145
[#220 'texture_depth_2d']: s#135
[#220 'texture_depth_2d_array']: s#136
[#220 'texture_depth_cube']: s#137
[#220 'texture_depth_cube_array']: s#138
[#220 'texture_depth_multisampled_2d']: s#139
[#220 'texture_multisampled_2d']: s#146
[#220 'texture_storage_1d']: s#147
[#220 'texture_storage_2d']: s#148
[#220 'texture_storage_2d_array']: s#149
[#220 'texture_storage_3d']: s#150
[#220 'true']: s#112
[#220 'u32']: s#118
[#220 'vec2']: s#95
[#220 'vec3']: s#96
[#220 'vec4']: s#97
[#220 '~']: s#70
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#220 /0[fh]/]: s#128
[#220 /0[iu]?/]: s#108
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#220 /[1-9][0-9]*[fh]/]: s#129
[#220 /[1-9][0-9]*[iu]?/]: s#109
[#221 '!']: s#69
[#221 '&']: s#72
[#221 '(']: s#114
[#221 '*']: s#71
[#221 '-']: s#68
[#221 'array']: s#82
[#221 'bitcast']: s#77
[#221 'bool']: s#87
[#221 'f16']: s#116
[#221 'f32']: s#115
[#221 'false']: s#113
[#221 'i32']: s#117
[#221 'mat2x2']: s#98
[#221 'mat2x3']: s#99
[#221 'mat2x4']: s#100
[#221 'mat3x2']: s#101
[#221 'mat3x3']: s#102
[#221 'mat3x4']: s#103
[#221 'mat4x2']: s#104
[#221 'mat4x3']: s#105
[#221 'mat4x4']: s#106
[#221 'ptr']: s#119
[#221 'sampler']: s#133
[#221 'sampler_comparison']: s#134
[#221 'texture_1d']: s#140
[#221 'texture_2d']: s#141
[#221 'texture_2d_array']: s#142
[#221 'texture_3d']: s#143
[#221 'texture_cube']: s#144
[#221 'texture_cube_array']: s#145
[#221 'texture_depth_2d']: s#135
[#221 'texture_depth_2d_array']: s#136
[#221 'texture_depth_cube']: s#137
[#221 'texture_depth_cube_array']: s#138
[#221 'texture_depth_multisampled_2d']: s#139
[#221 'texture_multisampled_2d']: s#146
[#221 'texture_storage_1d']: s#147
[#221 'texture_storage_2d']: s#148
[#221 'texture_storage_2d_array']: s#149
[#221 'texture_storage_3d']: s#150
[#221 'true']: s#112
[#221 'u32']: s#118
[#221 'vec2']: s#95
[#221 'vec3']: s#96
[#221 'vec4']: s#97
[#221 '~']: s#70
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#221 /0[fh]/]: s#128
[#221 /0[iu]?/]: s#108
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#221 /[1-9][0-9]*[fh]/]: s#129
[#221 /[1-9][0-9]*[iu]?/]: s#109
[#222 '!']: s#69
[#222 '&']: s#72
[#222 '(']: s#114
[#222 '*']: s#71
[#222 '-']: s#68
[#222 'array']: s#82
[#222 'bitcast']: s#77
[#222 'bool']: s#87
[#222 'f16']: s#116
[#222 'f32']: s#115
[#222 'false']: s#113
[#222 'i32']: s#117
[#222 'mat2x2']: s#98
[#222 'mat2x3']: s#99
[#222 'mat2x4']: s#100
[#222 'mat3x2']: s#101
[#222 'mat3x3']: s#102
[#222 'mat3x4']: s#103
[#222 'mat4x2']: s#104
[#222 'mat4x3']: s#105
[#222 'mat4x4']: s#106
[#222 'ptr']: s#119
[#222 'sampler']: s#133
[#222 'sampler_comparison']: s#134
[#222 'texture_1d']: s#140
[#222 'texture_2d']: s#141
[#222 'texture_2d_array']: s#142
[#222 'texture_3d']: s#143
[#222 'texture_cube']: s#144
[#222 'texture_cube_array']: s#145
[#222 'texture_depth_2d']: s#135
[#222 'texture_depth_2d_array']: s#136
[#222 'texture_depth_cube']: s#137
[#222 'texture_depth_cube_array']: s#138
[#222 'texture_depth_multisampled_2d']: s#139
[#222 'texture_multisampled_2d']: s#146
[#222 'texture_storage_1d']: s#147
[#222 'texture_storage_2d']: s#148
[#222 'texture_storage_2d_array']: s#149
[#222 'texture_storage_3d']: s#150
[#222 'true']: s#112
[#222 'u32']: s#118
[#222 'vec2']: s#95
[#222 'vec3']: s#96
[#222 'vec4']: s#97
[#222 '~']: s#70
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#222 /0[fh]/]: s#128
[#222 /0[iu]?/]: s#108
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#222 /[1-9][0-9]*[fh]/]: s#129
[#222 /[1-9][0-9]*[iu]?/]: s#109
[#223 '!']: s#69
[#223 '&']: s#72
[#223 '(']: s#114
[#223 '*']: s#71
[#223 '-']: s#68
[#223 'array']: s#82
[#223 'bitcast']: s#77
[#223 'bool']: s#87
[#223 'f16']: s#116
[#223 'f32']: s#115
[#223 'false']: s#113
[#223 'i32']: s#117
[#223 'mat2x2']: s#98
[#223 'mat2x3']: s#99
[#223 'mat2x4']: s#100
[#223 'mat3x2']: s#101
[#223 'mat3x3']: s#102
[#223 'mat3x4']: s#103
[#223 'mat4x2']: s#104
[#223 'mat4x3']: s#105
[#223 'mat4x4']: s#106
[#223 'ptr']: s#119
[#223 'sampler']: s#133
[#223 'sampler_comparison']: s#134
[#223 'texture_1d']: s#140
[#223 'texture_2d']: s#141
[#223 'texture_2d_array']: s#142
[#223 'texture_3d']: s#143
[#223 'texture_cube']: s#144
[#223 'texture_cube_array']: s#145
[#223 'texture_depth_2d']: s#135
[#223 'texture_depth_2d_array']: s#136
[#223 'texture_depth_cube']: s#137
[#223 'texture_depth_cube_array']: s#138
[#223 'texture_depth_multisampled_2d']: s#139
[#223 'texture_multisampled_2d']: s#146
[#223 'texture_storage_1d']: s#147
[#223 'texture_storage_2d']: s#148
[#223 'texture_storage_2d_array']: s#149
[#223 'texture_storage_3d']: s#150
[#223 'true']: s#112
[#223 'u32']: s#118
[#223 'vec2']: s#95
[#223 'vec3']: s#96
[#223 'vec4']: s#97
[#223 '~']: s#70
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#223 /0[fh]/]: s#128
[#223 /0[iu]?/]: s#108
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#223 /[1-9][0-9]*[fh]/]: s#129
[#223 /[1-9][0-9]*[iu]?/]: s#109
[#224 '!']: s#69
[#224 '&']: s#72
[#224 '(']: s#114
[#224 '*']: s#71
[#224 '-']: s#68
[#224 'array']: s#82
[#224 'bitcast']: s#77
[#224 'bool']: s#87
[#224 'f16']: s#116
[#224 'f32']: s#115
[#224 'false']: s#113
[#224 'i32']: s#117
[#224 'mat2x2']: s#98
[#224 'mat2x3']: s#99
[#224 'mat2x4']: s#100
[#224 'mat3x2']: s#101
[#224 'mat3x3']: s#102
[#224 'mat3x4']: s#103
[#224 'mat4x2']: s#104
[#224 'mat4x3']: s#105
[#224 'mat4x4']: s#106
[#224 'ptr']: s#119
[#224 'sampler']: s#133
[#224 'sampler_comparison']: s#134
[#224 'texture_1d']: s#140
[#224 'texture_2d']: s#141
[#224 'texture_2d_array']: s#142
[#224 'texture_3d']: s#143
[#224 'texture_cube']: s#144
[#224 'texture_cube_array']: s#145
[#224 'texture_depth_2d']: s#135
[#224 'texture_depth_2d_array']: s#136
[#224 'texture_depth_cube']: s#137
[#224 'texture_depth_cube_array']: s#138
[#224 'texture_depth_multisampled_2d']: s#139
[#224 'texture_multisampled_2d']: s#146
[#224 'texture_storage_1d']: s#147
[#224 'texture_storage_2d']: s#148
[#224 'texture_storage_2d_array']: s#149
[#224 'texture_storage_3d']: s#150
[#224 'true']: s#112
[#224 'u32']: s#118
[#224 'vec2']: s#95
[#224 'vec3']: s#96
[#224 'vec4']: s#97
[#224 '~']: s#70
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#224 /0[fh]/]: s#128
[#224 /0[iu]?/]: s#108
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#224 /[1-9][0-9]*[fh]/]: s#129
[#224 /[1-9][0-9]*[iu]?/]: s#109
[#225 '!']: r#145
[#225 '&']: r#145
[#225 '(']: r#145
[#225 ')']: r#145
[#225 '*']: r#145
[#225 ',']: r#145
[#225 '-']: r#145
[#225 ';']: r#145
[#225 '=']: r#145
[#225 '>']: r#145
[#225 'array']: r#145
[#225 'bitcast']: r#145
[#225 'bool']: r#145
[#225 'f16']: r#145
[#225 'f32']: r#145
[#225 'false']: r#145
[#225 'i32']: r#145
[#225 'mat2x2']: r#145
[#225 'mat2x3']: r#145
[#225 'mat2x4']: r#145
[#225 'mat3x2']: r#145
[#225 'mat3x3']: r#145
[#225 'mat3x4']: r#145
[#225 'mat4x2']: r#145
[#225 'mat4x3']: r#145
[#225 'mat4x4']: r#145
[#225 'ptr']: r#145
[#225 'sampler']: r#145
[#225 'sampler_comparison']: r#145
[#225 'texture_1d']: r#145
[#225 'texture_2d']: r#145
[#225 'texture_2d_array']: r#145
[#225 'texture_3d']: r#145
[#225 'texture_cube']: r#145
[#225 'texture_cube_array']: r#145
[#225 'texture_depth_2d']: r#145
[#225 'texture_depth_2d_array']: r#145
[#225 'texture_depth_cube']: r#145
[#225 'texture_depth_cube_array']: r#145
[#225 'texture_depth_multisampled_2d']: r#145
[#225 'texture_multisampled_2d']: r#145
[#225 'texture_storage_1d']: r#145
[#225 'texture_storage_2d']: r#145
[#225 'texture_storage_2d_array']: r#145
[#225 'texture_storage_3d']: r#145
[#225 'true']: r#145
[#225 'u32']: r#145
[#225 'vec2']: r#145
[#225 'vec3']: r#145
[#225 'vec4']: r#145
[#225 '{']: r#145
[#225 '}']: r#145
[#225 '~']: r#145
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#145
[#226 '!']: r#146
[#226 '&']: r#146
[#226 '(']: r#146
[#226 '*']: r#146
[#226 '-']: r#146
[#226 'array']: r#146
[#226 'bitcast']: r#146
[#226 'bool']: r#146
[#226 'f16']: r#146
[#226 'f32']: r#146
[#226 'false']: r#146
[#226 'i32']: r#146
[#226 'mat2x2']: r#146
[#226 'mat2x3']: r#146
[#226 'mat2x4']: r#146
[#226 'mat3x2']: r#146
[#226 'mat3x3']: r#146
[#226 'mat3x4']: r#146
[#226 'mat4x2']: r#146
[#226 'mat4x3']: r#146
[#226 'mat4x4']: r#146
[#226 'ptr']: r#146
[#226 'sampler']: r#146
[#226 'sampler_comparison']: r#146
[#226 'texture_1d']: r#146
[#226 'texture_2d']: r#146
[#226 'texture_2d_array']: r#146
[#226 'texture_3d']: r#146
[#226 'texture_cube']: r#146
[#226 'texture_cube_array']: r#146
[#226 'texture_depth_2d']: r#146
[#226 'texture_depth_2d_array']: r#146
[#226 'texture_depth_cube']: r#146
[#226 'texture_depth_cube_array']: r#146
[#226 'texture_depth_multisampled_2d']: r#146
[#226 'texture_multisampled_2d']: r#146
[#226 'texture_storage_1d']: r#146
[#226 'texture_storage_2d']: r#146
[#226 'texture_storage_2d_array']: r#146
[#226 'texture_storage_3d']: r#146
[#226 'true']: r#146
[#226 'u32']: r#146
[#226 'vec2']: r#146
[#226 'vec3']: r#146
[#226 'vec4']: r#146
[#226 '~']: r#146
[#227 '!']: r#147
[#227 '&']: r#147
[#227 '(']: r#147
[#227 '*']: r#147
[#227 '-']: r#147
[#227 'array']: r#147
[#227 'bitcast']: r#147
[#227 'bool']: r#147
[#227 'f16']: r#147
[#227 'f32']: r#147
[#227 'false']: r#147
[#227 'i32']: r#147
[#227 'mat2x2']: r#147
[#227 'mat2x3']: r#147
[#227 'mat2x4']: r#147
[#227 'mat3x2']: r#147
[#227 'mat3x3']: r#147
[#227 'mat3x4']: r#147
[#227 'mat4x2']: r#147
[#227 'mat4x3']: r#147
[#227 'mat4x4']: r#147
[#227 'ptr']: r#147
[#227 'sampler']: r#147
[#227 'sampler_comparison']: r#147
[#227 'texture_1d']: r#147
[#227 'texture_2d']: r#147
[#227 'texture_2d_array']: r#147
[#227 'texture_3d']: r#147
[#227 'texture_cube']: r#147
[#227 'texture_cube_array']: r#147
[#227 'texture_depth_2d']: r#147
[#227 'texture_depth_2d_array']: r#147
[#227 'texture_depth_cube']: r#147
[#227 'texture_depth_cube_array']: r#147
[#227 'texture_depth_multisampled_2d']: r#147
[#227 'texture_multisampled_2d']: r#147
[#227 'texture_storage_1d']: r#147
[#227 'texture_storage_2d']: r#147
[#227 'texture_storage_2d_array']: r#147
[#227 'texture_storage_3d']: r#147
[#227 'true']: r#147
[#227 'u32']: r#147
[#227 'vec2']: r#147
[#227 'vec3']: r#147
[#227 'vec4']: r#147
[#227 '~']: r#147
[#228 '!']: r#148
[#228 '&']: r#148
[#228 '(']: r#148
[#228 '*']: r#148
[#228 '-']: r#148
[#228 'array']: r#148
[#228 'bitcast']: r#148
[#228 'bool']: r#148
[#228 'f16']: r#148
[#228 'f32']: r#148
[#228 'false']: r#148
[#228 'i32']: r#148
[#228 'mat2x2']: r#148
[#228 'mat2x3']: r#148
[#228 'mat2x4']: r#148
[#228 'mat3x2']: r#148
[#228 'mat3x3']: r#148
[#228 'mat3x4']: r#148
[#228 'mat4x2']: r#148
[#228 'mat4x3']: r#148
[#228 'mat4x4']: r#148
[#228 'ptr']: r#148
[#228 'sampler']: r#148
[#228 'sampler_comparison']: r#148
[#228 'texture_1d']: r#148
[#228 'texture_2d']: r#148
[#228 'texture_2d_array']: r#148
[#228 'texture_3d']: r#148
[#228 'texture_cube']: r#148
[#228 'texture_cube_array']: r#148
[#228 'texture_depth_2d']: r#148
[#228 'texture_depth_2d_array']: r#148
[#228 'texture_depth_cube']: r#148
[#228 'texture_depth_cube_array']: r#148
[#228 'texture_depth_multisampled_2d']: r#148
[#228 'texture_multisampled_2d']: r#148
[#228 'texture_storage_1d']: r#148
[#228 'texture_storage_2d']: r#148
[#228 'texture_storage_2d_array']: r#148
[#228 'texture_storage_3d']: r#148
[#228 'true']: r#148
[#228 'u32']: r#148
[#228 'vec2']: r#148
[#228 'vec3']: r#148
[#228 'vec4']: r#148
[#228 '~']: r#148
[#229 '!']: r#149
[#229 '&']: r#149
[#229 '(']: r#149
[#229 '*']: r#149
[#229 '-']: r#149
[#229 'array']: r#149
[#229 'bitcast']: r#149
[#229 'bool']: r#149
[#229 'f16']: r#149
[#229 'f32']: r#149
[#229 'false']: r#149
[#229 'i32']: r#149
[#229 'mat2x2']: r#149
[#229 'mat2x3']: r#149
[#229 'mat2x4']: r#149
[#229 'mat3x2']: r#149
[#229 'mat3x3']: r#149
[#229 'mat3x4']: r#149
[#229 'mat4x2']: r#149
[#229 'mat4x3']: r#149
[#229 'mat4x4']: r#149
[#229 'ptr']: r#149
[#229 'sampler']: r#149
[#229 'sampler_comparison']: r#149
[#229 'texture_1d']: r#149
[#229 'texture_2d']: r#149
[#229 'texture_2d_array']: r#149
[#229 'texture_3d']: r#149
[#229 'texture_cube']: r#149
[#229 'texture_cube_array']: r#149
[#229 'texture_depth_2d']: r#149
[#229 'texture_depth_2d_array']: r#149
[#229 'texture_depth_cube']: r#149
[#229 'texture_depth_cube_array']: r#149
[#229 'texture_depth_multisampled_2d']: r#149
[#229 'texture_multisampled_2d']: r#149
[#229 'texture_storage_1d']: r#149
[#229 'texture_storage_2d']: r#149
[#229 'texture_storage_2d_array']: r#149
[#229 'texture_storage_3d']: r#149
[#229 'true']: r#149
[#229 'u32']: r#149
[#229 'vec2']: r#149
[#229 'vec3']: r#149
[#229 'vec4']: r#149
[#229 '~']: r#149
[#230 '!']: s#69
[#230 '&']: s#72
[#230 '(']: s#114
[#230 '*']: s#71
[#230 '-']: s#68
[#230 'array']: s#82
[#230 'bitcast']: s#77
[#230 'bool']: s#87
[#230 'f16']: s#116
[#230 'f32']: s#115
[#230 'false']: s#113
[#230 'i32']: s#117
[#230 'mat2x2']: s#98
[#230 'mat2x3']: s#99
[#230 'mat2x4']: s#100
[#230 'mat3x2']: s#101
[#230 'mat3x3']: s#102
[#230 'mat3x4']: s#103
[#230 'mat4x2']: s#104
[#230 'mat4x3']: s#105
[#230 'mat4x4']: s#106
[#230 'ptr']: s#119
[#230 'sampler']: s#133
[#230 'sampler_comparison']: s#134
[#230 'texture_1d']: s#140
[#230 'texture_2d']: s#141
[#230 'texture_2d_array']: s#142
[#230 'texture_3d']: s#143
[#230 'texture_cube']: s#144
[#230 'texture_cube_array']: s#145
[#230 'texture_depth_2d']: s#135
[#230 'texture_depth_2d_array']: s#136
[#230 'texture_depth_cube']: s#137
[#230 'texture_depth_cube_array']: s#138
[#230 'texture_depth_multisampled_2d']: s#139
[#230 'texture_multisampled_2d']: s#146
[#230 'texture_storage_1d']: s#147
[#230 'texture_storage_2d']: s#148
[#230 'texture_storage_2d_array']: s#149
[#230 'texture_storage_3d']: s#150
[#230 'true']: s#112
[#230 'u32']: s#118
[#230 'vec2']: s#95
[#230 'vec3']: s#96
[#230 'vec4']: s#97
[#230 '~']: s#70
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#230 /0[fh]/]: s#128
[#230 /0[iu]?/]: s#108
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#230 /[1-9][0-9]*[fh]/]: s#129
[#230 /[1-9][0-9]*[iu]?/]: s#109
[#231 '!']: r#150
[#231 '&']: r#150
[#231 '(']: r#150
[#231 '*']: r#150
[#231 '-']: r#150
[#231 'array']: r#150
[#231 'bitcast']: r#150
[#231 'bool']: r#150
[#231 'f16']: r#150
[#231 'f32']: r#150
[#231 'false']: r#150
[#231 'i32']: r#150
[#231 'mat2x2']: r#150
[#231 'mat2x3']: r#150
[#231 'mat2x4']: r#150
[#231 'mat3x2']: r#150
[#231 'mat3x3']: r#150
[#231 'mat3x4']: r#150
[#231 'mat4x2']: r#150
[#231 'mat4x3']: r#150
[#231 'mat4x4']: r#150
[#231 'ptr']: r#150
[#231 'sampler']: r#150
[#231 'sampler_comparison']: r#150
[#231 'texture_1d']: r#150
[#231 'texture_2d']: r#150
[#231 'texture_2d_array']: r#150
[#231 'texture_3d']: r#150
[#231 'texture_cube']: r#150
[#231 'texture_cube_array']: r#150
[#231 'texture_depth_2d']: r#150
[#231 'texture_depth_2d_array']: r#150
[#231 'texture_depth_cube']: r#150
[#231 'texture_depth_cube_array']: r#150
[#231 'texture_depth_multisampled_2d']: r#150
[#231 'texture_multisampled_2d']: r#150
[#231 'texture_storage_1d']: r#150
[#231 'texture_storage_2d']: r#150
[#231 'texture_storage_2d_array']: r#150
[#231 'texture_storage_3d']: r#150
[#231 'true']: r#150
[#231 'u32']: r#150
[#231 'vec2']: r#150
[#231 'vec3']: r#150
[#231 'vec4']: r#150
[#231 '~']: r#150
[#232 '!']: s#69
[#232 '&']: s#72
[#232 '(']: s#114
[#232 '*']: s#71
[#232 '-']: s#68
[#232 'array']: s#82
[#232 'bitcast']: s#77
[#232 'bool']: s#87
[#232 'f16']: s#116
[#232 'f32']: s#115
[#232 'false']: s#113
[#232 'i32']: s#117
[#232 'mat2x2']: s#98
[#232 'mat2x3']: s#99
[#232 'mat2x4']: s#100
[#232 'mat3x2']: s#101
[#232 'mat3x3']: s#102
[#232 'mat3x4']: s#103
[#232 'mat4x2']: s#104
[#232 'mat4x3']: s#105
[#232 'mat4x4']: s#106
[#232 'ptr']: s#119
[#232 'sampler']: s#133
[#232 'sampler_comparison']: s#134
[#232 'texture_1d']: s#140
[#232 'texture_2d']: s#141
[#232 'texture_2d_array']: s#142
[#232 'texture_3d']: s#143
[#232 'texture_cube']: s#144
[#232 'texture_cube_array']: s#145
[#232 'texture_depth_2d']: s#135
[#232 'texture_depth_2d_array']: s#136
[#232 'texture_depth_cube']: s#137
[#232 'texture_depth_cube_array']: s#138
[#232 'texture_depth_multisampled_2d']: s#139
[#232 'texture_multisampled_2d']: s#146
[#232 'texture_storage_1d']: s#147
[#232 'texture_storage_2d']: s#148
[#232 'texture_storage_2d_array']: s#149
[#232 'texture_storage_3d']: s#150
[#232 'true']: s#112
[#232 'u32']: s#118
[#232 'vec2']: s#95
[#232 'vec3']: s#96
[#232 'vec4']: s#97
[#232 '~']: s#70
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#232 /0[fh]/]: s#128
[#232 /0[iu]?/]: s#108
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#232 /[1-9][0-9]*[fh]/]: s#129
[#232 /[1-9][0-9]*[iu]?/]: s#109
[#233 '!']: r#151
[#233 '&']: r#151
[#233 '(']: r#151
[#233 '*']: r#151
[#233 '-']: r#151
[#233 'array']: r#151
[#233 'bitcast']: r#151
[#233 'bool']: r#151
[#233 'f16']: r#151
[#233 'f32']: r#151
[#233 'false']: r#151
[#233 'i32']: r#151
[#233 'mat2x2']: r#151
[#233 'mat2x3']: r#151
[#233 'mat2x4']: r#151
[#233 'mat3x2']: r#151
[#233 'mat3x3']: r#151
[#233 'mat3x4']: r#151
[#233 'mat4x2']: r#151
[#233 'mat4x3']: r#151
[#233 'mat4x4']: r#151
[#233 'ptr']: r#151
[#233 'sampler']: r#151
[#233 'sampler_comparison']: r#151
[#233 'texture_1d']: r#151
[#233 'texture_2d']: r#151
[#233 'texture_2d_array']: r#151
[#233 'texture_3d']: r#151
[#233 'texture_cube']: r#151
[#233 'texture_cube_array']: r#151
[#233 'texture_depth_2d']: r#151
[#233 'texture_depth_2d_array']: r#151
[#233 'texture_depth_cube']: r#151
[#233 'texture_depth_cube_array']: r#151
[#233 'texture_depth_multisampled_2d']: r#151
[#233 'texture_multisampled_2d']: r#151
[#233 'texture_storage_1d']: r#151
[#233 'texture_storage_2d']: r#151
[#233 'texture_storage_2d_array']: r#151
[#233 'texture_storage_3d']: r#151
[#233 'true']: r#151
[#233 'u32']: r#151
[#233 'vec2']: r#151
[#233 'vec3']: r#151
[#233 'vec4']: r#151
[#233 '~']: r#151
[#234 '!']: s#69
[#234 '&']: s#72
[#234 '(']: s#114
[#234 '*']: s#71
[#234 '-']: s#68
[#234 'array']: s#82
[#234 'bitcast']: s#77
[#234 'bool']: s#87
[#234 'f16']: s#116
[#234 'f32']: s#115
[#234 'false']: s#113
[#234 'i32']: s#117
[#234 'mat2x2']: s#98
[#234 'mat2x3']: s#99
[#234 'mat2x4']: s#100
[#234 'mat3x2']: s#101
[#234 'mat3x3']: s#102
[#234 'mat3x4']: s#103
[#234 'mat4x2']: s#104
[#234 'mat4x3']: s#105
[#234 'mat4x4']: s#106
[#234 'ptr']: s#119
[#234 'sampler']: s#133
[#234 'sampler_comparison']: s#134
[#234 'texture_1d']: s#140
[#234 'texture_2d']: s#141
[#234 'texture_2d_array']: s#142
[#234 'texture_3d']: s#143
[#234 'texture_cube']: s#144
[#234 'texture_cube_array']: s#145
[#234 'texture_depth_2d']: s#135
[#234 'texture_depth_2d_array']: s#136
[#234 'texture_depth_cube']: s#137
[#234 'texture_depth_cube_array']: s#138
[#234 'texture_depth_multisampled_2d']: s#139
[#234 'texture_multisampled_2d']: s#146
[#234 'texture_storage_1d']: s#147
[#234 'texture_storage_2d']: s#148
[#234 'texture_storage_2d_array']: s#149
[#234 'texture_storage_3d']: s#150
[#234 'true']: s#112
[#234 'u32']: s#118
[#234 'vec2']: s#95
[#234 'vec3']: s#96
[#234 'vec4']: s#97
[#234 '~']: s#70
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#234 /0[fh]/]: s#128
[#234 /0[iu]?/]: s#108
[#234 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#234 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#234 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#234 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#234 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#234 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#234 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#234 /[1-9][0-9]*[fh]/]: s#129
[#234 /[1-9][0-9]*[iu]?/]: s#109
[#235 '!']: s#69
[#235 '&']: s#72
[#235 '(']: s#114
[#235 '*']: s#71
[#235 '-']: s#68
[#235 'array']: s#82
[#235 'bitcast']: s#77
[#235 'bool']: s#87
[#235 'f16']: s#116
[#235 'f32']: s#115
[#235 'false']: s#113
[#235 'i32']: s#117
[#235 'mat2x2']: s#98
[#235 'mat2x3']: s#99
[#235 'mat2x4']: s#100
[#235 'mat3x2']: s#101
[#235 'mat3x3']: s#102
[#235 'mat3x4']: s#103
[#235 'mat4x2']: s#104
[#235 'mat4x3']: s#105
[#235 'mat4x4']: s#106
[#235 'ptr']: s#119
[#235 'sampler']: s#133
[#235 'sampler_comparison']: s#134
[#235 'texture_1d']: s#140
[#235 'texture_2d']: s#141
[#235 'texture_2d_array']: s#142
[#235 'texture_3d']: s#143
[#235 'texture_cube']: s#144
[#235 'texture_cube_array']: s#145
[#235 'texture_depth_2d']: s#135
[#235 'texture_depth_2d_array']: s#136
[#235 'texture_depth_cube']: s#137
[#235 'texture_depth_cube_array']: s#138
[#235 'texture_depth_multisampled_2d']: s#139
[#235 'texture_multisampled_2d']: s#146
[#235 'texture_storage_1d']: s#147
[#235 'texture_storage_2d']: s#148
[#235 'texture_storage_2d_array']: s#149
[#235 'texture_storage_3d']: s#150
[#235 'true']: s#112
[#235 'u32']: s#118
[#235 'vec2']: s#95
[#235 'vec3']: s#96
[#235 'vec4']: s#97
[#235 '~']: s#70
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#235 /0[fh]/]: s#128
[#235 /0[iu]?/]: s#108
[#235 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#235 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#235 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#235 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#235 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#235 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#235 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#235 /[1-9][0-9]*[fh]/]: s#129
[#235 /[1-9][0-9]*[iu]?/]: s#109
[#236 '!']: s#69
[#236 '&']: s#72
[#236 '(']: s#114
[#236 '*']: s#71
[#236 '-']: s#68
[#236 'array']: s#82
[#236 'bitcast']: s#77
[#236 'bool']: s#87
[#236 'f16']: s#116
[#236 'f32']: s#115
[#236 'false']: s#113
[#236 'i32']: s#117
[#236 'mat2x2']: s#98
[#236 'mat2x3']: s#99
[#236 'mat2x4']: s#100
[#236 'mat3x2']: s#101
[#236 'mat3x3']: s#102
[#236 'mat3x4']: s#103
[#236 'mat4x2']: s#104
[#236 'mat4x3']: s#105
[#236 'mat4x4']: s#106
[#236 'ptr']: s#119
[#236 'sampler']: s#133
[#236 'sampler_comparison']: s#134
[#236 'texture_1d']: s#140
[#236 'texture_2d']: s#141
[#236 'texture_2d_array']: s#142
[#236 'texture_3d']: s#143
[#236 'texture_cube']: s#144
[#236 'texture_cube_array']: s#145
[#236 'texture_depth_2d']: s#135
[#236 'texture_depth_2d_array']: s#136
[#236 'texture_depth_cube']: s#137
[#236 'texture_depth_cube_array']: s#138
[#236 'texture_depth_multisampled_2d']: s#139
[#236 'texture_multisampled_2d']: s#146
[#236 'texture_storage_1d']: s#147
[#236 'texture_storage_2d']: s#148
[#236 'texture_storage_2d_array']: s#149
[#236 'texture_storage_3d']: s#150
[#236 'true']: s#112
[#236 'u32']: s#118
[#236 'vec2']: s#95
[#236 'vec3']: s#96
[#236 'vec4']: s#97
[#236 '~']: s#70
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#236 /0[fh]/]: s#128
[#236 /0[iu]?/]: s#108
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#236 /[1-9][0-9]*[fh]/]: s#129
[#236 /[1-9][0-9]*[iu]?/]: s#109
[#237 'flat']: s#263
[#237 'linear']: s#262
[#237 'perspective']: s#261
[#238 '!']: s#69
[#238 '&']: s#72
[#238 '(']: s#114
[#238 '*']: s#71
[#238 '-']: s#68
[#238 'array']: s#82
[#238 'bitcast']: s#77
[#238 'bool']: s#87
[#238 'f16']: s#116
[#238 'f32']: s#115
[#238 'false']: s#113
[#238 'i32']: s#117
[#238 'mat2x2']: s#98
[#238 'mat2x3']: s#99
[#238 'mat2x4']: s#100
[#238 'mat3x2']: s#101
[#238 'mat3x3']: s#102
[#238 'mat3x4']: s#103
[#238 'mat4x2']: s#104
[#238 'mat4x3']: s#105
[#238 'mat4x4']: s#106
[#238 'ptr']: s#119
[#238 'sampler']: s#133
[#238 'sampler_comparison']: s#134
[#238 'texture_1d']: s#140
[#238 'texture_2d']: s#141
[#238 'texture_2d_array']: s#142
[#238 'texture_3d']: s#143
[#238 'texture_cube']: s#144
[#238 'texture_cube_array']: s#145
[#238 'texture_depth_2d']: s#135
[#238 'texture_depth_2d_array']: s#136
[#238 'texture_depth_cube']: s#137
[#238 'texture_depth_cube_array']: s#138
[#238 'texture_depth_multisampled_2d']: s#139
[#238 'texture_multisampled_2d']: s#146
[#238 'texture_storage_1d']: s#147
[#238 'texture_storage_2d']: s#148
[#238 'texture_storage_2d_array']: s#149
[#238 'texture_storage_3d']: s#150
[#238 'true']: s#112
[#238 'u32']: s#118
[#238 'vec2']: s#95
[#238 'vec3']: s#96
[#238 'vec4']: s#97
[#238 '~']: s#70
[#238 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#238 /0[fh]/]: s#128
[#238 /0[iu]?/]: s#108
[#238 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#238 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#238 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#238 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#238 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#238 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#238 /[1-9][0-9]*[fh]/]: s#129
[#238 /[1-9][0-9]*[iu]?/]: s#109
[#239 '!']: s#69
[#239 '&']: s#72
[#239 '(']: s#114
[#239 '*']: s#71
[#239 '-']: s#68
[#239 'array']: s#82
[#239 'bitcast']: s#77
[#239 'bool']: s#87
[#239 'f16']: s#116
[#239 'f32']: s#115
[#239 'false']: s#113
[#239 'i32']: s#117
[#239 'mat2x2']: s#98
[#239 'mat2x3']: s#99
[#239 'mat2x4']: s#100
[#239 'mat3x2']: s#101
[#239 'mat3x3']: s#102
[#239 'mat3x4']: s#103
[#239 'mat4x2']: s#104
[#239 'mat4x3']: s#105
[#239 'mat4x4']: s#106
[#239 'ptr']: s#119
[#239 'sampler']: s#133
[#239 'sampler_comparison']: s#134
[#239 'texture_1d']: s#140
[#239 'texture_2d']: s#141
[#239 'texture_2d_array']: s#142
[#239 'texture_3d']: s#143
[#239 'texture_cube']: s#144
[#239 'texture_cube_array']: s#145
[#239 'texture_depth_2d']: s#135
[#239 'texture_depth_2d_array']: s#136
[#239 'texture_depth_cube']: s#137
[#239 'texture_depth_cube_array']: s#138
[#239 'texture_depth_multisampled_2d']: s#139
[#239 'texture_multisampled_2d']: s#146
[#239 'texture_storage_1d']: s#147
[#239 'texture_storage_2d']: s#148
[#239 'texture_storage_2d_array']: s#149
[#239 'texture_storage_3d']: s#150
[#239 'true']: s#112
[#239 'u32']: s#118
[#239 'vec2']: s#95
[#239 'vec3']: s#96
[#239 'vec4']: s#97
[#239 '~']: s#70
[#239 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#239 /0[fh]/]: s#128
[#239 /0[iu]?/]: s#108
[#239 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#239 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#239 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#239 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#239 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#239 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#239 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#239 /[1-9][0-9]*[fh]/]: s#129
[#239 /[1-9][0-9]*[iu]?/]: s#109
[#240 'frag_depth']: s#250
[#240 'front_facing']: s#249
[#240 'global_invocation_id']: s#253
[#240 'instance_index']: s#247
[#240 'local_invocation_id']: s#251
[#240 'local_invocation_index']: s#252
[#240 'num_workgroups']: s#255
[#240 'position']: s#248
[#240 'sample_index']: s#256
[#240 'sample_mask']: s#257
[#240 'vertex_index']: s#246
[#240 'workgroup_id']: s#254
[#241 '!']: s#69
[#241 '&']: s#72
[#241 '(']: s#114
[#241 '*']: s#71
[#241 '-']: s#68
[#241 'array']: s#82
[#241 'bitcast']: s#77
[#241 'bool']: s#87
[#241 'f16']: s#116
[#241 'f32']: s#115
[#241 'false']: s#113
[#241 'i32']: s#117
[#241 'mat2x2']: s#98
[#241 'mat2x3']: s#99
[#241 'mat2x4']: s#100
[#241 'mat3x2']: s#101
[#241 'mat3x3']: s#102
[#241 'mat3x4']: s#103
[#241 'mat4x2']: s#104
[#241 'mat4x3']: s#105
[#241 'mat4x4']: s#106
[#241 'ptr']: s#119
[#241 'sampler']: s#133
[#241 'sampler_comparison']: s#134
[#241 'texture_1d']: s#140
[#241 'texture_2d']: s#141
[#241 'texture_2d_array']: s#142
[#241 'texture_3d']: s#143
[#241 'texture_cube']: s#144
[#241 'texture_cube_array']: s#145
[#241 'texture_depth_2d']: s#135
[#241 'texture_depth_2d_array']: s#136
[#241 'texture_depth_cube']: s#137
[#241 'texture_depth_cube_array']: s#138
[#241 'texture_depth_multisampled_2d']: s#139
[#241 'texture_multisampled_2d']: s#146
[#241 'texture_storage_1d']: s#147
[#241 'texture_storage_2d']: s#148
[#241 'texture_storage_2d_array']: s#149
[#241 'texture_storage_3d']: s#150
[#241 'true']: s#112
[#241 'u32']: s#118
[#241 'vec2']: s#95
[#241 'vec3']: s#96
[#241 'vec4']: s#97
[#241 '~']: s#70
[#241 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#241 /0[fh]/]: s#128
[#241 /0[iu]?/]: s#108
[#241 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#241 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#241 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#241 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#241 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#241 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#241 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#241 /[1-9][0-9]*[fh]/]: s#129
[#241 /[1-9][0-9]*[iu]?/]: s#109
[#242 '!']: s#69
[#242 '&']: s#72
[#242 '(']: s#114
[#242 '*']: s#71
[#242 '-']: s#68
[#242 'array']: s#82
[#242 'bitcast']: s#77
[#242 'bool']: s#87
[#242 'f16']: s#116
[#242 'f32']: s#115
[#242 'false']: s#113
[#242 'i32']: s#117
[#242 'mat2x2']: s#98
[#242 'mat2x3']: s#99
[#242 'mat2x4']: s#100
[#242 'mat3x2']: s#101
[#242 'mat3x3']: s#102
[#242 'mat3x4']: s#103
[#242 'mat4x2']: s#104
[#242 'mat4x3']: s#105
[#242 'mat4x4']: s#106
[#242 'ptr']: s#119
[#242 'sampler']: s#133
[#242 'sampler_comparison']: s#134
[#242 'texture_1d']: s#140
[#242 'texture_2d']: s#141
[#242 'texture_2d_array']: s#142
[#242 'texture_3d']: s#143
[#242 'texture_cube']: s#144
[#242 'texture_cube_array']: s#145
[#242 'texture_depth_2d']: s#135
[#242 'texture_depth_2d_array']: s#136
[#242 'texture_depth_cube']: s#137
[#242 'texture_depth_cube_array']: s#138
[#242 'texture_depth_multisampled_2d']: s#139
[#242 'texture_multisampled_2d']: s#146
[#242 'texture_storage_1d']: s#147
[#242 'texture_storage_2d']: s#148
[#242 'texture_storage_2d_array']: s#149
[#242 'texture_storage_3d']: s#150
[#242 'true']: s#112
[#242 'u32']: s#118
[#242 'vec2']: s#95
[#242 'vec3']: s#96
[#242 'vec4']: s#97
[#242 '~']: s#70
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#242 /0[fh]/]: s#128
[#242 /0[iu]?/]: s#108
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#242 /[1-9][0-9]*[fh]/]: s#129
[#242 /[1-9][0-9]*[iu]?/]: s#109
[#243 ',']: s#386
[#244 ',']: s#386
[#245 ',']: s#386
[#246 ')']: r#152
[#246 ',']: r#152
[#247 ')']: r#153
[#247 ',']: r#153
[#248 ')']: r#154
[#248 ',']: r#154
[#249 ')']: r#155
[#249 ',']: r#155
[#250 ')']: r#156
[#250 ',']: r#156
[#251 ')']: r#157
[#251 ',']: r#157
[#252 ')']: r#158
[#252 ',']: r#158
[#253 ')']: r#159
[#253 ',']: r#159
[#254 ')']: r#160
[#254 ',']: r#160
[#255 ')']: r#161
[#255 ',']: r#161
[#256 ')']: r#162
[#256 ',']: r#162
[#257 ')']: r#163
[#257 ',']: r#163
[#258 ',']: s#386
[#259 ',']: s#386
[#260 ',']: s#386
[#261 ')']: r#164
[#261 ',']: r#164
[#262 ')']: r#165
[#262 ',']: r#165
[#263 ')']: r#166
[#263 ',']: r#166
[#264 ',']: s#386
[#265 ',']: s#386
[#266 ',']: s#386
[#267 ')']: r#167
[#267 ',']: r#167
[#267 ':']: r#167
[#267 ';']: r#167
[#267 ']']: r#167
[#267 '{']: r#167
[#267 '||']: r#168
[#268 '!=']: r#31
[#268 '%']: r#31
[#268 '&&']: r#31
[#268 ')']: r#31
[#268 '*']: r#31
[#268 '+']: r#31
[#268 ',']: r#31
[#268 '-']: r#31
[#268 '/']: r#31
[#268 ':']: r#31
[#268 ';']: r#31
[#268 '<']: r#31
[#268 '<<']: s#208
[#268 '<=']: r#31
[#268 '==']: r#31
[#268 '>']: r#31
[#268 '>=']: r#31
[#268 '>>']: s#209
[#268 ']']: r#31
[#268 '{']: r#31
[#268 '||']: r#31
[#269 '&&']: r#170
[#269 ')']: r#169
[#269 ',']: r#169
[#269 ':']: r#169
[#269 ';']: r#169
[#269 ']']: r#169
[#269 '{']: r#169
[#270 '&&']: r#171
[#270 ')']: r#171
[#270 ',']: r#171
[#270 ':']: r#171
[#270 ';']: r#171
[#270 ']']: r#171
[#270 '{']: r#171
[#270 '||']: r#171
[#271 '&&']: r#172
[#271 ')']: r#172
[#271 ',']: r#172
[#271 ':']: r#172
[#271 ';']: r#172
[#271 ']']: r#172
[#271 '{']: r#172
[#271 '||']: r#172
[#272 '&&']: r#173
[#272 ')']: r#173
[#272 ',']: r#173
[#272 ':']: r#173
[#272 ';']: r#173
[#272 ']']: r#173
[#272 '{']: r#173
[#272 '||']: r#173
[#273 '&&']: r#174
[#273 ')']: r#174
[#273 ',']: r#174
[#273 ':']: r#174
[#273 ';']: r#174
[#273 ']']: r#174
[#273 '{']: r#174
[#273 '||']: r#174
[#274 '&&']: r#175
[#274 ')']: r#175
[#274 ',']: r#175
[#274 ':']: r#175
[#274 ';']: r#175
[#274 ']']: r#175
[#274 '{']: r#175
[#274 '||']: r#175
[#275 '&&']: r#176
[#275 ')']: r#176
[#275 ',']: r#176
[#275 ':']: r#176
[#275 ';']: r#176
[#275 ']']: r#176
[#275 '{']: r#176
[#275 '||']: r#176
[#276 '&']: r#178
[#276 ')']: r#177
[#276 ',']: r#177
[#276 ':']: r#177
[#276 ';']: r#177
[#276 '>']: r#177
[#276 ']']: r#177
[#276 '{']: r#177
[#277 ')']: r#179
[#277 ',']: r#179
[#277 ':']: r#179
[#277 ';']: r#179
[#277 '>']: r#179
[#277 ']']: r#179
[#277 '{']: r#179
[#277 '|']: r#180
[#278 ')']: r#181
[#278 ',']: r#181
[#278 ':']: r#181
[#278 ';']: r#181
[#278 '>']: r#181
[#278 ']']: r#181
[#278 '^']: r#182
[#278 '{']: r#181
[#279 '!=']: r#183
[#279 '%']: s#205
[#279 '&&']: r#183
[#279 ')']: r#183
[#279 '*']: s#71
[#279 '+']: r#183
[#279 ',']: r#183
[#279 '-']: r#183
[#279 '/']: s#204
[#279 ':']: r#183
[#279 ';']: r#183
[#279 '<']: r#183
[#279 '<=']: r#183
[#279 '==']: r#183
[#279 '>']: r#183
[#279 '>=']: r#183
[#279 ']']: r#183
[#279 '{']: r#183
[#279 '||']: r#183
[#280 '!=']: r#31
[#280 '%']: r#31
[#280 '&&']: r#31
[#280 ')']: r#31
[#280 '*']: r#31
[#280 '+']: r#31
[#280 ',']: r#31
[#280 '-']: r#31
[#280 '/']: r#31
[#280 ':']: r#31
[#280 ';']: r#31
[#280 '<']: r#31
[#280 '<=']: r#31
[#280 '==']: r#31
[#280 '>']: r#31
[#280 '>=']: r#31
[#280 ']']: r#31
[#280 '{']: r#31
[#280 '||']: r#31
[#281 '!=']: r#184
[#281 '&&']: r#184
[#281 ')']: r#184
[#281 ',']: r#184
[#281 ':']: r#184
[#281 ';']: r#184
[#281 '<']: r#184
[#281 '<=']: r#184
[#281 '==']: r#184
[#281 '>']: r#184
[#281 '>=']: r#184
[#281 ']']: r#184
[#281 '{']: r#184
[#281 '||']: r#184
[#282 '!=']: r#185
[#282 '&&']: r#185
[#282 ')']: r#185
[#282 ',']: r#185
[#282 ':']: r#185
[#282 ';']: r#185
[#282 '<']: r#185
[#282 '<=']: r#185
[#282 '==']: r#185
[#282 '>']: r#185
[#282 '>=']: r#185
[#282 ']']: r#185
[#282 '{']: r#185
[#282 '||']: r#185
[#283 '!=']: r#186
[#283 '%']: r#186
[#283 '&&']: r#186
[#283 ')']: r#186
[#283 '*']: r#186
[#283 '+']: r#186
[#283 ',']: r#186
[#283 '-']: r#186
[#283 '/']: r#186
[#283 ':']: r#186
[#283 ';']: r#186
[#283 '<']: r#186
[#283 '<=']: r#186
[#283 '==']: r#186
[#283 '>']: r#186
[#283 '>=']: r#186
[#283 ']']: r#186
[#283 '{']: r#186
[#283 '||']: r#186
[#284 '.']: s#194
[#284 '[']: s#193
[#285 '.']: s#194
[#285 '[']: s#193
[#286 '!=']: r#187
[#286 '%']: r#187
[#286 '%=']: r#187
[#286 '&&']: r#187
[#286 '&']: r#187
[#286 '&=']: r#187
[#286 ')']: r#187
[#286 '*']: r#187
[#286 '*=']: r#187
[#286 '+']: r#187
[#286 '++']: r#187
[#286 '+=']: r#187
[#286 ',']: r#187
[#286 '-']: r#187
[#286 '--']: r#187
[#286 '-=']: r#187
[#286 '.']: r#187
[#286 '/']: r#187
[#286 '/=']: r#187
[#286 ':']: r#187
[#286 ';']: r#187
[#286 '<']: r#187
[#286 '<<']: r#187
[#286 '<<=']: r#187
[#286 '<=']: r#187
[#286 '=']: r#187
[#286 '==']: r#187
[#286 '>']: r#187
[#286 '>=']: r#187
[#286 '>>']: r#187
[#286 '>>=']: r#187
[#286 '[']: r#187
[#286 ']']: r#187
[#286 '^']: r#187
[#286 '^=']: r#187
[#286 '{']: r#187
[#286 '|']: r#187
[#286 '|=']: r#187
[#286 '||']: r#187
[#287 '!=']: r#188
[#287 '%']: r#188
[#287 '%=']: r#188
[#287 '&&']: r#188
[#287 '&']: r#188
[#287 '&=']: r#188
[#287 ')']: r#188
[#287 '*']: r#188
[#287 '*=']: r#188
[#287 '+']: r#188
[#287 '++']: r#188
[#287 '+=']: r#188
[#287 ',']: r#188
[#287 '-']: r#188
[#287 '--']: r#188
[#287 '-=']: r#188
[#287 '.']: r#188
[#287 '/']: r#188
[#287 '/=']: r#188
[#287 ':']: r#188
[#287 ';']: r#188
[#287 '<']: r#188
[#287 '<<']: r#188
[#287 '<<=']: r#188
[#287 '<=']: r#188
[#287 '=']: r#188
[#287 '==']: r#188
[#287 '>']: r#188
[#287 '>=']: r#188
[#287 '>>']: r#188
[#287 '>>=']: r#188
[#287 '[']: r#188
[#287 ']']: r#188
[#287 '^']: r#188
[#287 '^=']: r#188
[#287 '{']: r#188
[#287 '|']: r#188
[#287 '|=']: r#188
[#287 '||']: r#188
[#288 '!=']: r#189
[#288 '%']: r#189
[#288 '%=']: r#189
[#288 '&&']: r#189
[#288 '&']: r#189
[#288 '&=']: r#189
[#288 ')']: r#189
[#288 '*']: r#189
[#288 '*=']: r#189
[#288 '+']: r#189
[#288 '++']: r#189
[#288 '+=']: r#189
[#288 ',']: r#189
[#288 '-']: r#189
[#288 '--']: r#189
[#288 '-=']: r#189
[#288 '.']: r#189
[#288 '/']: r#189
[#288 '/=']: r#189
[#288 ':']: r#189
[#288 ';']: r#189
[#288 '<']: r#189
[#288 '<<']: r#189
[#288 '<<=']: r#189
[#288 '<=']: r#189
[#288 '=']: r#189
[#288 '==']: r#189
[#288 '>']: r#189
[#288 '>=']: r#189
[#288 '>>']: r#189
[#288 '>>=']: r#189
[#288 '[']: r#189
[#288 ']']: r#189
[#288 '^']: r#189
[#288 '^=']: r#189
[#288 '{']: r#189
[#288 '|']: r#189
[#288 '|=']: r#189
[#288 '||']: r#189
[#289 '!=']: r#190
[#289 '%']: r#190
[#289 '%=']: r#190
[#289 '&&']: r#190
[#289 '&']: r#190
[#289 '&=']: r#190
[#289 ')']: r#190
[#289 '*']: r#190
[#289 '*=']: r#190
[#289 '+']: r#190
[#289 '++']: r#190
[#289 '+=']: r#190
[#289 ',']: r#190
[#289 '-']: r#190
[#289 '--']: r#190
[#289 '-=']: r#190
[#289 '.']: r#190
[#289 '/']: r#190
[#289 '/=']: r#190
[#289 ':']: r#190
[#289 ';']: r#190
[#289 '<']: r#190
[#289 '<<']: r#190
[#289 '<<=']: r#190
[#289 '<=']: r#190
[#289 '=']: r#190
[#289 '==']: r#190
[#289 '>']: r#190
[#289 '>=']: r#190
[#289 '>>']: r#190
[#289 '>>=']: r#190
[#289 '[']: r#190
[#289 ']']: r#190
[#289 '^']: r#190
[#289 '^=']: r#190
[#289 '{']: r#190
[#289 '|']: r#190
[#289 '|=']: r#190
[#289 '||']: r#190
[#290 '!=']: r#191
[#290 '%']: r#191
[#290 '%=']: r#191
[#290 '&&']: r#191
[#290 '&']: r#191
[#290 '&=']: r#191
[#290 ')']: r#191
[#290 '*']: r#191
[#290 '*=']: r#191
[#290 '+']: r#191
[#290 '++']: r#191
[#290 '+=']: r#191
[#290 ',']: r#191
[#290 '-']: r#191
[#290 '--']: r#191
[#290 '-=']: r#191
[#290 '.']: r#191
[#290 '/']: r#191
[#290 '/=']: r#191
[#290 ':']: r#191
[#290 ';']: r#191
[#290 '<']: r#191
[#290 '<<']: r#191
[#290 '<<=']: r#191
[#290 '<=']: r#191
[#290 '=']: r#191
[#290 '==']: r#191
[#290 '>']: r#191
[#290 '>=']: r#191
[#290 '>>']: r#191
[#290 '>>=']: r#191
[#290 '[']: r#191
[#290 ']']: r#191
[#290 '^']: r#191
[#290 '^=']: r#191
[#290 '{']: r#191
[#290 '|']: r#191
[#290 '|=']: r#191
[#290 '||']: r#191
[#291 '!=']: r#192
[#291 '%']: r#192
[#291 '%=']: r#192
[#291 '&&']: r#192
[#291 '&']: r#192
[#291 '&=']: r#192
[#291 ')']: r#192
[#291 '*']: r#192
[#291 '*=']: r#192
[#291 '+']: r#192
[#291 '++']: r#192
[#291 '+=']: r#192
[#291 ',']: r#192
[#291 '-']: r#192
[#291 '--']: r#192
[#291 '-=']: r#192
[#291 '.']: r#192
[#291 '/']: r#192
[#291 '/=']: r#192
[#291 ':']: r#192
[#291 ';']: r#192
[#291 '<']: r#192
[#291 '<<']: r#192
[#291 '<<=']: r#192
[#291 '<=']: r#192
[#291 '=']: r#192
[#291 '==']: r#192
[#291 '>']: r#192
[#291 '>=']: r#192
[#291 '>>']: r#192
[#291 '>>=']: r#192
[#291 '[']: r#192
[#291 ']']: r#192
[#291 '^']: r#192
[#291 '^=']: r#192
[#291 '{']: r#192
[#291 '|']: r#192
[#291 '|=']: r#192
[#291 '||']: r#192
[#292 '!=']: r#193
[#292 '%']: r#193
[#292 '%=']: r#193
[#292 '&&']: r#193
[#292 '&']: r#193
[#292 '&=']: r#193
[#292 ')']: r#193
[#292 '*']: r#193
[#292 '*=']: r#193
[#292 '+']: r#193
[#292 '++']: r#193
[#292 '+=']: r#193
[#292 ',']: r#193
[#292 '-']: r#193
[#292 '--']: r#193
[#292 '-=']: r#193
[#292 '.']: r#193
[#292 '/']: r#193
[#292 '/=']: r#193
[#292 ':']: r#193
[#292 ';']: r#193
[#292 '<']: r#193
[#292 '<<']: r#193
[#292 '<<=']: r#193
[#292 '<=']: r#193
[#292 '=']: r#193
[#292 '==']: r#193
[#292 '>']: r#193
[#292 '>=']: r#193
[#292 '>>']: r#193
[#292 '>>=']: r#193
[#292 '[']: r#193
[#292 ']']: r#193
[#292 '^']: r#193
[#292 '^=']: r#193
[#292 '{']: r#193
[#292 '|']: r#193
[#292 '|=']: r#193
[#292 '||']: r#193
[#293 '!=']: r#194
[#293 '%']: r#194
[#293 '%=']: r#194
[#293 '&&']: r#194
[#293 '&']: r#194
[#293 '&=']: r#194
[#293 ')']: r#194
[#293 '*']: r#194
[#293 '*=']: r#194
[#293 '+']: r#194
[#293 '++']: r#194
[#293 '+=']: r#194
[#293 ',']: r#194
[#293 '-']: r#194
[#293 '--']: r#194
[#293 '-=']: r#194
[#293 '.']: r#194
[#293 '/']: r#194
[#293 '/=']: r#194
[#293 ':']: r#194
[#293 ';']: r#194
[#293 '<']: r#194
[#293 '<<']: r#194
[#293 '<<=']: r#194
[#293 '<=']: r#194
[#293 '=']: r#194
[#293 '==']: r#194
[#293 '>']: r#194
[#293 '>=']: r#194
[#293 '>>']: r#194
[#293 '>>=']: r#194
[#293 '[']: r#194
[#293 ']']: r#194
[#293 '^']: r#194
[#293 '^=']: r#194
[#293 '{']: r#194
[#293 '|']: r#194
[#293 '|=']: r#194
[#293 '||']: r#194
[#294 '!=']: r#195
[#294 '%']: r#195
[#294 '%=']: r#195
[#294 '&&']: r#195
[#294 '&']: r#195
[#294 '&=']: r#195
[#294 ')']: r#195
[#294 '*']: r#195
[#294 '*=']: r#195
[#294 '+']: r#195
[#294 '++']: r#195
[#294 '+=']: r#195
[#294 ',']: r#195
[#294 '-']: r#195
[#294 '--']: r#195
[#294 '-=']: r#195
[#294 '.']: r#195
[#294 '/']: r#195
[#294 '/=']: r#195
[#294 ':']: r#195
[#294 ';']: r#195
[#294 '<']: r#195
[#294 '<<']: r#195
[#294 '<<=']: r#195
[#294 '<=']: r#195
[#294 '=']: r#195
[#294 '==']: r#195
[#294 '>']: r#195
[#294 '>=']: r#195
[#294 '>>']: r#195
[#294 '>>=']: r#195
[#294 '[']: r#195
[#294 ']']: r#195
[#294 '^']: r#195
[#294 '^=']: r#195
[#294 '{']: r#195
[#294 '|']: r#195
[#294 '|=']: r#195
[#294 '||']: r#195
[#295 ']']: s#471
[#296 ')']: s#304
[#297 ',']: s#386
[#298 '>']: s#225
[#299 ')']: r#196
[#299 ',']: r#196
[#299 ';']: r#196
[#299 '=']: r#196
[#299 '>']: r#196
[#299 '{']: r#196
[#299 '}']: r#196
[#300 ')']: r#197
[#300 ',']: r#197
[#300 ';']: r#197
[#300 '=']: r#197
[#300 '>']: r#197
[#300 '{']: r#197
[#300 '}']: r#197
[#301 '<']: s#167
[#302 ',']: s#386
[#303 '!=']: r#198
[#303 '%']: r#198
[#303 '&&']: r#198
[#303 '&']: r#198
[#303 ')']: r#198
[#303 '*']: r#198
[#303 '+']: r#198
[#303 ',']: r#198
[#303 '-']: r#198
[#303 '.']: r#198
[#303 '/']: r#198
[#303 ':']: r#198
[#303 ';']: r#198
[#303 '<']: r#198
[#303 '<<']: r#198
[#303 '<=']: r#198
[#303 '==']: r#198
[#303 '>']: r#198
[#303 '>=']: r#198
[#303 '>>']: r#198
[#303 '[']: r#198
[#303 ']']: r#198
[#303 '^']: r#198
[#303 '{']: r#198
[#303 '|']: r#198
[#303 '||']: r#198
[#304 '!=']: r#199
[#304 '%']: r#199
[#304 '%=']: r#199
[#304 '&&']: r#199
[#304 '&']: r#199
[#304 '&=']: r#199
[#304 ')']: r#199
[#304 '*']: r#199
[#304 '*=']: r#199
[#304 '+']: r#199
[#304 '++']: r#199
[#304 '+=']: r#199
[#304 ',']: r#199
[#304 '-']: r#199
[#304 '--']: r#199
[#304 '-=']: r#199
[#304 '->']: r#199
[#304 '.']: r#199
[#304 '/']: r#199
[#304 '/=']: r#199
[#304 ':']: r#199
[#304 ';']: r#199
[#304 '<']: r#199
[#304 '<<']: r#199
[#304 '<<=']: r#199
[#304 '<=']: r#199
[#304 '=']: r#199
[#304 '==']: r#199
[#304 '>']: r#199
[#304 '>=']: r#199
[#304 '>>']: r#199
[#304 '>>=']: r#199
[#304 '@']: r#199
[#304 '[']: r#199
[#304 ']']: r#199
[#304 '^']: r#199
[#304 '^=']: r#199
[#304 'array']: r#199
[#304 'bool']: r#199
[#304 'f16']: r#199
[#304 'f32']: r#199
[#304 'fn']: r#199
[#304 'i32']: r#199
[#304 'override']: r#199
[#304 'ptr']: r#199
[#304 'sampler']: r#199
[#304 'sampler_comparison']: r#199
[#304 'texture_1d']: r#199
[#304 'texture_2d']: r#199
[#304 'texture_2d_array']: r#199
[#304 'texture_3d']: r#199
[#304 'texture_cube']: r#199
[#304 'texture_cube_array']: r#199
[#304 'texture_depth_2d']: r#199
[#304 'texture_depth_2d_array']: r#199
[#304 'texture_depth_cube']: r#199
[#304 'texture_depth_cube_array']: r#199
[#304 'texture_depth_multisampled_2d']: r#199
[#304 'texture_multisampled_2d']: r#199
[#304 'texture_storage_1d']: r#199
[#304 'texture_storage_2d']: r#199
[#304 'texture_storage_2d_array']: r#199
[#304 'texture_storage_3d']: r#199
[#304 'u32']: r#199
[#304 'var']: r#199
[#304 '{']: r#199
[#304 '|']: r#199
[#304 '|=']: r#199
[#304 '||']: r#199
[#305 ',']: s#386
[#306 ',']: r#200
[#306 '>']: r#200
[#307 ',']: r#201
[#307 '>']: r#201
[#308 ',']: r#202
[#308 '>']: r#202
[#309 ',']: r#203
[#309 '>']: r#203
[#310 ',']: r#204
[#310 '>']: r#204
[#311 '>']: s#225
[#312 '>']: s#225
[#313 ',']: s#386
[#314 ',']: r#205
[#315 ',']: r#206
[#316 ',']: r#207
[#317 ',']: r#208
[#318 ',']: r#209
[#319 ',']: r#210
[#320 ',']: r#211
[#321 ',']: r#212
[#322 ',']: r#213
[#323 ',']: r#214
[#324 ',']: r#215
[#325 ',']: r#216
[#326 ',']: r#217
[#327 ',']: r#218
[#328 ',']: r#219
[#329 ',']: r#220
[#330 '}']: s#457
[#331 '}']: r#221
[#332 '&']: s#72
[#332 '*']: s#71
[#332 ';']: s#19
[#332 'break']: s#358
[#332 'const']: s#357
[#332 'continue']: s#359
[#332 'discard']: s#344
[#332 'for']: s#352
[#332 'if']: s#363
[#332 'let']: s#356
[#332 'loop']: s#351
[#332 'return']: s#348
[#332 'static_assert']: s#25
[#332 'switch']: s#350
[#332 'var']: s#157
[#332 'while']: s#353
[#332 '{']: s#176
[#332 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#333 '&']: r#222
[#333 '(']: r#222
[#333 '*']: r#222
[#333 ';']: r#222
[#333 'break']: r#222
[#333 'const']: r#222
[#333 'continue']: r#222
[#333 'continuing']: r#222
[#333 'discard']: r#222
[#333 'for']: r#222
[#333 'if']: r#222
[#333 'let']: r#222
[#333 'loop']: r#222
[#333 'return']: r#222
[#333 'static_assert']: r#222
[#333 'switch']: r#222
[#333 'var']: r#222
[#333 'while']: r#222
[#333 '{']: r#222
[#333 '}']: r#222
[#333 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#222
[#334 ';']: s#19
[#335 '&']: r#223
[#335 '(']: r#223
[#335 '*']: r#223
[#335 ';']: r#223
[#335 'break']: r#223
[#335 'const']: r#223
[#335 'continue']: r#223
[#335 'continuing']: r#223
[#335 'discard']: r#223
[#335 'for']: r#223
[#335 'if']: r#223
[#335 'let']: r#223
[#335 'loop']: r#223
[#335 'return']: r#223
[#335 'static_assert']: r#223
[#335 'switch']: r#223
[#335 'var']: r#223
[#335 'while']: r#223
[#335 '{']: r#223
[#335 '}']: r#223
[#335 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#223
[#336 '&']: r#224
[#336 '(']: r#224
[#336 '*']: r#224
[#336 ';']: r#224
[#336 'break']: r#224
[#336 'const']: r#224
[#336 'continue']: r#224
[#336 'continuing']: r#224
[#336 'discard']: r#224
[#336 'for']: r#224
[#336 'if']: r#224
[#336 'let']: r#224
[#336 'loop']: r#224
[#336 'return']: r#224
[#336 'static_assert']: r#224
[#336 'switch']: r#224
[#336 'var']: r#224
[#336 'while']: r#224
[#336 '{']: r#224
[#336 '}']: r#224
[#336 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#224
[#337 '&']: r#225
[#337 '(']: r#225
[#337 '*']: r#225
[#337 ';']: r#225
[#337 'break']: r#225
[#337 'const']: r#225
[#337 'continue']: r#225
[#337 'continuing']: r#225
[#337 'discard']: r#225
[#337 'for']: r#225
[#337 'if']: r#225
[#337 'let']: r#225
[#337 'loop']: r#225
[#337 'return']: r#225
[#337 'static_assert']: r#225
[#337 'switch']: r#225
[#337 'var']: r#225
[#337 'while']: r#225
[#337 '{']: r#225
[#337 '}']: r#225
[#337 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#225
[#338 '&']: r#226
[#338 '(']: r#226
[#338 '*']: r#226
[#338 ';']: r#226
[#338 'break']: r#226
[#338 'const']: r#226
[#338 'continue']: r#226
[#338 'continuing']: r#226
[#338 'discard']: r#226
[#338 'for']: r#226
[#338 'if']: r#226
[#338 'let']: r#226
[#338 'loop']: r#226
[#338 'return']: r#226
[#338 'static_assert']: r#226
[#338 'switch']: r#226
[#338 'var']: r#226
[#338 'while']: r#226
[#338 '{']: r#226
[#338 '}']: r#226
[#338 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#226
[#339 '&']: r#227
[#339 '(']: r#227
[#339 '*']: r#227
[#339 ';']: r#227
[#339 'break']: r#227
[#339 'const']: r#227
[#339 'continue']: r#227
[#339 'continuing']: r#227
[#339 'discard']: r#227
[#339 'for']: r#227
[#339 'if']: r#227
[#339 'let']: r#227
[#339 'loop']: r#227
[#339 'return']: r#227
[#339 'static_assert']: r#227
[#339 'switch']: r#227
[#339 'var']: r#227
[#339 'while']: r#227
[#339 '{']: r#227
[#339 '}']: r#227
[#339 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#340 ';']: s#19
[#341 ';']: s#19
[#342 ';']: s#19
[#343 ';']: s#19
[#344 ';']: s#19
[#345 ';']: s#19
[#346 '&']: r#228
[#346 '(']: r#228
[#346 '*']: r#228
[#346 ';']: r#228
[#346 'break']: r#228
[#346 'const']: r#228
[#346 'continue']: r#228
[#346 'continuing']: r#228
[#346 'discard']: r#228
[#346 'for']: r#228
[#346 'if']: r#228
[#346 'let']: r#228
[#346 'loop']: r#228
[#346 'return']: r#228
[#346 'static_assert']: r#228
[#346 'switch']: r#228
[#346 'var']: r#228
[#346 'while']: r#228
[#346 '{']: r#228
[#346 '}']: r#228
[#346 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#228
[#347 ';']: s#19
[#348 '!']: s#69
[#348 '&']: s#72
[#348 '(']: s#114
[#348 '*']: s#71
[#348 '-']: s#68
[#348 'array']: s#82
[#348 'bitcast']: s#77
[#348 'bool']: s#87
[#348 'f16']: s#116
[#348 'f32']: s#115
[#348 'false']: s#113
[#348 'i32']: s#117
[#348 'mat2x2']: s#98
[#348 'mat2x3']: s#99
[#348 'mat2x4']: s#100
[#348 'mat3x2']: s#101
[#348 'mat3x3']: s#102
[#348 'mat3x4']: s#103
[#348 'mat4x2']: s#104
[#348 'mat4x3']: s#105
[#348 'mat4x4']: s#106
[#348 'ptr']: s#119
[#348 'sampler']: s#133
[#348 'sampler_comparison']: s#134
[#348 'texture_1d']: s#140
[#348 'texture_2d']: s#141
[#348 'texture_2d_array']: s#142
[#348 'texture_3d']: s#143
[#348 'texture_cube']: s#144
[#348 'texture_cube_array']: s#145
[#348 'texture_depth_2d']: s#135
[#348 'texture_depth_2d_array']: s#136
[#348 'texture_depth_cube']: s#137
[#348 'texture_depth_cube_array']: s#138
[#348 'texture_depth_multisampled_2d']: s#139
[#348 'texture_multisampled_2d']: s#146
[#348 'texture_storage_1d']: s#147
[#348 'texture_storage_2d']: s#148
[#348 'texture_storage_2d_array']: s#149
[#348 'texture_storage_3d']: s#150
[#348 'true']: s#112
[#348 'u32']: s#118
[#348 'vec2']: s#95
[#348 'vec3']: s#96
[#348 'vec4']: s#97
[#348 '~']: s#70
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#348 /0[fh]/]: s#128
[#348 /0[iu]?/]: s#108
[#348 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#348 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#348 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#348 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#348 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#348 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#348 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#348 /[1-9][0-9]*[fh]/]: s#129
[#348 /[1-9][0-9]*[iu]?/]: s#109
[#349 'else']: s#444
[#350 '!']: s#69
[#350 '&']: s#72
[#350 '(']: s#114
[#350 '*']: s#71
[#350 '-']: s#68
[#350 'array']: s#82
[#350 'bitcast']: s#77
[#350 'bool']: s#87
[#350 'f16']: s#116
[#350 'f32']: s#115
[#350 'false']: s#113
[#350 'i32']: s#117
[#350 'mat2x2']: s#98
[#350 'mat2x3']: s#99
[#350 'mat2x4']: s#100
[#350 'mat3x2']: s#101
[#350 'mat3x3']: s#102
[#350 'mat3x4']: s#103
[#350 'mat4x2']: s#104
[#350 'mat4x3']: s#105
[#350 'mat4x4']: s#106
[#350 'ptr']: s#119
[#350 'sampler']: s#133
[#350 'sampler_comparison']: s#134
[#350 'texture_1d']: s#140
[#350 'texture_2d']: s#141
[#350 'texture_2d_array']: s#142
[#350 'texture_3d']: s#143
[#350 'texture_cube']: s#144
[#350 'texture_cube_array']: s#145
[#350 'texture_depth_2d']: s#135
[#350 'texture_depth_2d_array']: s#136
[#350 'texture_depth_cube']: s#137
[#350 'texture_depth_cube_array']: s#138
[#350 'texture_depth_multisampled_2d']: s#139
[#350 'texture_multisampled_2d']: s#146
[#350 'texture_storage_1d']: s#147
[#350 'texture_storage_2d']: s#148
[#350 'texture_storage_2d_array']: s#149
[#350 'texture_storage_3d']: s#150
[#350 'true']: s#112
[#350 'u32']: s#118
[#350 'vec2']: s#95
[#350 'vec3']: s#96
[#350 'vec4']: s#97
[#350 '~']: s#70
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#350 /0[fh]/]: s#128
[#350 /0[iu]?/]: s#108
[#350 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#350 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#350 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#350 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#350 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#350 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#350 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#350 /[1-9][0-9]*[fh]/]: s#129
[#350 /[1-9][0-9]*[iu]?/]: s#109
[#351 '{']: s#176
[#352 '(']: s#114
[#353 '!']: s#69
[#353 '&']: s#72
[#353 '(']: s#114
[#353 '*']: s#71
[#353 '-']: s#68
[#353 'array']: s#82
[#353 'bitcast']: s#77
[#353 'bool']: s#87
[#353 'f16']: s#116
[#353 'f32']: s#115
[#353 'false']: s#113
[#353 'i32']: s#117
[#353 'mat2x2']: s#98
[#353 'mat2x3']: s#99
[#353 'mat2x4']: s#100
[#353 'mat3x2']: s#101
[#353 'mat3x3']: s#102
[#353 'mat3x4']: s#103
[#353 'mat4x2']: s#104
[#353 'mat4x3']: s#105
[#353 'mat4x4']: s#106
[#353 'ptr']: s#119
[#353 'sampler']: s#133
[#353 'sampler_comparison']: s#134
[#353 'texture_1d']: s#140
[#353 'texture_2d']: s#141
[#353 'texture_2d_array']: s#142
[#353 'texture_3d']: s#143
[#353 'texture_cube']: s#144
[#353 'texture_cube_array']: s#145
[#353 'texture_depth_2d']: s#135
[#353 'texture_depth_2d_array']: s#136
[#353 'texture_depth_cube']: s#137
[#353 'texture_depth_cube_array']: s#138
[#353 'texture_depth_multisampled_2d']: s#139
[#353 'texture_multisampled_2d']: s#146
[#353 'texture_storage_1d']: s#147
[#353 'texture_storage_2d']: s#148
[#353 'texture_storage_2d_array']: s#149
[#353 'texture_storage_3d']: s#150
[#353 'true']: s#112
[#353 'u32']: s#118
[#353 'vec2']: s#95
[#353 'vec3']: s#96
[#353 'vec4']: s#97
[#353 '~']: s#70
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#353 /0[fh]/]: s#128
[#353 /0[iu]?/]: s#108
[#353 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#353 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#353 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#353 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#353 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#353 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#353 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#353 /[1-9][0-9]*[fh]/]: s#129
[#353 /[1-9][0-9]*[iu]?/]: s#109
[#354 '(']: s#114
[#355 ';']: r#229
[#355 '=']: s#170
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#358 ';']: r#230
[#359 ';']: r#231
[#360 ')']: r#232
[#360 ';']: r#232
[#361 ')']: r#233
[#361 ';']: r#233
[#362 ')']: r#234
[#362 ';']: r#234
[#363 '!']: s#69
[#363 '&']: s#72
[#363 '(']: s#114
[#363 '*']: s#71
[#363 '-']: s#68
[#363 'array']: s#82
[#363 'bitcast']: s#77
[#363 'bool']: s#87
[#363 'f16']: s#116
[#363 'f32']: s#115
[#363 'false']: s#113
[#363 'i32']: s#117
[#363 'mat2x2']: s#98
[#363 'mat2x3']: s#99
[#363 'mat2x4']: s#100
[#363 'mat3x2']: s#101
[#363 'mat3x3']: s#102
[#363 'mat3x4']: s#103
[#363 'mat4x2']: s#104
[#363 'mat4x3']: s#105
[#363 'mat4x4']: s#106
[#363 'ptr']: s#119
[#363 'sampler']: s#133
[#363 'sampler_comparison']: s#134
[#363 'texture_1d']: s#140
[#363 'texture_2d']: s#141
[#363 'texture_2d_array']: s#142
[#363 'texture_3d']: s#143
[#363 'texture_cube']: s#144
[#363 'texture_cube_array']: s#145
[#363 'texture_depth_2d']: s#135
[#363 'texture_depth_2d_array']: s#136
[#363 'texture_depth_cube']: s#137
[#363 'texture_depth_cube_array']: s#138
[#363 'texture_depth_multisampled_2d']: s#139
[#363 'texture_multisampled_2d']: s#146
[#363 'texture_storage_1d']: s#147
[#363 'texture_storage_2d']: s#148
[#363 'texture_storage_2d_array']: s#149
[#363 'texture_storage_3d']: s#150
[#363 'true']: s#112
[#363 'u32']: s#118
[#363 'vec2']: s#95
[#363 'vec3']: s#96
[#363 'vec4']: s#97
[#363 '~']: s#70
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#363 /0[fh]/]: s#128
[#363 /0[iu]?/]: s#108
[#363 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#363 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#363 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#363 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#363 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#363 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#363 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#363 /[1-9][0-9]*[fh]/]: s#129
[#363 /[1-9][0-9]*[iu]?/]: s#109
[#364 '%=']: s#426
[#364 '&=']: s#427
[#364 '*=']: s#424
[#364 '++']: s#410
[#364 '+=']: s#422
[#364 '--']: s#411
[#364 '-=']: s#423
[#364 '/=']: s#425
[#364 '<<=']: s#431
[#364 '=']: s#170
[#364 '>>=']: s#430
[#364 '^=']: s#429
[#364 '|=']: s#428
[#365 '(']: s#114
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#366 '(']: r#235
[#367 '&']: s#72
[#367 '*']: s#71
[#368 '&']: r#236
[#368 '(']: r#236
[#368 '*']: r#236
[#369 '&']: r#237
[#369 '(']: r#237
[#369 '*']: r#237
[#370 '@']: s#31
[#371 ',']: s#386
[#372 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#286
[#374 '@']: s#31
[#375 ';']: r#238
[#376 ';']: r#239
[#376 '=']: r#239
[#377 'array']: s#301
[#377 'bool']: s#87
[#377 'f16']: s#116
[#377 'f32']: s#115
[#377 'i32']: s#117
[#377 'ptr']: s#119
[#377 'sampler']: s#133
[#377 'sampler_comparison']: s#134
[#377 'texture_1d']: s#140
[#377 'texture_2d']: s#141
[#377 'texture_2d_array']: s#142
[#377 'texture_3d']: s#143
[#377 'texture_cube']: s#144
[#377 'texture_cube_array']: s#145
[#377 'texture_depth_2d']: s#135
[#377 'texture_depth_2d_array']: s#136
[#377 'texture_depth_cube']: s#137
[#377 'texture_depth_cube_array']: s#138
[#377 'texture_depth_multisampled_2d']: s#139
[#377 'texture_multisampled_2d']: s#146
[#377 'texture_storage_1d']: s#147
[#377 'texture_storage_2d']: s#148
[#377 'texture_storage_2d_array']: s#149
[#377 'texture_storage_3d']: s#150
[#377 'u32']: s#118
[#377 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#378 'array']: r#240
[#378 'bool']: r#240
[#378 'f16']: r#240
[#378 'f32']: r#240
[#378 'i32']: r#240
[#378 'ptr']: r#240
[#378 'sampler']: r#240
[#378 'sampler_comparison']: r#240
[#378 'texture_1d']: r#240
[#378 'texture_2d']: r#240
[#378 'texture_2d_array']: r#240
[#378 'texture_3d']: r#240
[#378 'texture_cube']: r#240
[#378 'texture_cube_array']: r#240
[#378 'texture_depth_2d']: r#240
[#378 'texture_depth_2d_array']: r#240
[#378 'texture_depth_cube']: r#240
[#378 'texture_depth_cube_array']: r#240
[#378 'texture_depth_multisampled_2d']: r#240
[#378 'texture_multisampled_2d']: r#240
[#378 'texture_storage_1d']: r#240
[#378 'texture_storage_2d']: r#240
[#378 'texture_storage_2d_array']: r#240
[#378 'texture_storage_3d']: r#240
[#378 'u32']: r#240
[#378 '{']: r#240
[#379 ';']: r#241
[#380 '!']: s#69
[#380 '&']: s#72
[#380 '(']: s#114
[#380 '*']: s#71
[#380 '-']: s#68
[#380 'array']: s#82
[#380 'bitcast']: s#77
[#380 'bool']: s#87
[#380 'f16']: s#116
[#380 'f32']: s#115
[#380 'false']: s#113
[#380 'i32']: s#117
[#380 'mat2x2']: s#98
[#380 'mat2x3']: s#99
[#380 'mat2x4']: s#100
[#380 'mat3x2']: s#101
[#380 'mat3x3']: s#102
[#380 'mat3x4']: s#103
[#380 'mat4x2']: s#104
[#380 'mat4x3']: s#105
[#380 'mat4x4']: s#106
[#380 'ptr']: s#119
[#380 'sampler']: s#133
[#380 'sampler_comparison']: s#134
[#380 'texture_1d']: s#140
[#380 'texture_2d']: s#141
[#380 'texture_2d_array']: s#142
[#380 'texture_3d']: s#143
[#380 'texture_cube']: s#144
[#380 'texture_cube_array']: s#145
[#380 'texture_depth_2d']: s#135
[#380 'texture_depth_2d_array']: s#136
[#380 'texture_depth_cube']: s#137
[#380 'texture_depth_cube_array']: s#138
[#380 'texture_depth_multisampled_2d']: s#139
[#380 'texture_multisampled_2d']: s#146
[#380 'texture_storage_1d']: s#147
[#380 'texture_storage_2d']: s#148
[#380 'texture_storage_2d_array']: s#149
[#380 'texture_storage_3d']: s#150
[#380 'true']: s#112
[#380 'u32']: s#118
[#380 'vec2']: s#95
[#380 'vec3']: s#96
[#380 'vec4']: s#97
[#380 '~']: s#70
[#380 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#380 /0[fh]/]: s#128
[#380 /0[iu]?/]: s#108
[#380 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#380 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#380 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#380 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#380 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#380 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#380 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#380 /[1-9][0-9]*[fh]/]: s#129
[#380 /[1-9][0-9]*[iu]?/]: s#109
[#381 ';']: r#242
[#382 ',']: s#386
[#383 ';']: r#243
[#383 '=']: r#243
[#384 '>']: s#225
[#385 'read']: s#509
[#385 'read_write']: s#511
[#385 'write']: s#510
[#386 '!']: r#244
[#386 '&']: r#244
[#386 '(']: r#244
[#386 ')']: r#244
[#386 '*']: r#244
[#386 '-']: r#244
[#386 ':']: r#244
[#386 '@']: r#244
[#386 'array']: r#244
[#386 'bitcast']: r#244
[#386 'bool']: r#244
[#386 'default']: r#244
[#386 'f16']: r#244
[#386 'f32']: r#244
[#386 'false']: r#244
[#386 'i32']: r#244
[#386 'mat2x2']: r#244
[#386 'mat2x3']: r#244
[#386 'mat2x4']: r#244
[#386 'mat3x2']: r#244
[#386 'mat3x3']: r#244
[#386 'mat3x4']: r#244
[#386 'mat4x2']: r#244
[#386 'mat4x3']: r#244
[#386 'mat4x4']: r#244
[#386 'ptr']: r#244
[#386 'sampler']: r#244
[#386 'sampler_comparison']: r#244
[#386 'texture_1d']: r#244
[#386 'texture_2d']: r#244
[#386 'texture_2d_array']: r#244
[#386 'texture_3d']: r#244
[#386 'texture_cube']: r#244
[#386 'texture_cube_array']: r#244
[#386 'texture_depth_2d']: r#244
[#386 'texture_depth_2d_array']: r#244
[#386 'texture_depth_cube']: r#244
[#386 'texture_depth_cube_array']: r#244
[#386 'texture_depth_multisampled_2d']: r#244
[#386 'texture_multisampled_2d']: r#244
[#386 'texture_storage_1d']: r#244
[#386 'texture_storage_2d']: r#244
[#386 'texture_storage_2d_array']: r#244
[#386 'texture_storage_3d']: r#244
[#386 'true']: r#244
[#386 'u32']: r#244
[#386 'vec2']: r#244
[#386 'vec3']: r#244
[#386 'vec4']: r#244
[#386 '{']: r#244
[#386 '}']: r#244
[#386 '~']: r#244
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#244
[#387 ';']: r#245
[#388 ';']: r#246
[#388 '=']: r#246
[#390 ':']: s#378
[#391 ',']: s#386
[#392 ',']: r#247
[#392 '}']: r#247
[#393 ',']: s#386
[#394 '@']: s#31
[#395 ')']: s#304
[#396 ')']: r#248
[#397 ',']: s#386
[#398 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#400 '@']: s#31
[#401 '(']: r#249
[#402 '.']: s#194
[#402 '[']: s#193
[#403 '%=']: r#250
[#403 '&=']: r#250
[#403 ')']: r#250
[#403 '*=']: r#250
[#403 '++']: r#250
[#403 '+=']: r#250
[#403 '--']: r#250
[#403 '-=']: r#250
[#403 '.']: r#250
[#403 '/=']: r#250
[#403 '<<=']: r#250
[#403 '=']: r#250
[#403 '>>=']: r#250
[#403 '[']: r#250
[#403 '^=']: r#250
[#403 '|=']: r#250
[#404 '&']: s#72
[#404 '*']: s#71
[#405 '!']: s#69
[#405 '&']: s#72
[#405 '(']: s#114
[#405 '*']: s#71
[#405 '-']: s#68
[#405 'array']: s#82
[#405 'bitcast']: s#77
[#405 'bool']: s#87
[#405 'f16']: s#116
[#405 'f32']: s#115
[#405 'false']: s#113
[#405 'i32']: s#117
[#405 'mat2x2']: s#98
[#405 'mat2x3']: s#99
[#405 'mat2x4']: s#100
[#405 'mat3x2']: s#101
[#405 'mat3x3']: s#102
[#405 'mat3x4']: s#103
[#405 'mat4x2']: s#104
[#405 'mat4x3']: s#105
[#405 'mat4x4']: s#106
[#405 'ptr']: s#119
[#405 'sampler']: s#133
[#405 'sampler_comparison']: s#134
[#405 'texture_1d']: s#140
[#405 'texture_2d']: s#141
[#405 'texture_2d_array']: s#142
[#405 'texture_3d']: s#143
[#405 'texture_cube']: s#144
[#405 'texture_cube_array']: s#145
[#405 'texture_depth_2d']: s#135
[#405 'texture_depth_2d_array']: s#136
[#405 'texture_depth_cube']: s#137
[#405 'texture_depth_cube_array']: s#138
[#405 'texture_depth_multisampled_2d']: s#139
[#405 'texture_multisampled_2d']: s#146
[#405 'texture_storage_1d']: s#147
[#405 'texture_storage_2d']: s#148
[#405 'texture_storage_2d_array']: s#149
[#405 'texture_storage_3d']: s#150
[#405 'true']: s#112
[#405 'u32']: s#118
[#405 'vec2']: s#95
[#405 'vec3']: s#96
[#405 'vec4']: s#97
[#405 '~']: s#70
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#405 /0[fh]/]: s#128
[#405 /0[iu]?/]: s#108
[#405 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#405 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#405 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#405 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#405 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#405 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#405 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#405 /[1-9][0-9]*[fh]/]: s#129
[#405 /[1-9][0-9]*[iu]?/]: s#109
[#406 ')']: r#251
[#406 ';']: r#251
[#407 ')']: r#252
[#407 ';']: r#252
[#408 '!']: r#253
[#408 '&']: r#253
[#408 '(']: r#253
[#408 '*']: r#253
[#408 '-']: r#253
[#408 'array']: r#253
[#408 'bitcast']: r#253
[#408 'bool']: r#253
[#408 'f16']: r#253
[#408 'f32']: r#253
[#408 'false']: r#253
[#408 'i32']: r#253
[#408 'mat2x2']: r#253
[#408 'mat2x3']: r#253
[#408 'mat2x4']: r#253
[#408 'mat3x2']: r#253
[#408 'mat3x3']: r#253
[#408 'mat3x4']: r#253
[#408 'mat4x2']: r#253
[#408 'mat4x3']: r#253
[#408 'mat4x4']: r#253
[#408 'ptr']: r#253
[#408 'sampler']: r#253
[#408 'sampler_comparison']: r#253
[#408 'texture_1d']: r#253
[#408 'texture_2d']: r#253
[#408 'texture_2d_array']: r#253
[#408 'texture_3d']: r#253
[#408 'texture_cube']: r#253
[#408 'texture_cube_array']: r#253
[#408 'texture_depth_2d']: r#253
[#408 'texture_depth_2d_array']: r#253
[#408 'texture_depth_cube']: r#253
[#408 'texture_depth_cube_array']: r#253
[#408 'texture_depth_multisampled_2d']: r#253
[#408 'texture_multisampled_2d']: r#253
[#408 'texture_storage_1d']: r#253
[#408 'texture_storage_2d']: r#253
[#408 'texture_storage_2d_array']: r#253
[#408 'texture_storage_3d']: r#253
[#408 'true']: r#253
[#408 'u32']: r#253
[#408 'vec2']: r#253
[#408 'vec3']: r#253
[#408 'vec4']: r#253
[#408 '~']: r#253
[#409 '!']: r#254
[#409 '&']: r#254
[#409 '(']: r#254
[#409 '*']: r#254
[#409 '-']: r#254
[#409 'array']: r#254
[#409 'bitcast']: r#254
[#409 'bool']: r#254
[#409 'f16']: r#254
[#409 'f32']: r#254
[#409 'false']: r#254
[#409 'i32']: r#254
[#409 'mat2x2']: r#254
[#409 'mat2x3']: r#254
[#409 'mat2x4']: r#254
[#409 'mat3x2']: r#254
[#409 'mat3x3']: r#254
[#409 'mat3x4']: r#254
[#409 'mat4x2']: r#254
[#409 'mat4x3']: r#254
[#409 'mat4x4']: r#254
[#409 'ptr']: r#254
[#409 'sampler']: r#254
[#409 'sampler_comparison']: r#254
[#409 'texture_1d']: r#254
[#409 'texture_2d']: r#254
[#409 'texture_2d_array']: r#254
[#409 'texture_3d']: r#254
[#409 'texture_cube']: r#254
[#409 'texture_cube_array']: r#254
[#409 'texture_depth_2d']: r#254
[#409 'texture_depth_2d_array']: r#254
[#409 'texture_depth_cube']: r#254
[#409 'texture_depth_cube_array']: r#254
[#409 'texture_depth_multisampled_2d']: r#254
[#409 'texture_multisampled_2d']: r#254
[#409 'texture_storage_1d']: r#254
[#409 'texture_storage_2d']: r#254
[#409 'texture_storage_2d_array']: r#254
[#409 'texture_storage_3d']: r#254
[#409 'true']: r#254
[#409 'u32']: r#254
[#409 'vec2']: r#254
[#409 'vec3']: r#254
[#409 'vec4']: r#254
[#409 '~']: r#254
[#410 ')']: r#255
[#410 ';']: r#255
[#411 ')']: r#256
[#411 ';']: r#256
[#412 '!']: r#257
[#412 '&']: r#257
[#412 '(']: r#257
[#412 '*']: r#257
[#412 '-']: r#257
[#412 'array']: r#257
[#412 'bitcast']: r#257
[#412 'bool']: r#257
[#412 'f16']: r#257
[#412 'f32']: r#257
[#412 'false']: r#257
[#412 'i32']: r#257
[#412 'mat2x2']: r#257
[#412 'mat2x3']: r#257
[#412 'mat2x4']: r#257
[#412 'mat3x2']: r#257
[#412 'mat3x3']: r#257
[#412 'mat3x4']: r#257
[#412 'mat4x2']: r#257
[#412 'mat4x3']: r#257
[#412 'mat4x4']: r#257
[#412 'ptr']: r#257
[#412 'sampler']: r#257
[#412 'sampler_comparison']: r#257
[#412 'texture_1d']: r#257
[#412 'texture_2d']: r#257
[#412 'texture_2d_array']: r#257
[#412 'texture_3d']: r#257
[#412 'texture_cube']: r#257
[#412 'texture_cube_array']: r#257
[#412 'texture_depth_2d']: r#257
[#412 'texture_depth_2d_array']: r#257
[#412 'texture_depth_cube']: r#257
[#412 'texture_depth_cube_array']: r#257
[#412 'texture_depth_multisampled_2d']: r#257
[#412 'texture_multisampled_2d']: r#257
[#412 'texture_storage_1d']: r#257
[#412 'texture_storage_2d']: r#257
[#412 'texture_storage_2d_array']: r#257
[#412 'texture_storage_3d']: r#257
[#412 'true']: r#257
[#412 'u32']: r#257
[#412 'vec2']: r#257
[#412 'vec3']: r#257
[#412 'vec4']: r#257
[#412 '~']: r#257
[#413 '!']: r#258
[#413 '&']: r#258
[#413 '(']: r#258
[#413 '*']: r#258
[#413 '-']: r#258
[#413 'array']: r#258
[#413 'bitcast']: r#258
[#413 'bool']: r#258
[#413 'f16']: r#258
[#413 'f32']: r#258
[#413 'false']: r#258
[#413 'i32']: r#258
[#413 'mat2x2']: r#258
[#413 'mat2x3']: r#258
[#413 'mat2x4']: r#258
[#413 'mat3x2']: r#258
[#413 'mat3x3']: r#258
[#413 'mat3x4']: r#258
[#413 'mat4x2']: r#258
[#413 'mat4x3']: r#258
[#413 'mat4x4']: r#258
[#413 'ptr']: r#258
[#413 'sampler']: r#258
[#413 'sampler_comparison']: r#258
[#413 'texture_1d']: r#258
[#413 'texture_2d']: r#258
[#413 'texture_2d_array']: r#258
[#413 'texture_3d']: r#258
[#413 'texture_cube']: r#258
[#413 'texture_cube_array']: r#258
[#413 'texture_depth_2d']: r#258
[#413 'texture_depth_2d_array']: r#258
[#413 'texture_depth_cube']: r#258
[#413 'texture_depth_cube_array']: r#258
[#413 'texture_depth_multisampled_2d']: r#258
[#413 'texture_multisampled_2d']: r#258
[#413 'texture_storage_1d']: r#258
[#413 'texture_storage_2d']: r#258
[#413 'texture_storage_2d_array']: r#258
[#413 'texture_storage_3d']: r#258
[#413 'true']: r#258
[#413 'u32']: r#258
[#413 'vec2']: r#258
[#413 'vec3']: r#258
[#413 'vec4']: r#258
[#413 '~']: r#258
[#414 '!']: r#259
[#414 '&']: r#259
[#414 '(']: r#259
[#414 '*']: r#259
[#414 '-']: r#259
[#414 'array']: r#259
[#414 'bitcast']: r#259
[#414 'bool']: r#259
[#414 'f16']: r#259
[#414 'f32']: r#259
[#414 'false']: r#259
[#414 'i32']: r#259
[#414 'mat2x2']: r#259
[#414 'mat2x3']: r#259
[#414 'mat2x4']: r#259
[#414 'mat3x2']: r#259
[#414 'mat3x3']: r#259
[#414 'mat3x4']: r#259
[#414 'mat4x2']: r#259
[#414 'mat4x3']: r#259
[#414 'mat4x4']: r#259
[#414 'ptr']: r#259
[#414 'sampler']: r#259
[#414 'sampler_comparison']: r#259
[#414 'texture_1d']: r#259
[#414 'texture_2d']: r#259
[#414 'texture_2d_array']: r#259
[#414 'texture_3d']: r#259
[#414 'texture_cube']: r#259
[#414 'texture_cube_array']: r#259
[#414 'texture_depth_2d']: r#259
[#414 'texture_depth_2d_array']: r#259
[#414 'texture_depth_cube']: r#259
[#414 'texture_depth_cube_array']: r#259
[#414 'texture_depth_multisampled_2d']: r#259
[#414 'texture_multisampled_2d']: r#259
[#414 'texture_storage_1d']: r#259
[#414 'texture_storage_2d']: r#259
[#414 'texture_storage_2d_array']: r#259
[#414 'texture_storage_3d']: r#259
[#414 'true']: r#259
[#414 'u32']: r#259
[#414 'vec2']: r#259
[#414 'vec3']: r#259
[#414 'vec4']: r#259
[#414 '~']: r#259
[#415 '!']: r#260
[#415 '&']: r#260
[#415 '(']: r#260
[#415 '*']: r#260
[#415 '-']: r#260
[#415 'array']: r#260
[#415 'bitcast']: r#260
[#415 'bool']: r#260
[#415 'f16']: r#260
[#415 'f32']: r#260
[#415 'false']: r#260
[#415 'i32']: r#260
[#415 'mat2x2']: r#260
[#415 'mat2x3']: r#260
[#415 'mat2x4']: r#260
[#415 'mat3x2']: r#260
[#415 'mat3x3']: r#260
[#415 'mat3x4']: r#260
[#415 'mat4x2']: r#260
[#415 'mat4x3']: r#260
[#415 'mat4x4']: r#260
[#415 'ptr']: r#260
[#415 'sampler']: r#260
[#415 'sampler_comparison']: r#260
[#415 'texture_1d']: r#260
[#415 'texture_2d']: r#260
[#415 'texture_2d_array']: r#260
[#415 'texture_3d']: r#260
[#415 'texture_cube']: r#260
[#415 'texture_cube_array']: r#260
[#415 'texture_depth_2d']: r#260
[#415 'texture_depth_2d_array']: r#260
[#415 'texture_depth_cube']: r#260
[#415 'texture_depth_cube_array']: r#260
[#415 'texture_depth_multisampled_2d']: r#260
[#415 'texture_multisampled_2d']: r#260
[#415 'texture_storage_1d']: r#260
[#415 'texture_storage_2d']: r#260
[#415 'texture_storage_2d_array']: r#260
[#415 'texture_storage_3d']: r#260
[#415 'true']: r#260
[#415 'u32']: r#260
[#415 'vec2']: r#260
[#415 'vec3']: r#260
[#415 'vec4']: r#260
[#415 '~']: r#260
[#416 '!']: r#261
[#416 '&']: r#261
[#416 '(']: r#261
[#416 '*']: r#261
[#416 '-']: r#261
[#416 'array']: r#261
[#416 'bitcast']: r#261
[#416 'bool']: r#261
[#416 'f16']: r#261
[#416 'f32']: r#261
[#416 'false']: r#261
[#416 'i32']: r#261
[#416 'mat2x2']: r#261
[#416 'mat2x3']: r#261
[#416 'mat2x4']: r#261
[#416 'mat3x2']: r#261
[#416 'mat3x3']: r#261
[#416 'mat3x4']: r#261
[#416 'mat4x2']: r#261
[#416 'mat4x3']: r#261
[#416 'mat4x4']: r#261
[#416 'ptr']: r#261
[#416 'sampler']: r#261
[#416 'sampler_comparison']: r#261
[#416 'texture_1d']: r#261
[#416 'texture_2d']: r#261
[#416 'texture_2d_array']: r#261
[#416 'texture_3d']: r#261
[#416 'texture_cube']: r#261
[#416 'texture_cube_array']: r#261
[#416 'texture_depth_2d']: r#261
[#416 'texture_depth_2d_array']: r#261
[#416 'texture_depth_cube']: r#261
[#416 'texture_depth_cube_array']: r#261
[#416 'texture_depth_multisampled_2d']: r#261
[#416 'texture_multisampled_2d']: r#261
[#416 'texture_storage_1d']: r#261
[#416 'texture_storage_2d']: r#261
[#416 'texture_storage_2d_array']: r#261
[#416 'texture_storage_3d']: r#261
[#416 'true']: r#261
[#416 'u32']: r#261
[#416 'vec2']: r#261
[#416 'vec3']: r#261
[#416 'vec4']: r#261
[#416 '~']: r#261
[#417 '!']: r#262
[#417 '&']: r#262
[#417 '(']: r#262
[#417 '*']: r#262
[#417 '-']: r#262
[#417 'array']: r#262
[#417 'bitcast']: r#262
[#417 'bool']: r#262
[#417 'f16']: r#262
[#417 'f32']: r#262
[#417 'false']: r#262
[#417 'i32']: r#262
[#417 'mat2x2']: r#262
[#417 'mat2x3']: r#262
[#417 'mat2x4']: r#262
[#417 'mat3x2']: r#262
[#417 'mat3x3']: r#262
[#417 'mat3x4']: r#262
[#417 'mat4x2']: r#262
[#417 'mat4x3']: r#262
[#417 'mat4x4']: r#262
[#417 'ptr']: r#262
[#417 'sampler']: r#262
[#417 'sampler_comparison']: r#262
[#417 'texture_1d']: r#262
[#417 'texture_2d']: r#262
[#417 'texture_2d_array']: r#262
[#417 'texture_3d']: r#262
[#417 'texture_cube']: r#262
[#417 'texture_cube_array']: r#262
[#417 'texture_depth_2d']: r#262
[#417 'texture_depth_2d_array']: r#262
[#417 'texture_depth_cube']: r#262
[#417 'texture_depth_cube_array']: r#262
[#417 'texture_depth_multisampled_2d']: r#262
[#417 'texture_multisampled_2d']: r#262
[#417 'texture_storage_1d']: r#262
[#417 'texture_storage_2d']: r#262
[#417 'texture_storage_2d_array']: r#262
[#417 'texture_storage_3d']: r#262
[#417 'true']: r#262
[#417 'u32']: r#262
[#417 'vec2']: r#262
[#417 'vec3']: r#262
[#417 'vec4']: r#262
[#417 '~']: r#262
[#418 '!']: r#263
[#418 '&']: r#263
[#418 '(']: r#263
[#418 '*']: r#263
[#418 '-']: r#263
[#418 'array']: r#263
[#418 'bitcast']: r#263
[#418 'bool']: r#263
[#418 'f16']: r#263
[#418 'f32']: r#263
[#418 'false']: r#263
[#418 'i32']: r#263
[#418 'mat2x2']: r#263
[#418 'mat2x3']: r#263
[#418 'mat2x4']: r#263
[#418 'mat3x2']: r#263
[#418 'mat3x3']: r#263
[#418 'mat3x4']: r#263
[#418 'mat4x2']: r#263
[#418 'mat4x3']: r#263
[#418 'mat4x4']: r#263
[#418 'ptr']: r#263
[#418 'sampler']: r#263
[#418 'sampler_comparison']: r#263
[#418 'texture_1d']: r#263
[#418 'texture_2d']: r#263
[#418 'texture_2d_array']: r#263
[#418 'texture_3d']: r#263
[#418 'texture_cube']: r#263
[#418 'texture_cube_array']: r#263
[#418 'texture_depth_2d']: r#263
[#418 'texture_depth_2d_array']: r#263
[#418 'texture_depth_cube']: r#263
[#418 'texture_depth_cube_array']: r#263
[#418 'texture_depth_multisampled_2d']: r#263
[#418 'texture_multisampled_2d']: r#263
[#418 'texture_storage_1d']: r#263
[#418 'texture_storage_2d']: r#263
[#418 'texture_storage_2d_array']: r#263
[#418 'texture_storage_3d']: r#263
[#418 'true']: r#263
[#418 'u32']: r#263
[#418 'vec2']: r#263
[#418 'vec3']: r#263
[#418 'vec4']: r#263
[#418 '~']: r#263
[#419 '!']: r#264
[#419 '&']: r#264
[#419 '(']: r#264
[#419 '*']: r#264
[#419 '-']: r#264
[#419 'array']: r#264
[#419 'bitcast']: r#264
[#419 'bool']: r#264
[#419 'f16']: r#264
[#419 'f32']: r#264
[#419 'false']: r#264
[#419 'i32']: r#264
[#419 'mat2x2']: r#264
[#419 'mat2x3']: r#264
[#419 'mat2x4']: r#264
[#419 'mat3x2']: r#264
[#419 'mat3x3']: r#264
[#419 'mat3x4']: r#264
[#419 'mat4x2']: r#264
[#419 'mat4x3']: r#264
[#419 'mat4x4']: r#264
[#419 'ptr']: r#264
[#419 'sampler']: r#264
[#419 'sampler_comparison']: r#264
[#419 'texture_1d']: r#264
[#419 'texture_2d']: r#264
[#419 'texture_2d_array']: r#264
[#419 'texture_3d']: r#264
[#419 'texture_cube']: r#264
[#419 'texture_cube_array']: r#264
[#419 'texture_depth_2d']: r#264
[#419 'texture_depth_2d_array']: r#264
[#419 'texture_depth_cube']: r#264
[#419 'texture_depth_cube_array']: r#264
[#419 'texture_depth_multisampled_2d']: r#264
[#419 'texture_multisampled_2d']: r#264
[#419 'texture_storage_1d']: r#264
[#419 'texture_storage_2d']: r#264
[#419 'texture_storage_2d_array']: r#264
[#419 'texture_storage_3d']: r#264
[#419 'true']: r#264
[#419 'u32']: r#264
[#419 'vec2']: r#264
[#419 'vec3']: r#264
[#419 'vec4']: r#264
[#419 '~']: r#264
[#420 '!']: r#265
[#420 '&']: r#265
[#420 '(']: r#265
[#420 '*']: r#265
[#420 '-']: r#265
[#420 'array']: r#265
[#420 'bitcast']: r#265
[#420 'bool']: r#265
[#420 'f16']: r#265
[#420 'f32']: r#265
[#420 'false']: r#265
[#420 'i32']: r#265
[#420 'mat2x2']: r#265
[#420 'mat2x3']: r#265
[#420 'mat2x4']: r#265
[#420 'mat3x2']: r#265
[#420 'mat3x3']: r#265
[#420 'mat3x4']: r#265
[#420 'mat4x2']: r#265
[#420 'mat4x3']: r#265
[#420 'mat4x4']: r#265
[#420 'ptr']: r#265
[#420 'sampler']: r#265
[#420 'sampler_comparison']: r#265
[#420 'texture_1d']: r#265
[#420 'texture_2d']: r#265
[#420 'texture_2d_array']: r#265
[#420 'texture_3d']: r#265
[#420 'texture_cube']: r#265
[#420 'texture_cube_array']: r#265
[#420 'texture_depth_2d']: r#265
[#420 'texture_depth_2d_array']: r#265
[#420 'texture_depth_cube']: r#265
[#420 'texture_depth_cube_array']: r#265
[#420 'texture_depth_multisampled_2d']: r#265
[#420 'texture_multisampled_2d']: r#265
[#420 'texture_storage_1d']: r#265
[#420 'texture_storage_2d']: r#265
[#420 'texture_storage_2d_array']: r#265
[#420 'texture_storage_3d']: r#265
[#420 'true']: r#265
[#420 'u32']: r#265
[#420 'vec2']: r#265
[#420 'vec3']: r#265
[#420 'vec4']: r#265
[#420 '~']: r#265
[#421 '!']: r#266
[#421 '&']: r#266
[#421 '(']: r#266
[#421 '*']: r#266
[#421 '-']: r#266
[#421 'array']: r#266
[#421 'bitcast']: r#266
[#421 'bool']: r#266
[#421 'f16']: r#266
[#421 'f32']: r#266
[#421 'false']: r#266
[#421 'i32']: r#266
[#421 'mat2x2']: r#266
[#421 'mat2x3']: r#266
[#421 'mat2x4']: r#266
[#421 'mat3x2']: r#266
[#421 'mat3x3']: r#266
[#421 'mat3x4']: r#266
[#421 'mat4x2']: r#266
[#421 'mat4x3']: r#266
[#421 'mat4x4']: r#266
[#421 'ptr']: r#266
[#421 'sampler']: r#266
[#421 'sampler_comparison']: r#266
[#421 'texture_1d']: r#266
[#421 'texture_2d']: r#266
[#421 'texture_2d_array']: r#266
[#421 'texture_3d']: r#266
[#421 'texture_cube']: r#266
[#421 'texture_cube_array']: r#266
[#421 'texture_depth_2d']: r#266
[#421 'texture_depth_2d_array']: r#266
[#421 'texture_depth_cube']: r#266
[#421 'texture_depth_cube_array']: r#266
[#421 'texture_depth_multisampled_2d']: r#266
[#421 'texture_multisampled_2d']: r#266
[#421 'texture_storage_1d']: r#266
[#421 'texture_storage_2d']: r#266
[#421 'texture_storage_2d_array']: r#266
[#421 'texture_storage_3d']: r#266
[#421 'true']: r#266
[#421 'u32']: r#266
[#421 'vec2']: r#266
[#421 'vec3']: r#266
[#421 'vec4']: r#266
[#421 '~']: r#266
[#422 '!']: r#267
[#422 '&']: r#267
[#422 '(']: r#267
[#422 '*']: r#267
[#422 '-']: r#267
[#422 'array']: r#267
[#422 'bitcast']: r#267
[#422 'bool']: r#267
[#422 'f16']: r#267
[#422 'f32']: r#267
[#422 'false']: r#267
[#422 'i32']: r#267
[#422 'mat2x2']: r#267
[#422 'mat2x3']: r#267
[#422 'mat2x4']: r#267
[#422 'mat3x2']: r#267
[#422 'mat3x3']: r#267
[#422 'mat3x4']: r#267
[#422 'mat4x2']: r#267
[#422 'mat4x3']: r#267
[#422 'mat4x4']: r#267
[#422 'ptr']: r#267
[#422 'sampler']: r#267
[#422 'sampler_comparison']: r#267
[#422 'texture_1d']: r#267
[#422 'texture_2d']: r#267
[#422 'texture_2d_array']: r#267
[#422 'texture_3d']: r#267
[#422 'texture_cube']: r#267
[#422 'texture_cube_array']: r#267
[#422 'texture_depth_2d']: r#267
[#422 'texture_depth_2d_array']: r#267
[#422 'texture_depth_cube']: r#267
[#422 'texture_depth_cube_array']: r#267
[#422 'texture_depth_multisampled_2d']: r#267
[#422 'texture_multisampled_2d']: r#267
[#422 'texture_storage_1d']: r#267
[#422 'texture_storage_2d']: r#267
[#422 'texture_storage_2d_array']: r#267
[#422 'texture_storage_3d']: r#267
[#422 'true']: r#267
[#422 'u32']: r#267
[#422 'vec2']: r#267
[#422 'vec3']: r#267
[#422 'vec4']: r#267
[#422 '~']: r#267
[#423 '!']: r#268
[#423 '&']: r#268
[#423 '(']: r#268
[#423 '*']: r#268
[#423 '-']: r#268
[#423 'array']: r#268
[#423 'bitcast']: r#268
[#423 'bool']: r#268
[#423 'f16']: r#268
[#423 'f32']: r#268
[#423 'false']: r#268
[#423 'i32']: r#268
[#423 'mat2x2']: r#268
[#423 'mat2x3']: r#268
[#423 'mat2x4']: r#268
[#423 'mat3x2']: r#268
[#423 'mat3x3']: r#268
[#423 'mat3x4']: r#268
[#423 'mat4x2']: r#268
[#423 'mat4x3']: r#268
[#423 'mat4x4']: r#268
[#423 'ptr']: r#268
[#423 'sampler']: r#268
[#423 'sampler_comparison']: r#268
[#423 'texture_1d']: r#268
[#423 'texture_2d']: r#268
[#423 'texture_2d_array']: r#268
[#423 'texture_3d']: r#268
[#423 'texture_cube']: r#268
[#423 'texture_cube_array']: r#268
[#423 'texture_depth_2d']: r#268
[#423 'texture_depth_2d_array']: r#268
[#423 'texture_depth_cube']: r#268
[#423 'texture_depth_cube_array']: r#268
[#423 'texture_depth_multisampled_2d']: r#268
[#423 'texture_multisampled_2d']: r#268
[#423 'texture_storage_1d']: r#268
[#423 'texture_storage_2d']: r#268
[#423 'texture_storage_2d_array']: r#268
[#423 'texture_storage_3d']: r#268
[#423 'true']: r#268
[#423 'u32']: r#268
[#423 'vec2']: r#268
[#423 'vec3']: r#268
[#423 'vec4']: r#268
[#423 '~']: r#268
[#424 '!']: r#269
[#424 '&']: r#269
[#424 '(']: r#269
[#424 '*']: r#269
[#424 '-']: r#269
[#424 'array']: r#269
[#424 'bitcast']: r#269
[#424 'bool']: r#269
[#424 'f16']: r#269
[#424 'f32']: r#269
[#424 'false']: r#269
[#424 'i32']: r#269
[#424 'mat2x2']: r#269
[#424 'mat2x3']: r#269
[#424 'mat2x4']: r#269
[#424 'mat3x2']: r#269
[#424 'mat3x3']: r#269
[#424 'mat3x4']: r#269
[#424 'mat4x2']: r#269
[#424 'mat4x3']: r#269
[#424 'mat4x4']: r#269
[#424 'ptr']: r#269
[#424 'sampler']: r#269
[#424 'sampler_comparison']: r#269
[#424 'texture_1d']: r#269
[#424 'texture_2d']: r#269
[#424 'texture_2d_array']: r#269
[#424 'texture_3d']: r#269
[#424 'texture_cube']: r#269
[#424 'texture_cube_array']: r#269
[#424 'texture_depth_2d']: r#269
[#424 'texture_depth_2d_array']: r#269
[#424 'texture_depth_cube']: r#269
[#424 'texture_depth_cube_array']: r#269
[#424 'texture_depth_multisampled_2d']: r#269
[#424 'texture_multisampled_2d']: r#269
[#424 'texture_storage_1d']: r#269
[#424 'texture_storage_2d']: r#269
[#424 'texture_storage_2d_array']: r#269
[#424 'texture_storage_3d']: r#269
[#424 'true']: r#269
[#424 'u32']: r#269
[#424 'vec2']: r#269
[#424 'vec3']: r#269
[#424 'vec4']: r#269
[#424 '~']: r#269
[#425 '!']: r#270
[#425 '&']: r#270
[#425 '(']: r#270
[#425 '*']: r#270
[#425 '-']: r#270
[#425 'array']: r#270
[#425 'bitcast']: r#270
[#425 'bool']: r#270
[#425 'f16']: r#270
[#425 'f32']: r#270
[#425 'false']: r#270
[#425 'i32']: r#270
[#425 'mat2x2']: r#270
[#425 'mat2x3']: r#270
[#425 'mat2x4']: r#270
[#425 'mat3x2']: r#270
[#425 'mat3x3']: r#270
[#425 'mat3x4']: r#270
[#425 'mat4x2']: r#270
[#425 'mat4x3']: r#270
[#425 'mat4x4']: r#270
[#425 'ptr']: r#270
[#425 'sampler']: r#270
[#425 'sampler_comparison']: r#270
[#425 'texture_1d']: r#270
[#425 'texture_2d']: r#270
[#425 'texture_2d_array']: r#270
[#425 'texture_3d']: r#270
[#425 'texture_cube']: r#270
[#425 'texture_cube_array']: r#270
[#425 'texture_depth_2d']: r#270
[#425 'texture_depth_2d_array']: r#270
[#425 'texture_depth_cube']: r#270
[#425 'texture_depth_cube_array']: r#270
[#425 'texture_depth_multisampled_2d']: r#270
[#425 'texture_multisampled_2d']: r#270
[#425 'texture_storage_1d']: r#270
[#425 'texture_storage_2d']: r#270
[#425 'texture_storage_2d_array']: r#270
[#425 'texture_storage_3d']: r#270
[#425 'true']: r#270
[#425 'u32']: r#270
[#425 'vec2']: r#270
[#425 'vec3']: r#270
[#425 'vec4']: r#270
[#425 '~']: r#270
[#426 '!']: r#271
[#426 '&']: r#271
[#426 '(']: r#271
[#426 '*']: r#271
[#426 '-']: r#271
[#426 'array']: r#271
[#426 'bitcast']: r#271
[#426 'bool']: r#271
[#426 'f16']: r#271
[#426 'f32']: r#271
[#426 'false']: r#271
[#426 'i32']: r#271
[#426 'mat2x2']: r#271
[#426 'mat2x3']: r#271
[#426 'mat2x4']: r#271
[#426 'mat3x2']: r#271
[#426 'mat3x3']: r#271
[#426 'mat3x4']: r#271
[#426 'mat4x2']: r#271
[#426 'mat4x3']: r#271
[#426 'mat4x4']: r#271
[#426 'ptr']: r#271
[#426 'sampler']: r#271
[#426 'sampler_comparison']: r#271
[#426 'texture_1d']: r#271
[#426 'texture_2d']: r#271
[#426 'texture_2d_array']: r#271
[#426 'texture_3d']: r#271
[#426 'texture_cube']: r#271
[#426 'texture_cube_array']: r#271
[#426 'texture_depth_2d']: r#271
[#426 'texture_depth_2d_array']: r#271
[#426 'texture_depth_cube']: r#271
[#426 'texture_depth_cube_array']: r#271
[#426 'texture_depth_multisampled_2d']: r#271
[#426 'texture_multisampled_2d']: r#271
[#426 'texture_storage_1d']: r#271
[#426 'texture_storage_2d']: r#271
[#426 'texture_storage_2d_array']: r#271
[#426 'texture_storage_3d']: r#271
[#426 'true']: r#271
[#426 'u32']: r#271
[#426 'vec2']: r#271
[#426 'vec3']: r#271
[#426 'vec4']: r#271
[#426 '~']: r#271
[#427 '!']: r#272
[#427 '&']: r#272
[#427 '(']: r#272
[#427 '*']: r#272
[#427 '-']: r#272
[#427 'array']: r#272
[#427 'bitcast']: r#272
[#427 'bool']: r#272
[#427 'f16']: r#272
[#427 'f32']: r#272
[#427 'false']: r#272
[#427 'i32']: r#272
[#427 'mat2x2']: r#272
[#427 'mat2x3']: r#272
[#427 'mat2x4']: r#272
[#427 'mat3x2']: r#272
[#427 'mat3x3']: r#272
[#427 'mat3x4']: r#272
[#427 'mat4x2']: r#272
[#427 'mat4x3']: r#272
[#427 'mat4x4']: r#272
[#427 'ptr']: r#272
[#427 'sampler']: r#272
[#427 'sampler_comparison']: r#272
[#427 'texture_1d']: r#272
[#427 'texture_2d']: r#272
[#427 'texture_2d_array']: r#272
[#427 'texture_3d']: r#272
[#427 'texture_cube']: r#272
[#427 'texture_cube_array']: r#272
[#427 'texture_depth_2d']: r#272
[#427 'texture_depth_2d_array']: r#272
[#427 'texture_depth_cube']: r#272
[#427 'texture_depth_cube_array']: r#272
[#427 'texture_depth_multisampled_2d']: r#272
[#427 'texture_multisampled_2d']: r#272
[#427 'texture_storage_1d']: r#272
[#427 'texture_storage_2d']: r#272
[#427 'texture_storage_2d_array']: r#272
[#427 'texture_storage_3d']: r#272
[#427 'true']: r#272
[#427 'u32']: r#272
[#427 'vec2']: r#272
[#427 'vec3']: r#272
[#427 'vec4']: r#272
[#427 '~']: r#272
[#428 '!']: r#273
[#428 '&']: r#273
[#428 '(']: r#273
[#428 '*']: r#273
[#428 '-']: r#273
[#428 'array']: r#273
[#428 'bitcast']: r#273
[#428 'bool']: r#273
[#428 'f16']: r#273
[#428 'f32']: r#273
[#428 'false']: r#273
[#428 'i32']: r#273
[#428 'mat2x2']: r#273
[#428 'mat2x3']: r#273
[#428 'mat2x4']: r#273
[#428 'mat3x2']: r#273
[#428 'mat3x3']: r#273
[#428 'mat3x4']: r#273
[#428 'mat4x2']: r#273
[#428 'mat4x3']: r#273
[#428 'mat4x4']: r#273
[#428 'ptr']: r#273
[#428 'sampler']: r#273
[#428 'sampler_comparison']: r#273
[#428 'texture_1d']: r#273
[#428 'texture_2d']: r#273
[#428 'texture_2d_array']: r#273
[#428 'texture_3d']: r#273
[#428 'texture_cube']: r#273
[#428 'texture_cube_array']: r#273
[#428 'texture_depth_2d']: r#273
[#428 'texture_depth_2d_array']: r#273
[#428 'texture_depth_cube']: r#273
[#428 'texture_depth_cube_array']: r#273
[#428 'texture_depth_multisampled_2d']: r#273
[#428 'texture_multisampled_2d']: r#273
[#428 'texture_storage_1d']: r#273
[#428 'texture_storage_2d']: r#273
[#428 'texture_storage_2d_array']: r#273
[#428 'texture_storage_3d']: r#273
[#428 'true']: r#273
[#428 'u32']: r#273
[#428 'vec2']: r#273
[#428 'vec3']: r#273
[#428 'vec4']: r#273
[#428 '~']: r#273
[#429 '!']: r#274
[#429 '&']: r#274
[#429 '(']: r#274
[#429 '*']: r#274
[#429 '-']: r#274
[#429 'array']: r#274
[#429 'bitcast']: r#274
[#429 'bool']: r#274
[#429 'f16']: r#274
[#429 'f32']: r#274
[#429 'false']: r#274
[#429 'i32']: r#274
[#429 'mat2x2']: r#274
[#429 'mat2x3']: r#274
[#429 'mat2x4']: r#274
[#429 'mat3x2']: r#274
[#429 'mat3x3']: r#274
[#429 'mat3x4']: r#274
[#429 'mat4x2']: r#274
[#429 'mat4x3']: r#274
[#429 'mat4x4']: r#274
[#429 'ptr']: r#274
[#429 'sampler']: r#274
[#429 'sampler_comparison']: r#274
[#429 'texture_1d']: r#274
[#429 'texture_2d']: r#274
[#429 'texture_2d_array']: r#274
[#429 'texture_3d']: r#274
[#429 'texture_cube']: r#274
[#429 'texture_cube_array']: r#274
[#429 'texture_depth_2d']: r#274
[#429 'texture_depth_2d_array']: r#274
[#429 'texture_depth_cube']: r#274
[#429 'texture_depth_cube_array']: r#274
[#429 'texture_depth_multisampled_2d']: r#274
[#429 'texture_multisampled_2d']: r#274
[#429 'texture_storage_1d']: r#274
[#429 'texture_storage_2d']: r#274
[#429 'texture_storage_2d_array']: r#274
[#429 'texture_storage_3d']: r#274
[#429 'true']: r#274
[#429 'u32']: r#274
[#429 'vec2']: r#274
[#429 'vec3']: r#274
[#429 'vec4']: r#274
[#429 '~']: r#274
[#430 '!']: r#275
[#430 '&']: r#275
[#430 '(']: r#275
[#430 '*']: r#275
[#430 '-']: r#275
[#430 'array']: r#275
[#430 'bitcast']: r#275
[#430 'bool']: r#275
[#430 'f16']: r#275
[#430 'f32']: r#275
[#430 'false']: r#275
[#430 'i32']: r#275
[#430 'mat2x2']: r#275
[#430 'mat2x3']: r#275
[#430 'mat2x4']: r#275
[#430 'mat3x2']: r#275
[#430 'mat3x3']: r#275
[#430 'mat3x4']: r#275
[#430 'mat4x2']: r#275
[#430 'mat4x3']: r#275
[#430 'mat4x4']: r#275
[#430 'ptr']: r#275
[#430 'sampler']: r#275
[#430 'sampler_comparison']: r#275
[#430 'texture_1d']: r#275
[#430 'texture_2d']: r#275
[#430 'texture_2d_array']: r#275
[#430 'texture_3d']: r#275
[#430 'texture_cube']: r#275
[#430 'texture_cube_array']: r#275
[#430 'texture_depth_2d']: r#275
[#430 'texture_depth_2d_array']: r#275
[#430 'texture_depth_cube']: r#275
[#430 'texture_depth_cube_array']: r#275
[#430 'texture_depth_multisampled_2d']: r#275
[#430 'texture_multisampled_2d']: r#275
[#430 'texture_storage_1d']: r#275
[#430 'texture_storage_2d']: r#275
[#430 'texture_storage_2d_array']: r#275
[#430 'texture_storage_3d']: r#275
[#430 'true']: r#275
[#430 'u32']: r#275
[#430 'vec2']: r#275
[#430 'vec3']: r#275
[#430 'vec4']: r#275
[#430 '~']: r#275
[#431 '!']: r#276
[#431 '&']: r#276
[#431 '(']: r#276
[#431 '*']: r#276
[#431 '-']: r#276
[#431 'array']: r#276
[#431 'bitcast']: r#276
[#431 'bool']: r#276
[#431 'f16']: r#276
[#431 'f32']: r#276
[#431 'false']: r#276
[#431 'i32']: r#276
[#431 'mat2x2']: r#276
[#431 'mat2x3']: r#276
[#431 'mat2x4']: r#276
[#431 'mat3x2']: r#276
[#431 'mat3x3']: r#276
[#431 'mat3x4']: r#276
[#431 'mat4x2']: r#276
[#431 'mat4x3']: r#276
[#431 'mat4x4']: r#276
[#431 'ptr']: r#276
[#431 'sampler']: r#276
[#431 'sampler_comparison']: r#276
[#431 'texture_1d']: r#276
[#431 'texture_2d']: r#276
[#431 'texture_2d_array']: r#276
[#431 'texture_3d']: r#276
[#431 'texture_cube']: r#276
[#431 'texture_cube_array']: r#276
[#431 'texture_depth_2d']: r#276
[#431 'texture_depth_2d_array']: r#276
[#431 'texture_depth_cube']: r#276
[#431 'texture_depth_cube_array']: r#276
[#431 'texture_depth_multisampled_2d']: r#276
[#431 'texture_multisampled_2d']: r#276
[#431 'texture_storage_1d']: r#276
[#431 'texture_storage_2d']: r#276
[#431 'texture_storage_2d_array']: r#276
[#431 'texture_storage_3d']: r#276
[#431 'true']: r#276
[#431 'u32']: r#276
[#431 'vec2']: r#276
[#431 'vec3']: r#276
[#431 'vec4']: r#276
[#431 '~']: r#276
[#432 '{']: s#176
[#433 '=']: s#170
[#434 '=']: s#170
[#435 '!']: s#69
[#435 '&']: s#72
[#435 '(']: s#114
[#435 '*']: s#71
[#435 '-']: s#68
[#435 'array']: s#82
[#435 'bitcast']: s#77
[#435 'bool']: s#87
[#435 'f16']: s#116
[#435 'f32']: s#115
[#435 'false']: s#113
[#435 'i32']: s#117
[#435 'mat2x2']: s#98
[#435 'mat2x3']: s#99
[#435 'mat2x4']: s#100
[#435 'mat3x2']: s#101
[#435 'mat3x3']: s#102
[#435 'mat3x4']: s#103
[#435 'mat4x2']: s#104
[#435 'mat4x3']: s#105
[#435 'mat4x4']: s#106
[#435 'ptr']: s#119
[#435 'sampler']: s#133
[#435 'sampler_comparison']: s#134
[#435 'texture_1d']: s#140
[#435 'texture_2d']: s#141
[#435 'texture_2d_array']: s#142
[#435 'texture_3d']: s#143
[#435 'texture_cube']: s#144
[#435 'texture_cube_array']: s#145
[#435 'texture_depth_2d']: s#135
[#435 'texture_depth_2d_array']: s#136
[#435 'texture_depth_cube']: s#137
[#435 'texture_depth_cube_array']: s#138
[#435 'texture_depth_multisampled_2d']: s#139
[#435 'texture_multisampled_2d']: s#146
[#435 'texture_storage_1d']: s#147
[#435 'texture_storage_2d']: s#148
[#435 'texture_storage_2d_array']: s#149
[#435 'texture_storage_3d']: s#150
[#435 'true']: s#112
[#435 'u32']: s#118
[#435 'vec2']: s#95
[#435 'vec3']: s#96
[#435 'vec4']: s#97
[#435 '~']: s#70
[#435 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#435 /0[fh]/]: s#128
[#435 /0[iu]?/]: s#108
[#435 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#435 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#435 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#435 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#435 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#435 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#435 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#435 /[1-9][0-9]*[fh]/]: s#129
[#435 /[1-9][0-9]*[iu]?/]: s#109
[#436 ')']: r#277
[#436 ';']: r#277
[#437 '{']: s#176
[#438 '&']: s#72
[#438 '*']: s#71
[#438 'const']: s#357
[#438 'let']: s#356
[#438 'var']: s#157
[#438 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#439 '&']: s#72
[#439 '*']: s#71
[#439 ';']: s#19
[#439 'break']: s#358
[#439 'const']: s#357
[#439 'continue']: s#359
[#439 'discard']: s#344
[#439 'for']: s#352
[#439 'if']: s#363
[#439 'let']: s#356
[#439 'loop']: s#351
[#439 'return']: s#348
[#439 'static_assert']: s#25
[#439 'switch']: s#350
[#439 'var']: s#157
[#439 'while']: s#353
[#439 '{']: s#176
[#439 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#440 '{']: s#176
[#441 'else']: s#516
[#442 '&']: r#278
[#442 '(']: r#278
[#442 '*']: r#278
[#442 ';']: r#278
[#442 'break']: r#278
[#442 'const']: r#278
[#442 'continue']: r#278
[#442 'continuing']: r#278
[#442 'discard']: r#278
[#442 'else']: r#278
[#442 'for']: r#278
[#442 'if']: r#278
[#442 'let']: r#278
[#442 'loop']: r#278
[#442 'return']: r#278
[#442 'static_assert']: r#278
[#442 'switch']: r#278
[#442 'var']: r#278
[#442 'while']: r#278
[#442 '{']: r#278
[#442 '}']: r#278
[#442 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#278
[#443 'else']: s#444
[#444 'if']: s#512
[#445 ';']: r#279
[#446 ';']: r#280
[#447 '&']: r#281
[#447 '(']: r#281
[#447 '*']: r#281
[#447 ';']: r#281
[#447 'break']: r#281
[#447 'const']: r#281
[#447 'continue']: r#281
[#447 'continuing']: r#281
[#447 'discard']: r#281
[#447 'for']: r#281
[#447 'if']: r#281
[#447 'let']: r#281
[#447 'loop']: r#281
[#447 'return']: r#281
[#447 'static_assert']: r#281
[#447 'switch']: r#281
[#447 'var']: r#281
[#447 'while']: r#281
[#447 '{']: r#281
[#447 '}']: r#281
[#447 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#281
[#448 '&']: r#282
[#448 '(']: r#282
[#448 '*']: r#282
[#448 ';']: r#282
[#448 'break']: r#282
[#448 'const']: r#282
[#448 'continue']: r#282
[#448 'continuing']: r#282
[#448 'discard']: r#282
[#448 'for']: r#282
[#448 'if']: r#282
[#448 'let']: r#282
[#448 'loop']: r#282
[#448 'return']: r#282
[#448 'static_assert']: r#282
[#448 'switch']: r#282
[#448 'var']: r#282
[#448 'while']: r#282
[#448 '{']: r#282
[#448 '}']: r#282
[#448 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#282
[#449 '&']: r#283
[#449 '(']: r#283
[#449 '*']: r#283
[#449 ';']: r#283
[#449 'break']: r#283
[#449 'const']: r#283
[#449 'continue']: r#283
[#449 'continuing']: r#283
[#449 'discard']: r#283
[#449 'for']: r#283
[#449 'if']: r#283
[#449 'let']: r#283
[#449 'loop']: r#283
[#449 'return']: r#283
[#449 'static_assert']: r#283
[#449 'switch']: r#283
[#449 'var']: r#283
[#449 'while']: r#283
[#449 '{']: r#283
[#449 '}']: r#283
[#449 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#283
[#450 '&']: r#284
[#450 '(']: r#284
[#450 '*']: r#284
[#450 ';']: r#284
[#450 'break']: r#284
[#450 'const']: r#284
[#450 'continue']: r#284
[#450 'continuing']: r#284
[#450 'discard']: r#284
[#450 'for']: r#284
[#450 'if']: r#284
[#450 'let']: r#284
[#450 'loop']: r#284
[#450 'return']: r#284
[#450 'static_assert']: r#284
[#450 'switch']: r#284
[#450 'var']: r#284
[#450 'while']: r#284
[#450 '{']: r#284
[#450 '}']: r#284
[#450 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#284
[#451 '&']: r#285
[#451 '(']: r#285
[#451 '*']: r#285
[#451 ';']: r#285
[#451 'break']: r#285
[#451 'const']: r#285
[#451 'continue']: r#285
[#451 'continuing']: r#285
[#451 'discard']: r#285
[#451 'for']: r#285
[#451 'if']: r#285
[#451 'let']: r#285
[#451 'loop']: r#285
[#451 'return']: r#285
[#451 'static_assert']: r#285
[#451 'switch']: r#285
[#451 'var']: r#285
[#451 'while']: r#285
[#451 '{']: r#285
[#451 '}']: r#285
[#451 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#285
[#452 '&']: r#286
[#452 '(']: r#286
[#452 '*']: r#286
[#452 ';']: r#286
[#452 'break']: r#286
[#452 'const']: r#286
[#452 'continue']: r#286
[#452 'continuing']: r#286
[#452 'discard']: r#286
[#452 'for']: r#286
[#452 'if']: r#286
[#452 'let']: r#286
[#452 'loop']: r#286
[#452 'return']: r#286
[#452 'static_assert']: r#286
[#452 'switch']: r#286
[#452 'var']: r#286
[#452 'while']: r#286
[#452 '{']: r#286
[#452 '}']: r#286
[#452 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#286
[#453 '&']: r#287
[#453 '(']: r#287
[#453 '*']: r#287
[#453 ';']: r#287
[#453 'break']: r#287
[#453 'const']: r#287
[#453 'continue']: r#287
[#453 'continuing']: r#287
[#453 'discard']: r#287
[#453 'for']: r#287
[#453 'if']: r#287
[#453 'let']: r#287
[#453 'loop']: r#287
[#453 'return']: r#287
[#453 'static_assert']: r#287
[#453 'switch']: r#287
[#453 'var']: r#287
[#453 'while']: r#287
[#453 '{']: r#287
[#453 '}']: r#287
[#453 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#287
[#454 '&']: r#288
[#454 '(']: r#288
[#454 '*']: r#288
[#454 ';']: r#288
[#454 'break']: r#288
[#454 'const']: r#288
[#454 'continue']: r#288
[#454 'continuing']: r#288
[#454 'discard']: r#288
[#454 'for']: r#288
[#454 'if']: r#288
[#454 'let']: r#288
[#454 'loop']: r#288
[#454 'return']: r#288
[#454 'static_assert']: r#288
[#454 'switch']: r#288
[#454 'var']: r#288
[#454 'while']: r#288
[#454 '{']: r#288
[#454 '}']: r#288
[#454 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#288
[#455 '}']: r#289
[#456 '&']: r#290
[#456 '(']: r#290
[#456 '*']: r#290
[#456 ';']: r#290
[#456 '@']: r#290
[#456 'break']: r#290
[#456 'case']: r#290
[#456 'const']: r#290
[#456 'continue']: r#290
[#456 'continuing']: r#290
[#456 'default']: r#290
[#456 'discard']: r#290
[#456 'else']: r#290
[#456 'fn']: r#290
[#456 'for']: r#290
[#456 'if']: r#290
[#456 'let']: r#290
[#456 'loop']: r#290
[#456 'override']: r#290
[#456 'return']: r#290
[#456 'static_assert']: r#290
[#456 'struct']: r#290
[#456 'switch']: r#290
[#456 'type']: r#290
[#456 'var']: r#290
[#456 'while']: r#290
[#456 '{']: r#290
[#456 '}']: r#290
[#456 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#290
[#456 EndOfText]: r#290
[#457 '&']: r#291
[#457 '(']: r#291
[#457 '*']: r#291
[#457 ';']: r#291
[#457 '@']: r#291
[#457 'break']: r#291
[#457 'case']: r#291
[#457 'const']: r#291
[#457 'continue']: r#291
[#457 'continuing']: r#291
[#457 'default']: r#291
[#457 'discard']: r#291
[#457 'else']: r#291
[#457 'fn']: r#291
[#457 'for']: r#291
[#457 'if']: r#291
[#457 'let']: r#291
[#457 'loop']: r#291
[#457 'override']: r#291
[#457 'return']: r#291
[#457 'static_assert']: r#291
[#457 'struct']: r#291
[#457 'switch']: r#291
[#457 'type']: r#291
[#457 'var']: r#291
[#457 'while']: r#291
[#457 '{']: r#291
[#457 '}']: r#291
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#457 EndOfText]: r#291
[#458 'read']: s#509
[#458 'read_write']: s#511
[#458 'write']: s#510
[#459 '(']: r#292
[#459 ')']: r#292
[#459 ',']: r#292
[#459 ';']: r#292
[#459 '=']: r#292
[#459 '>']: r#292
[#459 '{']: r#292
[#459 '}']: r#292
[#460 '(']: r#293
[#460 ')']: r#293
[#460 ',']: r#293
[#460 ';']: r#293
[#460 '=']: r#293
[#460 '>']: r#293
[#460 '{']: r#293
[#460 '}']: r#293
[#461 'array']: s#301
[#461 'bool']: s#87
[#461 'f16']: s#116
[#461 'f32']: s#115
[#461 'i32']: s#117
[#461 'ptr']: s#119
[#461 'sampler']: s#133
[#461 'sampler_comparison']: s#134
[#461 'texture_1d']: s#140
[#461 'texture_2d']: s#141
[#461 'texture_2d_array']: s#142
[#461 'texture_3d']: s#143
[#461 'texture_cube']: s#144
[#461 'texture_cube_array']: s#145
[#461 'texture_depth_2d']: s#135
[#461 'texture_depth_2d_array']: s#136
[#461 'texture_depth_cube']: s#137
[#461 'texture_depth_cube_array']: s#138
[#461 'texture_depth_multisampled_2d']: s#139
[#461 'texture_multisampled_2d']: s#146
[#461 'texture_storage_1d']: s#147
[#461 'texture_storage_2d']: s#148
[#461 'texture_storage_2d_array']: s#149
[#461 'texture_storage_3d']: s#150
[#461 'u32']: s#118
[#461 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#462 '>']: s#225
[#463 '!']: s#69
[#463 '&']: s#72
[#463 '(']: s#114
[#463 '*']: s#71
[#463 '-']: s#68
[#463 'array']: s#82
[#463 'bitcast']: s#77
[#463 'bool']: s#87
[#463 'f16']: s#116
[#463 'f32']: s#115
[#463 'false']: s#113
[#463 'i32']: s#117
[#463 'mat2x2']: s#98
[#463 'mat2x3']: s#99
[#463 'mat2x4']: s#100
[#463 'mat3x2']: s#101
[#463 'mat3x3']: s#102
[#463 'mat3x4']: s#103
[#463 'mat4x2']: s#104
[#463 'mat4x3']: s#105
[#463 'mat4x4']: s#106
[#463 'ptr']: s#119
[#463 'sampler']: s#133
[#463 'sampler_comparison']: s#134
[#463 'texture_1d']: s#140
[#463 'texture_2d']: s#141
[#463 'texture_2d_array']: s#142
[#463 'texture_3d']: s#143
[#463 'texture_cube']: s#144
[#463 'texture_cube_array']: s#145
[#463 'texture_depth_2d']: s#135
[#463 'texture_depth_2d_array']: s#136
[#463 'texture_depth_cube']: s#137
[#463 'texture_depth_cube_array']: s#138
[#463 'texture_depth_multisampled_2d']: s#139
[#463 'texture_multisampled_2d']: s#146
[#463 'texture_storage_1d']: s#147
[#463 'texture_storage_2d']: s#148
[#463 'texture_storage_2d_array']: s#149
[#463 'texture_storage_3d']: s#150
[#463 'true']: s#112
[#463 'u32']: s#118
[#463 'vec2']: s#95
[#463 'vec3']: s#96
[#463 'vec4']: s#97
[#463 '~']: s#70
[#463 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#463 /0[fh]/]: s#128
[#463 /0[iu]?/]: s#108
[#463 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#463 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#463 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#463 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#463 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#463 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#463 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#463 /[1-9][0-9]*[fh]/]: s#129
[#463 /[1-9][0-9]*[iu]?/]: s#109
[#464 '(']: s#114
[#465 ',']: s#386
[#466 ')']: r#294
[#466 ',']: r#294
[#467 ',']: s#386
[#468 '!']: s#69
[#468 '&']: s#72
[#468 '(']: s#114
[#468 '*']: s#71
[#468 '-']: s#68
[#468 'array']: s#82
[#468 'bitcast']: s#77
[#468 'bool']: s#87
[#468 'f16']: s#116
[#468 'f32']: s#115
[#468 'false']: s#113
[#468 'i32']: s#117
[#468 'mat2x2']: s#98
[#468 'mat2x3']: s#99
[#468 'mat2x4']: s#100
[#468 'mat3x2']: s#101
[#468 'mat3x3']: s#102
[#468 'mat3x4']: s#103
[#468 'mat4x2']: s#104
[#468 'mat4x3']: s#105
[#468 'mat4x4']: s#106
[#468 'ptr']: s#119
[#468 'sampler']: s#133
[#468 'sampler_comparison']: s#134
[#468 'texture_1d']: s#140
[#468 'texture_2d']: s#141
[#468 'texture_2d_array']: s#142
[#468 'texture_3d']: s#143
[#468 'texture_cube']: s#144
[#468 'texture_cube_array']: s#145
[#468 'texture_depth_2d']: s#135
[#468 'texture_depth_2d_array']: s#136
[#468 'texture_depth_cube']: s#137
[#468 'texture_depth_cube_array']: s#138
[#468 'texture_depth_multisampled_2d']: s#139
[#468 'texture_multisampled_2d']: s#146
[#468 'texture_storage_1d']: s#147
[#468 'texture_storage_2d']: s#148
[#468 'texture_storage_2d_array']: s#149
[#468 'texture_storage_3d']: s#150
[#468 'true']: s#112
[#468 'u32']: s#118
[#468 'vec2']: s#95
[#468 'vec3']: s#96
[#468 'vec4']: s#97
[#468 '~']: s#70
[#468 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#468 /0[fh]/]: s#128
[#468 /0[iu]?/]: s#108
[#468 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#468 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#468 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#468 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#468 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#468 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#468 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#468 /[1-9][0-9]*[fh]/]: s#129
[#468 /[1-9][0-9]*[iu]?/]: s#109
[#469 '!=']: r#295
[#469 '%']: r#295
[#469 '&&']: r#295
[#469 '&']: r#295
[#469 ')']: r#295
[#469 '*']: r#295
[#469 '+']: r#295
[#469 ',']: r#295
[#469 '-']: r#295
[#469 '.']: r#295
[#469 '/']: r#295
[#469 ':']: r#295
[#469 ';']: r#295
[#469 '<']: r#295
[#469 '<<']: r#295
[#469 '<=']: r#295
[#469 '==']: r#295
[#469 '>']: r#295
[#469 '>=']: r#295
[#469 '>>']: r#295
[#469 '[']: r#295
[#469 ']']: r#295
[#469 '^']: r#295
[#469 '{']: r#295
[#469 '|']: r#295
[#469 '||']: r#295
[#470 '.']: s#194
[#470 '[']: s#193
[#471 '!=']: r#296
[#471 '%']: r#296
[#471 '%=']: r#296
[#471 '&&']: r#296
[#471 '&']: r#296
[#471 '&=']: r#296
[#471 ')']: r#296
[#471 '*']: r#296
[#471 '*=']: r#296
[#471 '+']: r#296
[#471 '++']: r#296
[#471 '+=']: r#296
[#471 ',']: r#296
[#471 '-']: r#296
[#471 '--']: r#296
[#471 '-=']: r#296
[#471 '.']: r#296
[#471 '/']: r#296
[#471 '/=']: r#296
[#471 ':']: r#296
[#471 ';']: r#296
[#471 '<']: r#296
[#471 '<<']: r#296
[#471 '<<=']: r#296
[#471 '<=']: r#296
[#471 '=']: r#296
[#471 '==']: r#296
[#471 '>']: r#296
[#471 '>=']: r#296
[#471 '>>']: r#296
[#471 '>>=']: r#296
[#471 '[']: r#296
[#471 ']']: r#296
[#471 '^']: r#296
[#471 '^=']: r#296
[#471 '{']: r#296
[#471 '|']: r#296
[#471 '|=']: r#296
[#471 '||']: r#296
[#472 '!=']: r#297
[#472 '%']: r#297
[#472 '%=']: r#297
[#472 '&&']: r#297
[#472 '&']: r#297
[#472 '&=']: r#297
[#472 ')']: r#297
[#472 '*']: r#297
[#472 '*=']: r#297
[#472 '+']: r#297
[#472 '++']: r#297
[#472 '+=']: r#297
[#472 ',']: r#297
[#472 '-']: r#297
[#472 '--']: r#297
[#472 '-=']: r#297
[#472 '/']: r#297
[#472 '/=']: r#297
[#472 ':']: r#297
[#472 ';']: r#297
[#472 '<']: r#297
[#472 '<<']: r#297
[#472 '<<=']: r#297
[#472 '<=']: r#297
[#472 '=']: r#297
[#472 '==']: r#297
[#472 '>']: r#297
[#472 '>=']: r#297
[#472 '>>']: r#297
[#472 '>>=']: r#297
[#472 ']']: r#297
[#472 '^']: r#297
[#472 '^=']: r#297
[#472 '{']: r#297
[#472 '|']: r#297
[#472 '|=']: r#297
[#472 '||']: r#297
[#473 '!=']: r#298
[#473 '%']: r#298
[#473 '%=']: r#298
[#473 '&&']: r#298
[#473 '&']: r#298
[#473 '&=']: r#298
[#473 ')']: r#298
[#473 '*']: r#298
[#473 '*=']: r#298
[#473 '+']: r#298
[#473 '++']: r#298
[#473 '+=']: r#298
[#473 ',']: r#298
[#473 '-']: r#298
[#473 '--']: r#298
[#473 '-=']: r#298
[#473 '/']: r#298
[#473 '/=']: r#298
[#473 ':']: r#298
[#473 ';']: r#298
[#473 '<']: r#298
[#473 '<<']: r#298
[#473 '<<=']: r#298
[#473 '<=']: r#298
[#473 '=']: r#298
[#473 '==']: r#298
[#473 '>']: r#298
[#473 '>=']: r#298
[#473 '>>']: r#298
[#473 '>>=']: r#298
[#473 ']']: r#298
[#473 '^']: r#298
[#473 '^=']: r#298
[#473 '{']: r#298
[#473 '|']: r#298
[#473 '|=']: r#298
[#473 '||']: r#298
[#474 '!=']: r#299
[#474 '%']: r#299
[#474 '%=']: r#299
[#474 '&&']: r#299
[#474 '&']: r#299
[#474 '&=']: r#299
[#474 ')']: r#299
[#474 '*']: r#299
[#474 '*=']: r#299
[#474 '+']: r#299
[#474 '++']: r#299
[#474 '+=']: r#299
[#474 ',']: r#299
[#474 '-']: r#299
[#474 '--']: r#299
[#474 '-=']: r#299
[#474 '/']: r#299
[#474 '/=']: r#299
[#474 ':']: r#299
[#474 ';']: r#299
[#474 '<']: r#299
[#474 '<<']: r#299
[#474 '<<=']: r#299
[#474 '<=']: r#299
[#474 '=']: r#299
[#474 '==']: r#299
[#474 '>']: r#299
[#474 '>=']: r#299
[#474 '>>']: r#299
[#474 '>>=']: r#299
[#474 ']']: r#299
[#474 '^']: r#299
[#474 '^=']: r#299
[#474 '{']: r#299
[#474 '|']: r#299
[#474 '|=']: r#299
[#474 '||']: r#299
[#475 '!=']: r#300
[#475 '%']: r#300
[#475 '%=']: r#300
[#475 '&&']: r#300
[#475 '&']: r#300
[#475 '&=']: r#300
[#475 ')']: r#300
[#475 '*']: r#300
[#475 '*=']: r#300
[#475 '+']: r#300
[#475 '++']: r#300
[#475 '+=']: r#300
[#475 ',']: r#300
[#475 '-']: r#300
[#475 '--']: r#300
[#475 '-=']: r#300
[#475 '/']: r#300
[#475 '/=']: r#300
[#475 ':']: r#300
[#475 ';']: r#300
[#475 '<']: r#300
[#475 '<<']: r#300
[#475 '<<=']: r#300
[#475 '<=']: r#300
[#475 '=']: r#300
[#475 '==']: r#300
[#475 '>']: r#300
[#475 '>=']: r#300
[#475 '>>']: r#300
[#475 '>>=']: r#300
[#475 ']']: r#300
[#475 '^']: r#300
[#475 '^=']: r#300
[#475 '{']: r#300
[#475 '|']: r#300
[#475 '|=']: r#300
[#475 '||']: r#300
[#476 '@']: r#301
[#476 'array']: r#301
[#476 'bool']: r#301
[#476 'f16']: r#301
[#476 'f32']: r#301
[#476 'fn']: r#301
[#476 'i32']: r#301
[#476 'override']: r#301
[#476 'ptr']: r#301
[#476 'sampler']: r#301
[#476 'sampler_comparison']: r#301
[#476 'texture_1d']: r#301
[#476 'texture_2d']: r#301
[#476 'texture_2d_array']: r#301
[#476 'texture_3d']: r#301
[#476 'texture_cube']: r#301
[#476 'texture_cube_array']: r#301
[#476 'texture_depth_2d']: r#301
[#476 'texture_depth_2d_array']: r#301
[#476 'texture_depth_cube']: r#301
[#476 'texture_depth_cube_array']: r#301
[#476 'texture_depth_multisampled_2d']: r#301
[#476 'texture_multisampled_2d']: r#301
[#476 'texture_storage_1d']: r#301
[#476 'texture_storage_2d']: r#301
[#476 'texture_storage_2d_array']: r#301
[#476 'texture_storage_3d']: r#301
[#476 'u32']: r#301
[#476 'var']: r#301
[#477 '!']: s#69
[#477 '&']: s#72
[#477 '(']: s#114
[#477 ')']: r#302
[#477 '*']: s#71
[#477 '-']: s#68
[#477 'array']: s#82
[#477 'bitcast']: s#77
[#477 'bool']: s#87
[#477 'f16']: s#116
[#477 'f32']: s#115
[#477 'false']: s#113
[#477 'i32']: s#117
[#477 'mat2x2']: s#98
[#477 'mat2x3']: s#99
[#477 'mat2x4']: s#100
[#477 'mat3x2']: s#101
[#477 'mat3x3']: s#102
[#477 'mat3x4']: s#103
[#477 'mat4x2']: s#104
[#477 'mat4x3']: s#105
[#477 'mat4x4']: s#106
[#477 'ptr']: s#119
[#477 'sampler']: s#133
[#477 'sampler_comparison']: s#134
[#477 'texture_1d']: s#140
[#477 'texture_2d']: s#141
[#477 'texture_2d_array']: s#142
[#477 'texture_3d']: s#143
[#477 'texture_cube']: s#144
[#477 'texture_cube_array']: s#145
[#477 'texture_depth_2d']: s#135
[#477 'texture_depth_2d_array']: s#136
[#477 'texture_depth_cube']: s#137
[#477 'texture_depth_cube_array']: s#138
[#477 'texture_depth_multisampled_2d']: s#139
[#477 'texture_multisampled_2d']: s#146
[#477 'texture_storage_1d']: s#147
[#477 'texture_storage_2d']: s#148
[#477 'texture_storage_2d_array']: s#149
[#477 'texture_storage_3d']: s#150
[#477 'true']: s#112
[#477 'u32']: s#118
[#477 'vec2']: s#95
[#477 'vec3']: s#96
[#477 'vec4']: s#97
[#477 '~']: s#70
[#477 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#477 /0[fh]/]: s#128
[#477 /0[iu]?/]: s#108
[#477 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#477 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#477 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#477 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#477 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#477 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#477 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#477 /[1-9][0-9]*[fh]/]: s#129
[#477 /[1-9][0-9]*[iu]?/]: s#109
[#478 ')']: s#304
[#479 '@']: r#303
[#479 'array']: r#303
[#479 'bool']: r#303
[#479 'f16']: r#303
[#479 'f32']: r#303
[#479 'fn']: r#303
[#479 'i32']: r#303
[#479 'override']: r#303
[#479 'ptr']: r#303
[#479 'sampler']: r#303
[#479 'sampler_comparison']: r#303
[#479 'texture_1d']: r#303
[#479 'texture_2d']: r#303
[#479 'texture_2d_array']: r#303
[#479 'texture_3d']: r#303
[#479 'texture_cube']: r#303
[#479 'texture_cube_array']: r#303
[#479 'texture_depth_2d']: r#303
[#479 'texture_depth_2d_array']: r#303
[#479 'texture_depth_cube']: r#303
[#479 'texture_depth_cube_array']: r#303
[#479 'texture_depth_multisampled_2d']: r#303
[#479 'texture_multisampled_2d']: r#303
[#479 'texture_storage_1d']: r#303
[#479 'texture_storage_2d']: r#303
[#479 'texture_storage_2d_array']: r#303
[#479 'texture_storage_3d']: r#303
[#479 'u32']: r#303
[#479 'var']: r#303
[#480 ')']: r#302
[#481 '@']: r#304
[#481 'array']: r#304
[#481 'bool']: r#304
[#481 'f16']: r#304
[#481 'f32']: r#304
[#481 'fn']: r#304
[#481 'i32']: r#304
[#481 'override']: r#304
[#481 'ptr']: r#304
[#481 'sampler']: r#304
[#481 'sampler_comparison']: r#304
[#481 'texture_1d']: r#304
[#481 'texture_2d']: r#304
[#481 'texture_2d_array']: r#304
[#481 'texture_3d']: r#304
[#481 'texture_cube']: r#304
[#481 'texture_cube_array']: r#304
[#481 'texture_depth_2d']: r#304
[#481 'texture_depth_2d_array']: r#304
[#481 'texture_depth_cube']: r#304
[#481 'texture_depth_cube_array']: r#304
[#481 'texture_depth_multisampled_2d']: r#304
[#481 'texture_multisampled_2d']: r#304
[#481 'texture_storage_1d']: r#304
[#481 'texture_storage_2d']: r#304
[#481 'texture_storage_2d_array']: r#304
[#481 'texture_storage_3d']: r#304
[#481 'u32']: r#304
[#481 'var']: r#304
[#482 '@']: r#305
[#482 'array']: r#305
[#482 'bool']: r#305
[#482 'f16']: r#305
[#482 'f32']: r#305
[#482 'fn']: r#305
[#482 'i32']: r#305
[#482 'override']: r#305
[#482 'ptr']: r#305
[#482 'sampler']: r#305
[#482 'sampler_comparison']: r#305
[#482 'texture_1d']: r#305
[#482 'texture_2d']: r#305
[#482 'texture_2d_array']: r#305
[#482 'texture_3d']: r#305
[#482 'texture_cube']: r#305
[#482 'texture_cube_array']: r#305
[#482 'texture_depth_2d']: r#305
[#482 'texture_depth_2d_array']: r#305
[#482 'texture_depth_cube']: r#305
[#482 'texture_depth_cube_array']: r#305
[#482 'texture_depth_multisampled_2d']: r#305
[#482 'texture_multisampled_2d']: r#305
[#482 'texture_storage_1d']: r#305
[#482 'texture_storage_2d']: r#305
[#482 'texture_storage_2d_array']: r#305
[#482 'texture_storage_3d']: r#305
[#482 'u32']: r#305
[#482 'var']: r#305
[#483 ')']: r#302
[#483 'center']: s#490
[#483 'centroid']: s#491
[#483 'sample']: s#492
[#484 '@']: r#306
[#484 'array']: r#306
[#484 'bool']: r#306
[#484 'f16']: r#306
[#484 'f32']: r#306
[#484 'fn']: r#306
[#484 'i32']: r#306
[#484 'override']: r#306
[#484 'ptr']: r#306
[#484 'sampler']: r#306
[#484 'sampler_comparison']: r#306
[#484 'texture_1d']: r#306
[#484 'texture_2d']: r#306
[#484 'texture_2d_array']: r#306
[#484 'texture_3d']: r#306
[#484 'texture_cube']: r#306
[#484 'texture_cube_array']: r#306
[#484 'texture_depth_2d']: r#306
[#484 'texture_depth_2d_array']: r#306
[#484 'texture_depth_cube']: r#306
[#484 'texture_depth_cube_array']: r#306
[#484 'texture_depth_multisampled_2d']: r#306
[#484 'texture_multisampled_2d']: r#306
[#484 'texture_storage_1d']: r#306
[#484 'texture_storage_2d']: r#306
[#484 'texture_storage_2d_array']: r#306
[#484 'texture_storage_3d']: r#306
[#484 'u32']: r#306
[#484 'var']: r#306
[#485 '@']: r#307
[#485 'array']: r#307
[#485 'bool']: r#307
[#485 'f16']: r#307
[#485 'f32']: r#307
[#485 'fn']: r#307
[#485 'i32']: r#307
[#485 'override']: r#307
[#485 'ptr']: r#307
[#485 'sampler']: r#307
[#485 'sampler_comparison']: r#307
[#485 'texture_1d']: r#307
[#485 'texture_2d']: r#307
[#485 'texture_2d_array']: r#307
[#485 'texture_3d']: r#307
[#485 'texture_cube']: r#307
[#485 'texture_cube_array']: r#307
[#485 'texture_depth_2d']: r#307
[#485 'texture_depth_2d_array']: r#307
[#485 'texture_depth_cube']: r#307
[#485 'texture_depth_cube_array']: r#307
[#485 'texture_depth_multisampled_2d']: r#307
[#485 'texture_multisampled_2d']: r#307
[#485 'texture_storage_1d']: r#307
[#485 'texture_storage_2d']: r#307
[#485 'texture_storage_2d_array']: r#307
[#485 'texture_storage_3d']: r#307
[#485 'u32']: r#307
[#485 'var']: r#307
[#486 '@']: r#308
[#486 'array']: r#308
[#486 'bool']: r#308
[#486 'f16']: r#308
[#486 'f32']: r#308
[#486 'fn']: r#308
[#486 'i32']: r#308
[#486 'override']: r#308
[#486 'ptr']: r#308
[#486 'sampler']: r#308
[#486 'sampler_comparison']: r#308
[#486 'texture_1d']: r#308
[#486 'texture_2d']: r#308
[#486 'texture_2d_array']: r#308
[#486 'texture_3d']: r#308
[#486 'texture_cube']: r#308
[#486 'texture_cube_array']: r#308
[#486 'texture_depth_2d']: r#308
[#486 'texture_depth_2d_array']: r#308
[#486 'texture_depth_cube']: r#308
[#486 'texture_depth_cube_array']: r#308
[#486 'texture_depth_multisampled_2d']: r#308
[#486 'texture_multisampled_2d']: r#308
[#486 'texture_storage_1d']: r#308
[#486 'texture_storage_2d']: r#308
[#486 'texture_storage_2d_array']: r#308
[#486 'texture_storage_3d']: r#308
[#486 'u32']: r#308
[#486 'var']: r#308
[#487 '@']: r#309
[#487 'array']: r#309
[#487 'bool']: r#309
[#487 'f16']: r#309
[#487 'f32']: r#309
[#487 'fn']: r#309
[#487 'i32']: r#309
[#487 'override']: r#309
[#487 'ptr']: r#309
[#487 'sampler']: r#309
[#487 'sampler_comparison']: r#309
[#487 'texture_1d']: r#309
[#487 'texture_2d']: r#309
[#487 'texture_2d_array']: r#309
[#487 'texture_3d']: r#309
[#487 'texture_cube']: r#309
[#487 'texture_cube_array']: r#309
[#487 'texture_depth_2d']: r#309
[#487 'texture_depth_2d_array']: r#309
[#487 'texture_depth_cube']: r#309
[#487 'texture_depth_cube_array']: r#309
[#487 'texture_depth_multisampled_2d']: r#309
[#487 'texture_multisampled_2d']: r#309
[#487 'texture_storage_1d']: r#309
[#487 'texture_storage_2d']: r#309
[#487 'texture_storage_2d_array']: r#309
[#487 'texture_storage_3d']: r#309
[#487 'u32']: r#309
[#487 'var']: r#309
[#488 '@']: r#310
[#488 'array']: r#310
[#488 'bool']: r#310
[#488 'f16']: r#310
[#488 'f32']: r#310
[#488 'fn']: r#310
[#488 'i32']: r#310
[#488 'override']: r#310
[#488 'ptr']: r#310
[#488 'sampler']: r#310
[#488 'sampler_comparison']: r#310
[#488 'texture_1d']: r#310
[#488 'texture_2d']: r#310
[#488 'texture_2d_array']: r#310
[#488 'texture_3d']: r#310
[#488 'texture_cube']: r#310
[#488 'texture_cube_array']: r#310
[#488 'texture_depth_2d']: r#310
[#488 'texture_depth_2d_array']: r#310
[#488 'texture_depth_cube']: r#310
[#488 'texture_depth_cube_array']: r#310
[#488 'texture_depth_multisampled_2d']: r#310
[#488 'texture_multisampled_2d']: r#310
[#488 'texture_storage_1d']: r#310
[#488 'texture_storage_2d']: r#310
[#488 'texture_storage_2d_array']: r#310
[#488 'texture_storage_3d']: r#310
[#488 'u32']: r#310
[#488 'var']: r#310
[#489 ',']: s#386
[#490 ')']: r#311
[#490 ',']: r#311
[#491 ')']: r#312
[#491 ',']: r#312
[#492 ')']: r#313
[#492 ',']: r#313
[#493 '@']: r#314
[#493 'array']: r#314
[#493 'bool']: r#314
[#493 'f16']: r#314
[#493 'f32']: r#314
[#493 'fn']: r#314
[#493 'i32']: r#314
[#493 'override']: r#314
[#493 'ptr']: r#314
[#493 'sampler']: r#314
[#493 'sampler_comparison']: r#314
[#493 'texture_1d']: r#314
[#493 'texture_2d']: r#314
[#493 'texture_2d_array']: r#314
[#493 'texture_3d']: r#314
[#493 'texture_cube']: r#314
[#493 'texture_cube_array']: r#314
[#493 'texture_depth_2d']: r#314
[#493 'texture_depth_2d_array']: r#314
[#493 'texture_depth_cube']: r#314
[#493 'texture_depth_cube_array']: r#314
[#493 'texture_depth_multisampled_2d']: r#314
[#493 'texture_multisampled_2d']: r#314
[#493 'texture_storage_1d']: r#314
[#493 'texture_storage_2d']: r#314
[#493 'texture_storage_2d_array']: r#314
[#493 'texture_storage_3d']: r#314
[#493 'u32']: r#314
[#493 'var']: r#314
[#494 ',']: s#386
[#495 '!=']: r#315
[#495 '%']: r#315
[#495 '%=']: r#315
[#495 '&&']: r#315
[#495 '&']: r#315
[#495 '&=']: r#315
[#495 ')']: r#315
[#495 '*']: r#315
[#495 '*=']: r#315
[#495 '+']: r#315
[#495 '++']: r#315
[#495 '+=']: r#315
[#495 ',']: r#315
[#495 '-']: r#315
[#495 '--']: r#315
[#495 '-=']: r#315
[#495 '/']: r#315
[#495 '/=']: r#315
[#495 ':']: r#315
[#495 ';']: r#315
[#495 '<']: r#315
[#495 '<<']: r#315
[#495 '<<=']: r#315
[#495 '<=']: r#315
[#495 '=']: r#315
[#495 '==']: r#315
[#495 '>']: r#315
[#495 '>=']: r#315
[#495 '>>']: r#315
[#495 '>>=']: r#315
[#495 ']']: r#315
[#495 '^']: r#315
[#495 '^=']: r#315
[#495 '{']: r#315
[#495 '|']: r#315
[#495 '|=']: r#315
[#495 '||']: r#315
[#496 '!=']: r#316
[#496 '%']: r#316
[#496 '%=']: r#316
[#496 '&&']: r#316
[#496 '&']: r#316
[#496 '&=']: r#316
[#496 ')']: r#316
[#496 '*']: r#316
[#496 '*=']: r#316
[#496 '+']: r#316
[#496 '++']: r#316
[#496 '+=']: r#316
[#496 ',']: r#316
[#496 '-']: r#316
[#496 '--']: r#316
[#496 '-=']: r#316
[#496 '/']: r#316
[#496 '/=']: r#316
[#496 ':']: r#316
[#496 ';']: r#316
[#496 '<']: r#316
[#496 '<<']: r#316
[#496 '<<=']: r#316
[#496 '<=']: r#316
[#496 '=']: r#316
[#496 '==']: r#316
[#496 '>']: r#316
[#496 '>=']: r#316
[#496 '>>']: r#316
[#496 '>>=']: r#316
[#496 ']']: r#316
[#496 '^']: r#316
[#496 '^=']: r#316
[#496 '{']: r#316
[#496 '|']: r#316
[#496 '|=']: r#316
[#496 '||']: r#316
[#497 ')']: r#317
[#497 ',']: r#317
[#498 ')']: r#318
[#498 ',']: r#318
[#499 ')']: r#319
[#500 ')']: r#320
[#501 '!=']: r#321
[#501 '%']: r#321
[#501 '&&']: r#321
[#501 '&']: r#321
[#501 ')']: r#321
[#501 '*']: r#321
[#501 '+']: r#321
[#501 ',']: r#321
[#501 '-']: r#321
[#501 '.']: r#321
[#501 '/']: r#321
[#501 ':']: r#321
[#501 ';']: r#321
[#501 '<']: r#321
[#501 '<<']: r#321
[#501 '<=']: r#321
[#501 '==']: r#321
[#501 '>']: r#321
[#501 '>=']: r#321
[#501 '>>']: r#321
[#501 '[']: r#321
[#501 ']']: r#321
[#501 '^']: r#321
[#501 '{']: r#321
[#501 '|']: r#321
[#501 '||']: r#321
[#502 '>']: r#322
[#503 '+']: s#213
[#503 '-']: s#68
[#503 '>']: r#323
[#504 '>']: r#324
[#505 '%']: r#31
[#505 '&']: r#28
[#505 '*']: r#31
[#505 '+']: r#31
[#505 '-']: r#31
[#505 '/']: r#31
[#505 '>']: r#31
[#505 '^']: r#30
[#505 '|']: r#29
[#506 '(']: r#325
[#506 ')']: r#325
[#506 ',']: r#325
[#506 ';']: r#325
[#506 '=']: r#325
[#506 '>']: r#325
[#506 '{']: r#325
[#506 '}']: r#325
[#507 ',']: s#386
[#508 '>']: s#225
[#509 '>']: r#326
[#510 '>']: r#327
[#511 '>']: r#328
[#512 '!']: s#69
[#512 '&']: s#72
[#512 '(']: s#114
[#512 '*']: s#71
[#512 '-']: s#68
[#512 'array']: s#82
[#512 'bitcast']: s#77
[#512 'bool']: s#87
[#512 'f16']: s#116
[#512 'f32']: s#115
[#512 'false']: s#113
[#512 'i32']: s#117
[#512 'mat2x2']: s#98
[#512 'mat2x3']: s#99
[#512 'mat2x4']: s#100
[#512 'mat3x2']: s#101
[#512 'mat3x3']: s#102
[#512 'mat3x4']: s#103
[#512 'mat4x2']: s#104
[#512 'mat4x3']: s#105
[#512 'mat4x4']: s#106
[#512 'ptr']: s#119
[#512 'sampler']: s#133
[#512 'sampler_comparison']: s#134
[#512 'texture_1d']: s#140
[#512 'texture_2d']: s#141
[#512 'texture_2d_array']: s#142
[#512 'texture_3d']: s#143
[#512 'texture_cube']: s#144
[#512 'texture_cube_array']: s#145
[#512 'texture_depth_2d']: s#135
[#512 'texture_depth_2d_array']: s#136
[#512 'texture_depth_cube']: s#137
[#512 'texture_depth_cube_array']: s#138
[#512 'texture_depth_multisampled_2d']: s#139
[#512 'texture_multisampled_2d']: s#146
[#512 'texture_storage_1d']: s#147
[#512 'texture_storage_2d']: s#148
[#512 'texture_storage_2d_array']: s#149
[#512 'texture_storage_3d']: s#150
[#512 'true']: s#112
[#512 'u32']: s#118
[#512 'vec2']: s#95
[#512 'vec3']: s#96
[#512 'vec4']: s#97
[#512 '~']: s#70
[#512 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#512 /0[fh]/]: s#128
[#512 /0[iu]?/]: s#108
[#512 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#512 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#512 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#512 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#512 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#512 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#512 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#512 /[1-9][0-9]*[fh]/]: s#129
[#512 /[1-9][0-9]*[iu]?/]: s#109
[#513 '&']: r#329
[#513 '(']: r#329
[#513 '*']: r#329
[#513 ';']: r#329
[#513 'break']: r#329
[#513 'const']: r#329
[#513 'continue']: r#329
[#513 'continuing']: r#329
[#513 'discard']: r#329
[#513 'else']: r#329
[#513 'for']: r#329
[#513 'if']: r#329
[#513 'let']: r#329
[#513 'loop']: r#329
[#513 'return']: r#329
[#513 'static_assert']: r#329
[#513 'switch']: r#329
[#513 'var']: r#329
[#513 'while']: r#329
[#513 '{']: r#329
[#513 '}']: r#329
[#513 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#329
[#514 '&']: r#330
[#514 '(']: r#330
[#514 '*']: r#330
[#514 ';']: r#330
[#514 'break']: r#330
[#514 'const']: r#330
[#514 'continue']: r#330
[#514 'continuing']: r#330
[#514 'discard']: r#330
[#514 'for']: r#330
[#514 'if']: r#330
[#514 'let']: r#330
[#514 'loop']: r#330
[#514 'return']: r#330
[#514 'static_assert']: r#330
[#514 'switch']: r#330
[#514 'var']: r#330
[#514 'while']: r#330
[#514 '{']: r#330
[#514 '}']: r#330
[#514 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#330
[#515 '&']: r#331
[#515 '(']: r#331
[#515 '*']: r#331
[#515 ';']: r#331
[#515 'break']: r#331
[#515 'const']: r#331
[#515 'continue']: r#331
[#515 'continuing']: r#331
[#515 'discard']: r#331
[#515 'for']: r#331
[#515 'if']: r#331
[#515 'let']: r#331
[#515 'loop']: r#331
[#515 'return']: r#331
[#515 'static_assert']: r#331
[#515 'switch']: r#331
[#515 'var']: r#331
[#515 'while']: r#331
[#515 '{']: r#331
[#515 '}']: r#331
[#515 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#331
[#516 '{']: s#176
[#517 'case']: s#574
[#517 'default']: s#575
[#518 'continuing']: s#568
[#519 'continuing']: r#332
[#519 '}']: r#332
[#520 '&']: s#72
[#520 '*']: s#71
[#520 ';']: s#19
[#520 'break']: s#358
[#520 'const']: s#357
[#520 'continue']: s#359
[#520 'discard']: s#344
[#520 'for']: s#352
[#520 'if']: s#363
[#520 'let']: s#356
[#520 'loop']: s#351
[#520 'return']: s#348
[#520 'static_assert']: s#25
[#520 'switch']: s#350
[#520 'var']: s#157
[#520 'while']: s#353
[#520 '{']: s#176
[#520 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#521 ')']: s#304
[#522 ';']: s#19
[#523 ';']: r#333
[#524 ';']: r#334
[#525 ';']: r#335
[#526 ';']: r#336
[#527 '&']: r#337
[#527 '(']: r#337
[#527 '*']: r#337
[#527 ';']: r#337
[#527 'break']: r#337
[#527 'const']: r#337
[#527 'continue']: r#337
[#527 'continuing']: r#337
[#527 'discard']: r#337
[#527 'for']: r#337
[#527 'if']: r#337
[#527 'let']: r#337
[#527 'loop']: r#337
[#527 'return']: r#337
[#527 'static_assert']: r#337
[#527 'switch']: r#337
[#527 'var']: r#337
[#527 'while']: r#337
[#527 '{']: r#337
[#527 '}']: r#337
[#527 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#337
[#528 ';']: r#338
[#529 '!']: s#69
[#529 '&']: s#72
[#529 '(']: s#114
[#529 '*']: s#71
[#529 '-']: s#68
[#529 'array']: s#82
[#529 'bitcast']: s#77
[#529 'bool']: s#87
[#529 'f16']: s#116
[#529 'f32']: s#115
[#529 'false']: s#113
[#529 'i32']: s#117
[#529 'mat2x2']: s#98
[#529 'mat2x3']: s#99
[#529 'mat2x4']: s#100
[#529 'mat3x2']: s#101
[#529 'mat3x3']: s#102
[#529 'mat3x4']: s#103
[#529 'mat4x2']: s#104
[#529 'mat4x3']: s#105
[#529 'mat4x4']: s#106
[#529 'ptr']: s#119
[#529 'sampler']: s#133
[#529 'sampler_comparison']: s#134
[#529 'texture_1d']: s#140
[#529 'texture_2d']: s#141
[#529 'texture_2d_array']: s#142
[#529 'texture_3d']: s#143
[#529 'texture_cube']: s#144
[#529 'texture_cube_array']: s#145
[#529 'texture_depth_2d']: s#135
[#529 'texture_depth_2d_array']: s#136
[#529 'texture_depth_cube']: s#137
[#529 'texture_depth_cube_array']: s#138
[#529 'texture_depth_multisampled_2d']: s#139
[#529 'texture_multisampled_2d']: s#146
[#529 'texture_storage_1d']: s#147
[#529 'texture_storage_2d']: s#148
[#529 'texture_storage_2d_array']: s#149
[#529 'texture_storage_3d']: s#150
[#529 'true']: s#112
[#529 'u32']: s#118
[#529 'vec2']: s#95
[#529 'vec3']: s#96
[#529 'vec4']: s#97
[#529 '~']: s#70
[#529 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#529 /0[fh]/]: s#128
[#529 /0[iu]?/]: s#108
[#529 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#529 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#529 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#529 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#529 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#529 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#529 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#529 /[1-9][0-9]*[fh]/]: s#129
[#529 /[1-9][0-9]*[iu]?/]: s#109
[#530 '!']: s#69
[#530 '&']: s#72
[#530 '(']: s#114
[#530 '*']: s#71
[#530 '-']: s#68
[#530 'array']: s#82
[#530 'bitcast']: s#77
[#530 'bool']: s#87
[#530 'f16']: s#116
[#530 'f32']: s#115
[#530 'false']: s#113
[#530 'i32']: s#117
[#530 'mat2x2']: s#98
[#530 'mat2x3']: s#99
[#530 'mat2x4']: s#100
[#530 'mat3x2']: s#101
[#530 'mat3x3']: s#102
[#530 'mat3x4']: s#103
[#530 'mat4x2']: s#104
[#530 'mat4x3']: s#105
[#530 'mat4x4']: s#106
[#530 'ptr']: s#119
[#530 'sampler']: s#133
[#530 'sampler_comparison']: s#134
[#530 'texture_1d']: s#140
[#530 'texture_2d']: s#141
[#530 'texture_2d_array']: s#142
[#530 'texture_3d']: s#143
[#530 'texture_cube']: s#144
[#530 'texture_cube_array']: s#145
[#530 'texture_depth_2d']: s#135
[#530 'texture_depth_2d_array']: s#136
[#530 'texture_depth_cube']: s#137
[#530 'texture_depth_cube_array']: s#138
[#530 'texture_depth_multisampled_2d']: s#139
[#530 'texture_multisampled_2d']: s#146
[#530 'texture_storage_1d']: s#147
[#530 'texture_storage_2d']: s#148
[#530 'texture_storage_2d_array']: s#149
[#530 'texture_storage_3d']: s#150
[#530 'true']: s#112
[#530 'u32']: s#118
[#530 'vec2']: s#95
[#530 'vec3']: s#96
[#530 'vec4']: s#97
[#530 '~']: s#70
[#530 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#530 /0[fh]/]: s#128
[#530 /0[iu]?/]: s#108
[#530 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#530 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#530 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#530 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#530 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#530 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#530 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#530 /[1-9][0-9]*[fh]/]: s#129
[#530 /[1-9][0-9]*[iu]?/]: s#109
[#531 '&']: r#339
[#531 '(']: r#339
[#531 '*']: r#339
[#531 ';']: r#339
[#531 'break']: r#339
[#531 'const']: r#339
[#531 'continue']: r#339
[#531 'continuing']: r#339
[#531 'discard']: r#339
[#531 'else']: r#339
[#531 'for']: r#339
[#531 'if']: r#339
[#531 'let']: r#339
[#531 'loop']: r#339
[#531 'return']: r#339
[#531 'static_assert']: r#339
[#531 'switch']: r#339
[#531 'var']: r#339
[#531 'while']: r#339
[#531 '{']: r#339
[#531 '}']: r#339
[#531 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#339
[#532 ')']: r#340
[#532 ';']: r#340
[#533 ')']: s#304
[#534 '%=']: r#341
[#534 '&=']: r#341
[#534 ')']: r#341
[#534 '*=']: r#341
[#534 '++']: r#341
[#534 '+=']: r#341
[#534 '--']: r#341
[#534 '-=']: r#341
[#534 '/=']: r#341
[#534 '<<=']: r#341
[#534 '=']: r#341
[#534 '>>=']: r#341
[#534 '^=']: r#341
[#534 '|=']: r#341
[#535 '%=']: r#342
[#535 '&=']: r#342
[#535 ')']: r#342
[#535 '*=']: r#342
[#535 '++']: r#342
[#535 '+=']: r#342
[#535 '--']: r#342
[#535 '-=']: r#342
[#535 '/=']: r#342
[#535 '<<=']: r#342
[#535 '=']: r#342
[#535 '>>=']: r#342
[#535 '^=']: r#342
[#535 '|=']: r#342
[#537 ':']: s#378
[#538 ',']: s#386
[#539 ')']: r#343
[#539 ',']: r#343
[#540 ',']: s#386
[#541 '@']: s#31
[#542 '->']: s#554
[#543 ',']: r#344
[#543 '}']: r#344
[#544 ',']: r#345
[#544 '}']: r#345
[#545 '}']: s#457
[#546 '}']: r#346
[#547 'array']: s#301
[#547 'bool']: s#87
[#547 'f16']: s#116
[#547 'f32']: s#115
[#547 'i32']: s#117
[#547 'ptr']: s#119
[#547 'sampler']: s#133
[#547 'sampler_comparison']: s#134
[#547 'texture_1d']: s#140
[#547 'texture_2d']: s#141
[#547 'texture_2d_array']: s#142
[#547 'texture_3d']: s#143
[#547 'texture_cube']: s#144
[#547 'texture_cube_array']: s#145
[#547 'texture_depth_2d']: s#135
[#547 'texture_depth_2d_array']: s#136
[#547 'texture_depth_cube']: s#137
[#547 'texture_depth_cube_array']: s#138
[#547 'texture_depth_multisampled_2d']: s#139
[#547 'texture_multisampled_2d']: s#146
[#547 'texture_storage_1d']: s#147
[#547 'texture_storage_2d']: s#148
[#547 'texture_storage_2d_array']: s#149
[#547 'texture_storage_3d']: s#150
[#547 'u32']: s#118
[#547 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#548 '>']: r#347
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#348
[#550 ',']: r#349
[#550 '}']: r#349
[#551 ';']: r#350
[#551 '@']: r#350
[#551 'fn']: r#350
[#551 'override']: r#350
[#551 'static_assert']: r#350
[#551 'struct']: r#350
[#551 'type']: r#350
[#551 'var']: r#350
[#551 EndOfText]: r#350
[#552 '{']: r#351
[#553 '@']: s#31
[#554 '@']: r#352
[#554 'array']: r#352
[#554 'bool']: r#352
[#554 'f16']: r#352
[#554 'f32']: r#352
[#554 'i32']: r#352
[#554 'ptr']: r#352
[#554 'sampler']: r#352
[#554 'sampler_comparison']: r#352
[#554 'texture_1d']: r#352
[#554 'texture_2d']: r#352
[#554 'texture_2d_array']: r#352
[#554 'texture_3d']: r#352
[#554 'texture_cube']: r#352
[#554 'texture_cube_array']: r#352
[#554 'texture_depth_2d']: r#352
[#554 'texture_depth_2d_array']: r#352
[#554 'texture_depth_cube']: r#352
[#554 'texture_depth_cube_array']: r#352
[#554 'texture_depth_multisampled_2d']: r#352
[#554 'texture_multisampled_2d']: r#352
[#554 'texture_storage_1d']: r#352
[#554 'texture_storage_2d']: r#352
[#554 'texture_storage_2d_array']: r#352
[#554 'texture_storage_3d']: r#352
[#554 'u32']: r#352
[#555 ')']: r#353
[#555 ',']: r#353
[#556 ')']: r#354
[#556 ',']: r#354
[#557 ')']: r#355
[#558 ')']: r#356
[#559 'array']: s#301
[#559 'bool']: s#87
[#559 'f16']: s#116
[#559 'f32']: s#115
[#559 'i32']: s#117
[#559 'ptr']: s#119
[#559 'sampler']: s#133
[#559 'sampler_comparison']: s#134
[#559 'texture_1d']: s#140
[#559 'texture_2d']: s#141
[#559 'texture_2d_array']: s#142
[#559 'texture_3d']: s#143
[#559 'texture_cube']: s#144
[#559 'texture_cube_array']: s#145
[#559 'texture_depth_2d']: s#135
[#559 'texture_depth_2d_array']: s#136
[#559 'texture_depth_cube']: s#137
[#559 'texture_depth_cube_array']: s#138
[#559 'texture_depth_multisampled_2d']: s#139
[#559 'texture_multisampled_2d']: s#146
[#559 'texture_storage_1d']: s#147
[#559 'texture_storage_2d']: s#148
[#559 'texture_storage_2d_array']: s#149
[#559 'texture_storage_3d']: s#150
[#559 'u32']: s#118
[#559 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#560 '%=']: r#357
[#560 '&=']: r#357
[#560 ')']: r#357
[#560 '*=']: r#357
[#560 '++']: r#357
[#560 '+=']: r#357
[#560 '--']: r#357
[#560 '-=']: r#357
[#560 '.']: r#357
[#560 '/=']: r#357
[#560 '<<=']: r#357
[#560 '=']: r#357
[#560 '>>=']: r#357
[#560 '[']: r#357
[#560 '^=']: r#357
[#560 '|=']: r#357
[#561 ';']: r#358
[#562 ';']: r#359
[#563 '!']: s#69
[#563 '&']: s#72
[#563 '(']: s#114
[#563 '*']: s#71
[#563 '-']: s#68
[#563 'array']: s#82
[#563 'bitcast']: s#77
[#563 'bool']: s#87
[#563 'f16']: s#116
[#563 'f32']: s#115
[#563 'false']: s#113
[#563 'i32']: s#117
[#563 'mat2x2']: s#98
[#563 'mat2x3']: s#99
[#563 'mat2x4']: s#100
[#563 'mat3x2']: s#101
[#563 'mat3x3']: s#102
[#563 'mat3x4']: s#103
[#563 'mat4x2']: s#104
[#563 'mat4x3']: s#105
[#563 'mat4x4']: s#106
[#563 'ptr']: s#119
[#563 'sampler']: s#133
[#563 'sampler_comparison']: s#134
[#563 'texture_1d']: s#140
[#563 'texture_2d']: s#141
[#563 'texture_2d_array']: s#142
[#563 'texture_3d']: s#143
[#563 'texture_cube']: s#144
[#563 'texture_cube_array']: s#145
[#563 'texture_depth_2d']: s#135
[#563 'texture_depth_2d_array']: s#136
[#563 'texture_depth_cube']: s#137
[#563 'texture_depth_cube_array']: s#138
[#563 'texture_depth_multisampled_2d']: s#139
[#563 'texture_multisampled_2d']: s#146
[#563 'texture_storage_1d']: s#147
[#563 'texture_storage_2d']: s#148
[#563 'texture_storage_2d_array']: s#149
[#563 'texture_storage_3d']: s#150
[#563 'true']: s#112
[#563 'u32']: s#118
[#563 'vec2']: s#95
[#563 'vec3']: s#96
[#563 'vec4']: s#97
[#563 '~']: s#70
[#563 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#563 /0[fh]/]: s#128
[#563 /0[iu]?/]: s#108
[#563 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#563 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#563 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#563 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#563 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#563 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#563 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#563 /[1-9][0-9]*[fh]/]: s#129
[#563 /[1-9][0-9]*[iu]?/]: s#109
[#564 '{']: s#176
[#565 'continuing']: r#360
[#565 '}']: r#360
[#566 '}']: s#457
[#567 '}']: r#361
[#568 '{']: s#176
[#569 '}']: s#457
[#570 '}']: r#362
[#571 'case']: s#574
[#571 'default']: s#575
[#572 'case']: r#363
[#572 'default']: r#363
[#572 '}']: r#363
[#573 'case']: r#364
[#573 'default']: r#364
[#573 '}']: r#364
[#574 '!']: s#69
[#574 '&']: s#72
[#574 '(']: s#114
[#574 '*']: s#71
[#574 '-']: s#68
[#574 'array']: s#82
[#574 'bitcast']: s#77
[#574 'bool']: s#87
[#574 'default']: s#592
[#574 'f16']: s#116
[#574 'f32']: s#115
[#574 'false']: s#113
[#574 'i32']: s#117
[#574 'mat2x2']: s#98
[#574 'mat2x3']: s#99
[#574 'mat2x4']: s#100
[#574 'mat3x2']: s#101
[#574 'mat3x3']: s#102
[#574 'mat3x4']: s#103
[#574 'mat4x2']: s#104
[#574 'mat4x3']: s#105
[#574 'mat4x4']: s#106
[#574 'ptr']: s#119
[#574 'sampler']: s#133
[#574 'sampler_comparison']: s#134
[#574 'texture_1d']: s#140
[#574 'texture_2d']: s#141
[#574 'texture_2d_array']: s#142
[#574 'texture_3d']: s#143
[#574 'texture_cube']: s#144
[#574 'texture_cube_array']: s#145
[#574 'texture_depth_2d']: s#135
[#574 'texture_depth_2d_array']: s#136
[#574 'texture_depth_cube']: s#137
[#574 'texture_depth_cube_array']: s#138
[#574 'texture_depth_multisampled_2d']: s#139
[#574 'texture_multisampled_2d']: s#146
[#574 'texture_storage_1d']: s#147
[#574 'texture_storage_2d']: s#148
[#574 'texture_storage_2d_array']: s#149
[#574 'texture_storage_3d']: s#150
[#574 'true']: s#112
[#574 'u32']: s#118
[#574 'vec2']: s#95
[#574 'vec3']: s#96
[#574 'vec4']: s#97
[#574 '~']: s#70
[#574 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#574 /0[fh]/]: s#128
[#574 /0[iu]?/]: s#108
[#574 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#574 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#574 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#574 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#574 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#574 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#574 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#574 /[1-9][0-9]*[fh]/]: s#129
[#574 /[1-9][0-9]*[iu]?/]: s#109
[#575 ':']: s#378
[#576 '&']: r#365
[#576 '(']: r#365
[#576 '*']: r#365
[#576 ';']: r#365
[#576 'break']: r#365
[#576 'const']: r#365
[#576 'continue']: r#365
[#576 'continuing']: r#365
[#576 'discard']: r#365
[#576 'for']: r#365
[#576 'if']: r#365
[#576 'let']: r#365
[#576 'loop']: r#365
[#576 'return']: r#365
[#576 'static_assert']: r#365
[#576 'switch']: r#365
[#576 'var']: r#365
[#576 'while']: r#365
[#576 '{']: r#365
[#576 '}']: r#365
[#576 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#365
[#577 '{']: s#176
[#578 '(']: r#366
[#578 ')']: r#366
[#578 ',']: r#366
[#578 ';']: r#366
[#578 '=']: r#366
[#578 '>']: r#366
[#578 '{']: r#366
[#578 '}']: r#366
[#579 '>']: s#225
[#580 'read']: s#509
[#580 'read_write']: s#511
[#580 'write']: s#510
[#581 '@']: r#367
[#581 'array']: r#367
[#581 'bool']: r#367
[#581 'f16']: r#367
[#581 'f32']: r#367
[#581 'fn']: r#367
[#581 'i32']: r#367
[#581 'override']: r#367
[#581 'ptr']: r#367
[#581 'sampler']: r#367
[#581 'sampler_comparison']: r#367
[#581 'texture_1d']: r#367
[#581 'texture_2d']: r#367
[#581 'texture_2d_array']: r#367
[#581 'texture_3d']: r#367
[#581 'texture_cube']: r#367
[#581 'texture_cube_array']: r#367
[#581 'texture_depth_2d']: r#367
[#581 'texture_depth_2d_array']: r#367
[#581 'texture_depth_cube']: r#367
[#581 'texture_depth_cube_array']: r#367
[#581 'texture_depth_multisampled_2d']: r#367
[#581 'texture_multisampled_2d']: r#367
[#581 'texture_storage_1d']: r#367
[#581 'texture_storage_2d']: r#367
[#581 'texture_storage_2d_array']: r#367
[#581 'texture_storage_3d']: r#367
[#581 'u32']: r#367
[#581 'var']: r#367
[#582 '!']: s#69
[#582 '&']: s#72
[#582 '(']: s#114
[#582 ')']: r#302
[#582 '*']: s#71
[#582 '-']: s#68
[#582 'array']: s#82
[#582 'bitcast']: s#77
[#582 'bool']: s#87
[#582 'f16']: s#116
[#582 'f32']: s#115
[#582 'false']: s#113
[#582 'i32']: s#117
[#582 'mat2x2']: s#98
[#582 'mat2x3']: s#99
[#582 'mat2x4']: s#100
[#582 'mat3x2']: s#101
[#582 'mat3x3']: s#102
[#582 'mat3x4']: s#103
[#582 'mat4x2']: s#104
[#582 'mat4x3']: s#105
[#582 'mat4x4']: s#106
[#582 'ptr']: s#119
[#582 'sampler']: s#133
[#582 'sampler_comparison']: s#134
[#582 'texture_1d']: s#140
[#582 'texture_2d']: s#141
[#582 'texture_2d_array']: s#142
[#582 'texture_3d']: s#143
[#582 'texture_cube']: s#144
[#582 'texture_cube_array']: s#145
[#582 'texture_depth_2d']: s#135
[#582 'texture_depth_2d_array']: s#136
[#582 'texture_depth_cube']: s#137
[#582 'texture_depth_cube_array']: s#138
[#582 'texture_depth_multisampled_2d']: s#139
[#582 'texture_multisampled_2d']: s#146
[#582 'texture_storage_1d']: s#147
[#582 'texture_storage_2d']: s#148
[#582 'texture_storage_2d_array']: s#149
[#582 'texture_storage_3d']: s#150
[#582 'true']: s#112
[#582 'u32']: s#118
[#582 'vec2']: s#95
[#582 'vec3']: s#96
[#582 'vec4']: s#97
[#582 '~']: s#70
[#582 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#582 /0[fh]/]: s#128
[#582 /0[iu]?/]: s#108
[#582 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#582 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#582 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#582 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#582 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#582 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#582 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#582 /[1-9][0-9]*[fh]/]: s#129
[#582 /[1-9][0-9]*[iu]?/]: s#109
[#583 '@']: r#368
[#583 'array']: r#368
[#583 'bool']: r#368
[#583 'f16']: r#368
[#583 'f32']: r#368
[#583 'fn']: r#368
[#583 'i32']: r#368
[#583 'override']: r#368
[#583 'ptr']: r#368
[#583 'sampler']: r#368
[#583 'sampler_comparison']: r#368
[#583 'texture_1d']: r#368
[#583 'texture_2d']: r#368
[#583 'texture_2d_array']: r#368
[#583 'texture_3d']: r#368
[#583 'texture_cube']: r#368
[#583 'texture_cube_array']: r#368
[#583 'texture_depth_2d']: r#368
[#583 'texture_depth_2d_array']: r#368
[#583 'texture_depth_cube']: r#368
[#583 'texture_depth_cube_array']: r#368
[#583 'texture_depth_multisampled_2d']: r#368
[#583 'texture_multisampled_2d']: r#368
[#583 'texture_storage_1d']: r#368
[#583 'texture_storage_2d']: r#368
[#583 'texture_storage_2d_array']: r#368
[#583 'texture_storage_3d']: r#368
[#583 'u32']: r#368
[#583 'var']: r#368
[#584 ',']: s#386
[#585 '>']: r#369
[#586 '(']: r#370
[#586 ')']: r#370
[#586 ',']: r#370
[#586 ';']: r#370
[#586 '=']: r#370
[#586 '>']: r#370
[#586 '{']: r#370
[#586 '}']: r#370
[#587 '&']: r#371
[#587 '(']: r#371
[#587 '*']: r#371
[#587 ';']: r#371
[#587 'break']: r#371
[#587 'const']: r#371
[#587 'continue']: r#371
[#587 'continuing']: r#371
[#587 'discard']: r#371
[#587 'else']: r#371
[#587 'for']: r#371
[#587 'if']: r#371
[#587 'let']: r#371
[#587 'loop']: r#371
[#587 'return']: r#371
[#587 'static_assert']: r#371
[#587 'switch']: r#371
[#587 'var']: r#371
[#587 'while']: r#371
[#587 '{']: r#371
[#587 '}']: r#371
[#587 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#371
[#588 '{']: s#176
[#589 '{']: r#372
[#590 ':']: s#378
[#591 ',']: s#386
[#592 ',']: r#373
[#592 ':']: r#373
[#592 '{']: r#373
[#593 ',']: r#374
[#593 ':']: r#374
[#593 '{']: r#374
[#594 '}']: r#375
[#595 '&']: r#376
[#595 '(']: r#376
[#595 '*']: r#376
[#595 ';']: r#376
[#595 'break']: r#376
[#595 'const']: r#376
[#595 'continue']: r#376
[#595 'continuing']: r#376
[#595 'discard']: r#376
[#595 'for']: r#376
[#595 'if']: r#376
[#595 'let']: r#376
[#595 'loop']: r#376
[#595 'return']: r#376
[#595 'static_assert']: r#376
[#595 'switch']: r#376
[#595 'var']: r#376
[#595 'while']: r#376
[#595 '{']: r#376
[#595 '}']: r#376
[#595 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#376
[#596 '}']: r#377
[#597 '&']: s#72
[#597 '*']: s#71
[#597 ';']: s#19
[#597 'break']: s#358
[#597 'const']: s#357
[#597 'continue']: s#359
[#597 'discard']: s#344
[#597 'for']: s#352
[#597 'if']: s#363
[#597 'let']: s#356
[#597 'loop']: s#351
[#597 'return']: s#348
[#597 'static_assert']: s#25
[#597 'switch']: s#350
[#597 'var']: s#157
[#597 'while']: s#353
[#597 '{']: s#176
[#597 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#598 '&']: r#378
[#598 '(']: r#378
[#598 '*']: r#378
[#598 ';']: r#378
[#598 'break']: r#378
[#598 'const']: r#378
[#598 'continue']: r#378
[#598 'continuing']: r#378
[#598 'discard']: r#378
[#598 'for']: r#378
[#598 'if']: r#378
[#598 'let']: r#378
[#598 'loop']: r#378
[#598 'return']: r#378
[#598 'static_assert']: r#378
[#598 'switch']: r#378
[#598 'var']: r#378
[#598 'while']: r#378
[#598 '{']: r#378
[#598 '}']: r#378
[#598 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#378
[#599 '&']: r#379
[#599 '(']: r#379
[#599 '*']: r#379
[#599 ';']: r#379
[#599 'break']: r#379
[#599 'const']: r#379
[#599 'continue']: r#379
[#599 'continuing']: r#379
[#599 'discard']: r#379
[#599 'for']: r#379
[#599 'if']: r#379
[#599 'let']: r#379
[#599 'loop']: r#379
[#599 'return']: r#379
[#599 'static_assert']: r#379
[#599 'switch']: r#379
[#599 'var']: r#379
[#599 'while']: r#379
[#599 '{']: r#379
[#599 '}']: r#379
[#599 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#379
[#600 ';']: s#19
[#601 ';']: r#380
[#602 ')']: r#381
[#602 ',']: r#381
[#603 'array']: s#301
[#603 'bool']: s#87
[#603 'f16']: s#116
[#603 'f32']: s#115
[#603 'i32']: s#117
[#603 'ptr']: s#119
[#603 'sampler']: s#133
[#603 'sampler_comparison']: s#134
[#603 'texture_1d']: s#140
[#603 'texture_2d']: s#141
[#603 'texture_2d_array']: s#142
[#603 'texture_3d']: s#143
[#603 'texture_cube']: s#144
[#603 'texture_cube_array']: s#145
[#603 'texture_depth_2d']: s#135
[#603 'texture_depth_2d_array']: s#136
[#603 'texture_depth_cube']: s#137
[#603 'texture_depth_cube_array']: s#138
[#603 'texture_depth_multisampled_2d']: s#139
[#603 'texture_multisampled_2d']: s#146
[#603 'texture_storage_1d']: s#147
[#603 'texture_storage_2d']: s#148
[#603 'texture_storage_2d_array']: s#149
[#603 'texture_storage_3d']: s#150
[#603 'u32']: s#118
[#603 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#604 'array']: r#382
[#604 'bool']: r#382
[#604 'f16']: r#382
[#604 'f32']: r#382
[#604 'i32']: r#382
[#604 'ptr']: r#382
[#604 'sampler']: r#382
[#604 'sampler_comparison']: r#382
[#604 'texture_1d']: r#382
[#604 'texture_2d']: r#382
[#604 'texture_2d_array']: r#382
[#604 'texture_3d']: r#382
[#604 'texture_cube']: r#382
[#604 'texture_cube_array']: r#382
[#604 'texture_depth_2d']: r#382
[#604 'texture_depth_2d_array']: r#382
[#604 'texture_depth_cube']: r#382
[#604 'texture_depth_cube_array']: r#382
[#604 'texture_depth_multisampled_2d']: r#382
[#604 'texture_multisampled_2d']: r#382
[#604 'texture_storage_1d']: r#382
[#604 'texture_storage_2d']: r#382
[#604 'texture_storage_2d_array']: r#382
[#604 'texture_storage_3d']: r#382
[#604 'u32']: r#382
[#605 '@']: s#31
[#606 'array']: r#383
[#606 'bool']: r#383
[#606 'f16']: r#383
[#606 'f32']: r#383
[#606 'i32']: r#383
[#606 'ptr']: r#383
[#606 'sampler']: r#383
[#606 'sampler_comparison']: r#383
[#606 'texture_1d']: r#383
[#606 'texture_2d']: r#383
[#606 'texture_2d_array']: r#383
[#606 'texture_3d']: r#383
[#606 'texture_cube']: r#383
[#606 'texture_cube_array']: r#383
[#606 'texture_depth_2d']: r#383
[#606 'texture_depth_2d_array']: r#383
[#606 'texture_depth_cube']: r#383
[#606 'texture_depth_cube_array']: r#383
[#606 'texture_depth_multisampled_2d']: r#383
[#606 'texture_multisampled_2d']: r#383
[#606 'texture_storage_1d']: r#383
[#606 'texture_storage_2d']: r#383
[#606 'texture_storage_2d_array']: r#383
[#606 'texture_storage_3d']: r#383
[#606 'u32']: r#383
[#607 '{']: r#384
[#608 '&']: s#72
[#608 '*']: s#71
[#608 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#609 'break']: s#628
[#610 'break']: r#385
[#610 '}']: r#385
[#611 '&']: s#72
[#611 '*']: s#71
[#611 ';']: s#19
[#611 'break']: s#358
[#611 'const']: s#357
[#611 'continue']: s#359
[#611 'discard']: s#344
[#611 'for']: s#352
[#611 'if']: s#363
[#611 'let']: s#356
[#611 'loop']: s#351
[#611 'return']: s#348
[#611 'static_assert']: s#25
[#611 'switch']: s#350
[#611 'var']: s#157
[#611 'while']: s#353
[#611 '{']: s#176
[#611 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#612 ',']: s#386
[#613 ',']: r#386
[#613 ':']: r#386
[#613 '{']: r#386
[#614 ',']: s#386
[#615 '!']: s#69
[#615 '&']: s#72
[#615 '(']: s#114
[#615 '*']: s#71
[#615 '-']: s#68
[#615 'array']: s#82
[#615 'bitcast']: s#77
[#615 'bool']: s#87
[#615 'default']: s#592
[#615 'f16']: s#116
[#615 'f32']: s#115
[#615 'false']: s#113
[#615 'i32']: s#117
[#615 'mat2x2']: s#98
[#615 'mat2x3']: s#99
[#615 'mat2x4']: s#100
[#615 'mat3x2']: s#101
[#615 'mat3x3']: s#102
[#615 'mat3x4']: s#103
[#615 'mat4x2']: s#104
[#615 'mat4x3']: s#105
[#615 'mat4x4']: s#106
[#615 'ptr']: s#119
[#615 'sampler']: s#133
[#615 'sampler_comparison']: s#134
[#615 'texture_1d']: s#140
[#615 'texture_2d']: s#141
[#615 'texture_2d_array']: s#142
[#615 'texture_3d']: s#143
[#615 'texture_cube']: s#144
[#615 'texture_cube_array']: s#145
[#615 'texture_depth_2d']: s#135
[#615 'texture_depth_2d_array']: s#136
[#615 'texture_depth_cube']: s#137
[#615 'texture_depth_cube_array']: s#138
[#615 'texture_depth_multisampled_2d']: s#139
[#615 'texture_multisampled_2d']: s#146
[#615 'texture_storage_1d']: s#147
[#615 'texture_storage_2d']: s#148
[#615 'texture_storage_2d_array']: s#149
[#615 'texture_storage_3d']: s#150
[#615 'true']: s#112
[#615 'u32']: s#118
[#615 'vec2']: s#95
[#615 'vec3']: s#96
[#615 'vec4']: s#97
[#615 '~']: s#70
[#615 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#615 /0[fh]/]: s#128
[#615 /0[iu]?/]: s#108
[#615 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#615 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#615 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#615 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#615 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#615 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#615 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#615 /[1-9][0-9]*[fh]/]: s#129
[#615 /[1-9][0-9]*[iu]?/]: s#109
[#616 '{']: s#176
[#617 '{']: r#387
[#618 'case']: r#388
[#618 'default']: r#388
[#618 '}']: r#388
[#619 '@']: r#389
[#619 'array']: r#389
[#619 'bool']: r#389
[#619 'f16']: r#389
[#619 'f32']: r#389
[#619 'fn']: r#389
[#619 'i32']: r#389
[#619 'override']: r#389
[#619 'ptr']: r#389
[#619 'sampler']: r#389
[#619 'sampler_comparison']: r#389
[#619 'texture_1d']: r#389
[#619 'texture_2d']: r#389
[#619 'texture_2d_array']: r#389
[#619 'texture_3d']: r#389
[#619 'texture_cube']: r#389
[#619 'texture_cube_array']: r#389
[#619 'texture_depth_2d']: r#389
[#619 'texture_depth_2d_array']: r#389
[#619 'texture_depth_cube']: r#389
[#619 'texture_depth_cube_array']: r#389
[#619 'texture_depth_multisampled_2d']: r#389
[#619 'texture_multisampled_2d']: r#389
[#619 'texture_storage_1d']: r#389
[#619 'texture_storage_2d']: r#389
[#619 'texture_storage_2d_array']: r#389
[#619 'texture_storage_3d']: r#389
[#619 'u32']: r#389
[#619 'var']: r#389
[#620 'case']: r#390
[#620 'default']: r#390
[#620 '}']: r#390
[#621 ',']: r#391
[#621 ':']: r#391
[#621 '{']: r#391
[#622 ',']: r#392
[#622 ':']: r#392
[#622 '{']: r#392
[#623 ':']: r#393
[#623 '{']: r#393
[#624 ':']: r#394
[#624 '{']: r#394
[#625 'break']: r#395
[#625 '}']: r#395
[#626 '}']: s#457
[#627 '}']: r#396
[#628 'if']: s#633
[#629 ')']: r#397
[#630 ')']: r#398
[#631 ')']: r#399
[#632 ')']: r#400
[#633 '!']: s#69
[#633 '&']: s#72
[#633 '(']: s#114
[#633 '*']: s#71
[#633 '-']: s#68
[#633 'array']: s#82
[#633 'bitcast']: s#77
[#633 'bool']: s#87
[#633 'f16']: s#116
[#633 'f32']: s#115
[#633 'false']: s#113
[#633 'i32']: s#117
[#633 'mat2x2']: s#98
[#633 'mat2x3']: s#99
[#633 'mat2x4']: s#100
[#633 'mat3x2']: s#101
[#633 'mat3x3']: s#102
[#633 'mat3x4']: s#103
[#633 'mat4x2']: s#104
[#633 'mat4x3']: s#105
[#633 'mat4x4']: s#106
[#633 'ptr']: s#119
[#633 'sampler']: s#133
[#633 'sampler_comparison']: s#134
[#633 'texture_1d']: s#140
[#633 'texture_2d']: s#141
[#633 'texture_2d_array']: s#142
[#633 'texture_3d']: s#143
[#633 'texture_cube']: s#144
[#633 'texture_cube_array']: s#145
[#633 'texture_depth_2d']: s#135
[#633 'texture_depth_2d_array']: s#136
[#633 'texture_depth_cube']: s#137
[#633 'texture_depth_cube_array']: s#138
[#633 'texture_depth_multisampled_2d']: s#139
[#633 'texture_multisampled_2d']: s#146
[#633 'texture_storage_1d']: s#147
[#633 'texture_storage_2d']: s#148
[#633 'texture_storage_2d_array']: s#149
[#633 'texture_storage_3d']: s#150
[#633 'true']: s#112
[#633 'u32']: s#118
[#633 'vec2']: s#95
[#633 'vec3']: s#96
[#633 'vec4']: s#97
[#633 '~']: s#70
[#633 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#633 /0[fh]/]: s#128
[#633 /0[iu]?/]: s#108
[#633 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#130
[#633 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#633 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#132
[#633 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#633 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#633 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#127
[#633 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#633 /[1-9][0-9]*[fh]/]: s#129
[#633 /[1-9][0-9]*[iu]?/]: s#109
[#634 '}']: r#401
[#635 ';']: s#19
[#636 '}']: r#402

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #30
[#2 attribute]: #29
[#2 function_decl]: #17
[#2 function_decl/0.0]: #24
[#2 function_decl/0.0/0]: #28
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #21
[#2 global_constant_decl/1.0/0]: #27
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #26
[#2 semicolon]: #12
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#6 semicolon]: #163
[#11 attr]: #30
[#11 attribute]: #29
[#11 function_decl]: #17
[#11 function_decl/0.0]: #24
[#11 function_decl/0.0/0]: #28
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #21
[#11 global_constant_decl/1.0/0]: #27
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #20
[#11 global_variable_decl/0.0/0]: #26
[#11 semicolon]: #12
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #162
[#11 type_alias_decl]: #15
[#13 semicolon]: #161
[#14 semicolon]: #160
[#15 semicolon]: #159
[#18 semicolon]: #158
[#20 variable_decl]: #156
[#22 ident]: #154
[#23 ident]: #153
[#24 function_header]: #151
[#25 additive_expression]: #58
[#25 and]: #66
[#25 array_type_decl]: #93
[#25 bang]: #63
[#25 binary_and_expression]: #55
[#25 binary_or_expression]: #56
[#25 binary_xor_expression]: #57
[#25 bitwise_expression]: #53
[#25 bool_literal]: #85
[#25 callable]: #74
[#25 const_literal]: #75
[#25 decimal_float_literal]: #110
[#25 depth_texture_type]: #121
[#25 expression]: #49
[#25 float16]: #89
[#25 float32]: #88
[#25 float_literal]: #84
[#25 hex_float_literal]: #111
[#25 ident]: #73
[#25 int32]: #90
[#25 int_literal]: #83
[#25 mat_prefix]: #81
[#25 minus]: #62
[#25 multiplicative_expression]: #60
[#25 multisampled_texture_type]: #123
[#25 paren_expression]: #76
[#25 paren_left]: #86
[#25 pointer]: #92
[#25 primary_expression]: #67
[#25 relational_expression]: #50
[#25 sampled_texture_type]: #122
[#25 sampler_type]: #120
[#25 shift_expression]: #54
[#25 short_circuit_and_expression]: #52
[#25 short_circuit_or_expression]: #51
[#25 singular_expression]: #61
[#25 star]: #65
[#25 storage_texture_type]: #124
[#25 texture_and_sampler_types]: #94
[#25 tilde]: #64
[#25 type_decl_without_ident]: #79
[#25 uint32]: #91
[#25 unary_expression]: #59
[#25 vec_prefix]: #80
[#29 attr]: #30
[#29 attribute]: #29
[#29 function_decl/0.0/0]: #48
[#29 global_constant_decl/1.0/0]: #47
[#29 global_variable_decl/0.0/0]: #46
[#32 paren_left]: #242
[#33 paren_left]: #241
[#34 paren_left]: #240
[#36 paren_left]: #239
[#37 paren_left]: #238
[#38 paren_left]: #237
[#40 paren_left]: #236
[#41 paren_left]: #235
[#42 paren_left]: #234
[#51 or_or]: #232
[#52 and_and]: #230
[#54 equal_equal]: #223
[#54 greater_than]: #220
[#54 greater_than_equal]: #222
[#54 less_than]: #219
[#54 less_than_equal]: #221
[#54 not_equal]: #224
[#55 and]: #218
[#56 or]: #216
[#57 xor]: #214
[#58 additive_operator]: #210
[#58 minus]: #212
[#58 plus]: #211
[#59 shift_left]: #206
[#59 shift_right]: #207
[#60 forward_slash]: #202
[#60 modulo]: #203
[#60 multiplicative_operator]: #200
[#60 star]: #201
[#62 and]: #66
[#62 array_type_decl]: #93
[#62 bang]: #63
[#62 bool_literal]: #85
[#62 callable]: #74
[#62 const_literal]: #75
[#62 decimal_float_literal]: #110
[#62 depth_texture_type]: #121
[#62 float16]: #89
[#62 float32]: #88
[#62 float_literal]: #84
[#62 hex_float_literal]: #111
[#62 ident]: #73
[#62 int32]: #90
[#62 int_literal]: #83
[#62 mat_prefix]: #81
[#62 minus]: #62
[#62 multisampled_texture_type]: #123
[#62 paren_expression]: #76
[#62 paren_left]: #86
[#62 pointer]: #92
[#62 primary_expression]: #67
[#62 sampled_texture_type]: #122
[#62 sampler_type]: #120
[#62 singular_expression]: #61
[#62 star]: #65
[#62 storage_texture_type]: #124
[#62 texture_and_sampler_types]: #94
[#62 tilde]: #64
[#62 type_decl_without_ident]: #79
[#62 uint32]: #91
[#62 unary_expression]: #199
[#62 vec_prefix]: #80
[#63 and]: #66
[#63 array_type_decl]: #93
[#63 bang]: #63
[#63 bool_literal]: #85
[#63 callable]: #74
[#63 const_literal]: #75
[#63 decimal_float_literal]: #110
[#63 depth_texture_type]: #121
[#63 float16]: #89
[#63 float32]: #88
[#63 float_literal]: #84
[#63 hex_float_literal]: #111
[#63 ident]: #73
[#63 int32]: #90
[#63 int_literal]: #83
[#63 mat_prefix]: #81
[#63 minus]: #62
[#63 multisampled_texture_type]: #123
[#63 paren_expression]: #76
[#63 paren_left]: #86
[#63 pointer]: #92
[#63 primary_expression]: #67
[#63 sampled_texture_type]: #122
[#63 sampler_type]: #120
[#63 singular_expression]: #61
[#63 star]: #65
[#63 storage_texture_type]: #124
[#63 texture_and_sampler_types]: #94
[#63 tilde]: #64
[#63 type_decl_without_ident]: #79
[#63 uint32]: #91
[#63 unary_expression]: #198
[#63 vec_prefix]: #80
[#64 and]: #66
[#64 array_type_decl]: #93
[#64 bang]: #63
[#64 bool_literal]: #85
[#64 callable]: #74
[#64 const_literal]: #75
[#64 decimal_float_literal]: #110
[#64 depth_texture_type]: #121
[#64 float16]: #89
[#64 float32]: #88
[#64 float_literal]: #84
[#64 hex_float_literal]: #111
[#64 ident]: #73
[#64 int32]: #90
[#64 int_literal]: #83
[#64 mat_prefix]: #81
[#64 minus]: #62
[#64 multisampled_texture_type]: #123
[#64 paren_expression]: #76
[#64 paren_left]: #86
[#64 pointer]: #92
[#64 primary_expression]: #67
[#64 sampled_texture_type]: #122
[#64 sampler_type]: #120
[#64 singular_expression]: #61
[#64 star]: #65
[#64 storage_texture_type]: #124
[#64 texture_and_sampler_types]: #94
[#64 tilde]: #64
[#64 type_decl_without_ident]: #79
[#64 uint32]: #91
[#64 unary_expression]: #197
[#64 vec_prefix]: #80
[#65 and]: #66
[#65 array_type_decl]: #93
[#65 bang]: #63
[#65 bool_literal]: #85
[#65 callable]: #74
[#65 const_literal]: #75
[#65 decimal_float_literal]: #110
[#65 depth_texture_type]: #121
[#65 float16]: #89
[#65 float32]: #88
[#65 float_literal]: #84
[#65 hex_float_literal]: #111
[#65 ident]: #73
[#65 int32]: #90
[#65 int_literal]: #83
[#65 mat_prefix]: #81
[#65 minus]: #62
[#65 multisampled_texture_type]: #123
[#65 paren_expression]: #76
[#65 paren_left]: #86
[#65 pointer]: #92
[#65 primary_expression]: #67
[#65 sampled_texture_type]: #122
[#65 sampler_type]: #120
[#65 singular_expression]: #61
[#65 star]: #65
[#65 storage_texture_type]: #124
[#65 texture_and_sampler_types]: #94
[#65 tilde]: #64
[#65 type_decl_without_ident]: #79
[#65 uint32]: #91
[#65 unary_expression]: #196
[#65 vec_prefix]: #80
[#66 and]: #66
[#66 array_type_decl]: #93
[#66 bang]: #63
[#66 bool_literal]: #85
[#66 callable]: #74
[#66 const_literal]: #75
[#66 decimal_float_literal]: #110
[#66 depth_texture_type]: #121
[#66 float16]: #89
[#66 float32]: #88
[#66 float_literal]: #84
[#66 hex_float_literal]: #111
[#66 ident]: #73
[#66 int32]: #90
[#66 int_literal]: #83
[#66 mat_prefix]: #81
[#66 minus]: #62
[#66 multisampled_texture_type]: #123
[#66 paren_expression]: #76
[#66 paren_left]: #86
[#66 pointer]: #92
[#66 primary_expression]: #67
[#66 sampled_texture_type]: #122
[#66 sampler_type]: #120
[#66 singular_expression]: #61
[#66 star]: #65
[#66 storage_texture_type]: #124
[#66 texture_and_sampler_types]: #94
[#66 tilde]: #64
[#66 type_decl_without_ident]: #79
[#66 uint32]: #91
[#66 unary_expression]: #195
[#66 vec_prefix]: #80
[#67 bracket_left]: #191
[#67 period]: #192
[#67 postfix_expression]: #190
[#67 singular_expression/0.1]: #189
[#74 argument_expression_list]: #187
[#74 paren_left]: #188
[#77 less_than]: #186
[#82 less_than]: #185
[#86 additive_expression]: #58
[#86 and]: #66
[#86 array_type_decl]: #93
[#86 bang]: #63
[#86 binary_and_expression]: #55
[#86 binary_or_expression]: #56
[#86 binary_xor_expression]: #57
[#86 bitwise_expression]: #53
[#86 bool_literal]: #85
[#86 callable]: #74
[#86 const_literal]: #75
[#86 decimal_float_literal]: #110
[#86 depth_texture_type]: #121
[#86 expression]: #184
[#86 float16]: #89
[#86 float32]: #88
[#86 float_literal]: #84
[#86 hex_float_literal]: #111
[#86 ident]: #73
[#86 int32]: #90
[#86 int_literal]: #83
[#86 mat_prefix]: #81
[#86 minus]: #62
[#86 multiplicative_expression]: #60
[#86 multisampled_texture_type]: #123
[#86 paren_expression]: #76
[#86 paren_left]: #86
[#86 pointer]: #92
[#86 primary_expression]: #67
[#86 relational_expression]: #50
[#86 sampled_texture_type]: #122
[#86 sampler_type]: #120
[#86 shift_expression]: #54
[#86 short_circuit_and_expression]: #52
[#86 short_circuit_or_expression]: #51
[#86 singular_expression]: #61
[#86 star]: #65
[#86 storage_texture_type]: #124
[#86 texture_and_sampler_types]: #94
[#86 tilde]: #64
[#86 type_decl_without_ident]: #79
[#86 uint32]: #91
[#86 unary_expression]: #59
[#86 vec_prefix]: #80
[#92 less_than]: #183
[#122 less_than]: #182
[#123 less_than]: #181
[#124 less_than]: #180
[#151 brace_left]: #179
[#151 compound_statement]: #178
[#152 ident]: #177
[#153 brace_left]: #175
[#153 struct_body_decl]: #174
[#154 equal]: #173
[#155 ident]: #172
[#155 optionally_typed_ident]: #171
[#156 equal]: #169
[#156 global_variable_decl/0.2]: #168
[#157 less_than]: #166
[#157 variable_decl/0.1]: #164
[#157 variable_qualifier]: #165
[#164 ident]: #172
[#164 optionally_typed_ident]: #383
[#166 address_space]: #382
[#169 additive_expression]: #58
[#169 and]: #66
[#169 array_type_decl]: #93
[#169 bang]: #63
[#169 binary_and_expression]: #55
[#169 binary_or_expression]: #56
[#169 binary_xor_expression]: #57
[#169 bitwise_expression]: #53
[#169 bool_literal]: #85
[#169 callable]: #74
[#169 const_literal]: #75
[#169 decimal_float_literal]: #110
[#169 depth_texture_type]: #121
[#169 expression]: #381
[#169 float16]: #89
[#169 float32]: #88
[#169 float_literal]: #84
[#169 hex_float_literal]: #111
[#169 ident]: #73
[#169 int32]: #90
[#169 int_literal]: #83
[#169 mat_prefix]: #81
[#169 minus]: #62
[#169 multiplicative_expression]: #60
[#169 multisampled_texture_type]: #123
[#169 paren_expression]: #76
[#169 paren_left]: #86
[#169 pointer]: #92
[#169 primary_expression]: #67
[#169 relational_expression]: #50
[#169 sampled_texture_type]: #122
[#169 sampler_type]: #120
[#169 shift_expression]: #54
[#169 short_circuit_and_expression]: #52
[#169 short_circuit_or_expression]: #51
[#169 singular_expression]: #61
[#169 star]: #65
[#169 storage_texture_type]: #124
[#169 texture_and_sampler_types]: #94
[#169 tilde]: #64
[#169 type_decl_without_ident]: #79
[#169 uint32]: #91
[#169 unary_expression]: #59
[#169 vec_prefix]: #80
[#171 equal]: #380
[#171 global_constant_decl/1.3]: #379
[#172 colon]: #377
[#172 optionally_typed_ident/0.1]: #376
[#173 array_type_decl]: #93
[#173 depth_texture_type]: #121
[#173 float16]: #89
[#173 float32]: #88
[#173 ident]: #299
[#173 int32]: #90
[#173 multisampled_texture_type]: #123
[#173 pointer]: #92
[#173 sampled_texture_type]: #122
[#173 sampler_type]: #120
[#173 storage_texture_type]: #124
[#173 texture_and_sampler_types]: #94
[#173 type_decl]: #375
[#173 type_decl_without_ident]: #300
[#173 uint32]: #91
[#175 attr]: #30
[#175 attribute]: #374
[#175 struct_member]: #371
[#175 struct_member/0.0]: #372
[#175 struct_member/0.0/0]: #373
[#177 paren_left]: #370
[#179 and]: #369
[#179 assignment_statement]: #360
[#179 brace_left]: #179
[#179 break_statement]: #342
[#179 compound_statement]: #346
[#179 compound_statement/0.1]: #330
[#179 compound_statement/0.1/0]: #331
[#179 continue_statement]: #343
[#179 decrement_statement]: #362
[#179 for_statement]: #338
[#179 func_call_statement]: #340
[#179 ident]: #354
[#179 if_clause]: #349
[#179 if_statement]: #335
[#179 increment_statement]: #361
[#179 lhs_expression]: #364
[#179 lhs_expression/0.0]: #365
[#179 lhs_expression/0.0/0]: #366
[#179 lhs_expression/0.0/0/0.0]: #367
[#179 loop_statement]: #337
[#179 return_statement]: #334
[#179 semicolon]: #333
[#179 star]: #368
[#179 statement]: #332
[#179 static_assert_statement]: #347
[#179 switch_statement]: #336
[#179 variable_decl]: #355
[#179 variable_statement]: #341
[#179 variable_updating_statement]: #345
[#179 while_statement]: #339
[#180 texel_format]: #313
[#181 array_type_decl]: #93
[#181 depth_texture_type]: #121
[#181 float16]: #89
[#181 float32]: #88
[#181 ident]: #299
[#181 int32]: #90
[#181 multisampled_texture_type]: #123
[#181 pointer]: #92
[#181 sampled_texture_type]: #122
[#181 sampler_type]: #120
[#181 storage_texture_type]: #124
[#181 texture_and_sampler_types]: #94
[#181 type_decl]: #312
[#181 type_decl_without_ident]: #300
[#181 uint32]: #91
[#182 array_type_decl]: #93
[#182 depth_texture_type]: #121
[#182 float16]: #89
[#182 float32]: #88
[#182 ident]: #299
[#182 int32]: #90
[#182 multisampled_texture_type]: #123
[#182 pointer]: #92
[#182 sampled_texture_type]: #122
[#182 sampler_type]: #120
[#182 storage_texture_type]: #124
[#182 texture_and_sampler_types]: #94
[#182 type_decl]: #311
[#182 type_decl_without_ident]: #300
[#182 uint32]: #91
[#183 address_space]: #305
[#184 paren_right]: #303
[#185 array_type_decl]: #93
[#185 depth_texture_type]: #121
[#185 float16]: #89
[#185 float32]: #88
[#185 ident]: #299
[#185 int32]: #90
[#185 multisampled_texture_type]: #123
[#185 pointer]: #92
[#185 sampled_texture_type]: #122
[#185 sampler_type]: #120
[#185 storage_texture_type]: #124
[#185 texture_and_sampler_types]: #94
[#185 type_decl]: #302
[#185 type_decl_without_ident]: #300
[#185 uint32]: #91
[#186 array_type_decl]: #93
[#186 depth_texture_type]: #121
[#186 float16]: #89
[#186 float32]: #88
[#186 ident]: #299
[#186 int32]: #90
[#186 multisampled_texture_type]: #123
[#186 pointer]: #92
[#186 sampled_texture_type]: #122
[#186 sampler_type]: #120
[#186 storage_texture_type]: #124
[#186 texture_and_sampler_types]: #94
[#186 type_decl]: #298
[#186 type_decl_without_ident]: #300
[#186 uint32]: #91
[#188 additive_expression]: #58
[#188 and]: #66
[#188 argument_expression_list/0.1]: #296
[#188 array_type_decl]: #93
[#188 bang]: #63
[#188 binary_and_expression]: #55
[#188 binary_or_expression]: #56
[#188 binary_xor_expression]: #57
[#188 bitwise_expression]: #53
[#188 bool_literal]: #85
[#188 callable]: #74
[#188 const_literal]: #75
[#188 decimal_float_literal]: #110
[#188 depth_texture_type]: #121
[#188 expression]: #297
[#188 float16]: #89
[#188 float32]: #88
[#188 float_literal]: #84
[#188 hex_float_literal]: #111
[#188 ident]: #73
[#188 int32]: #90
[#188 int_literal]: #83
[#188 mat_prefix]: #81
[#188 minus]: #62
[#188 multiplicative_expression]: #60
[#188 multisampled_texture_type]: #123
[#188 paren_expression]: #76
[#188 paren_left]: #86
[#188 pointer]: #92
[#188 primary_expression]: #67
[#188 relational_expression]: #50
[#188 sampled_texture_type]: #122
[#188 sampler_type]: #120
[#188 shift_expression]: #54
[#188 short_circuit_and_expression]: #52
[#188 short_circuit_or_expression]: #51
[#188 singular_expression]: #61
[#188 star]: #65
[#188 storage_texture_type]: #124
[#188 texture_and_sampler_types]: #94
[#188 tilde]: #64
[#188 type_decl_without_ident]: #79
[#188 uint32]: #91
[#188 unary_expression]: #59
[#188 vec_prefix]: #80
[#191 additive_expression]: #58
[#191 and]: #66
[#191 array_type_decl]: #93
[#191 bang]: #63
[#191 binary_and_expression]: #55
[#191 binary_or_expression]: #56
[#191 binary_xor_expression]: #57
[#191 bitwise_expression]: #53
[#191 bool_literal]: #85
[#191 callable]: #74
[#191 const_literal]: #75
[#191 decimal_float_literal]: #110
[#191 depth_texture_type]: #121
[#191 expression]: #295
[#191 float16]: #89
[#191 float32]: #88
[#191 float_literal]: #84
[#191 hex_float_literal]: #111
[#191 ident]: #73
[#191 int32]: #90
[#191 int_literal]: #83
[#191 mat_prefix]: #81
[#191 minus]: #62
[#191 multiplicative_expression]: #60
[#191 multisampled_texture_type]: #123
[#191 paren_expression]: #76
[#191 paren_left]: #86
[#191 pointer]: #92
[#191 primary_expression]: #67
[#191 relational_expression]: #50
[#191 sampled_texture_type]: #122
[#191 sampler_type]: #120
[#191 shift_expression]: #54
[#191 short_circuit_and_expression]: #52
[#191 short_circuit_or_expression]: #51
[#191 singular_expression]: #61
[#191 star]: #65
[#191 storage_texture_type]: #124
[#191 texture_and_sampler_types]: #94
[#191 tilde]: #64
[#191 type_decl_without_ident]: #79
[#191 uint32]: #91
[#191 unary_expression]: #59
[#191 vec_prefix]: #80
[#192 member_ident]: #284
[#192 swizzle_name]: #285
[#200 and]: #66
[#200 array_type_decl]: #93
[#200 bang]: #63
[#200 bool_literal]: #85
[#200 callable]: #74
[#200 const_literal]: #75
[#200 decimal_float_literal]: #110
[#200 depth_texture_type]: #121
[#200 float16]: #89
[#200 float32]: #88
[#200 float_literal]: #84
[#200 hex_float_literal]: #111
[#200 ident]: #73
[#200 int32]: #90
[#200 int_literal]: #83
[#200 mat_prefix]: #81
[#200 minus]: #62
[#200 multisampled_texture_type]: #123
[#200 paren_expression]: #76
[#200 paren_left]: #86
[#200 pointer]: #92
[#200 primary_expression]: #67
[#200 sampled_texture_type]: #122
[#200 sampler_type]: #120
[#200 singular_expression]: #61
[#200 star]: #65
[#200 storage_texture_type]: #124
[#200 texture_and_sampler_types]: #94
[#200 tilde]: #64
[#200 type_decl_without_ident]: #79
[#200 uint32]: #91
[#200 unary_expression]: #283
[#200 vec_prefix]: #80
[#206 and]: #66
[#206 array_type_decl]: #93
[#206 bang]: #63
[#206 bool_literal]: #85
[#206 callable]: #74
[#206 const_literal]: #75
[#206 decimal_float_literal]: #110
[#206 depth_texture_type]: #121
[#206 float16]: #89
[#206 float32]: #88
[#206 float_literal]: #84
[#206 hex_float_literal]: #111
[#206 ident]: #73
[#206 int32]: #90
[#206 int_literal]: #83
[#206 mat_prefix]: #81
[#206 minus]: #62
[#206 multisampled_texture_type]: #123
[#206 paren_expression]: #76
[#206 paren_left]: #86
[#206 pointer]: #92
[#206 primary_expression]: #67
[#206 sampled_texture_type]: #122
[#206 sampler_type]: #120
[#206 singular_expression]: #61
[#206 star]: #65
[#206 storage_texture_type]: #124
[#206 texture_and_sampler_types]: #94
[#206 tilde]: #64
[#206 type_decl_without_ident]: #79
[#206 uint32]: #91
[#206 unary_expression]: #282
[#206 vec_prefix]: #80
[#207 and]: #66
[#207 array_type_decl]: #93
[#207 bang]: #63
[#207 bool_literal]: #85
[#207 callable]: #74
[#207 const_literal]: #75
[#207 decimal_float_literal]: #110
[#207 depth_texture_type]: #121
[#207 float16]: #89
[#207 float32]: #88
[#207 float_literal]: #84
[#207 hex_float_literal]: #111
[#207 ident]: #73
[#207 int32]: #90
[#207 int_literal]: #83
[#207 mat_prefix]: #81
[#207 minus]: #62
[#207 multisampled_texture_type]: #123
[#207 paren_expression]: #76
[#207 paren_left]: #86
[#207 pointer]: #92
[#207 primary_expression]: #67
[#207 sampled_texture_type]: #122
[#207 sampler_type]: #120
[#207 singular_expression]: #61
[#207 star]: #65
[#207 storage_texture_type]: #124
[#207 texture_and_sampler_types]: #94
[#207 tilde]: #64
[#207 type_decl_without_ident]: #79
[#207 uint32]: #91
[#207 unary_expression]: #281
[#207 vec_prefix]: #80
[#210 and]: #66
[#210 array_type_decl]: #93
[#210 bang]: #63
[#210 bool_literal]: #85
[#210 callable]: #74
[#210 const_literal]: #75
[#210 decimal_float_literal]: #110
[#210 depth_texture_type]: #121
[#210 float16]: #89
[#210 float32]: #88
[#210 float_literal]: #84
[#210 hex_float_literal]: #111
[#210 ident]: #73
[#210 int32]: #90
[#210 int_literal]: #83
[#210 mat_prefix]: #81
[#210 minus]: #62
[#210 multiplicative_expression]: #279
[#210 multisampled_texture_type]: #123
[#210 paren_expression]: #76
[#210 paren_left]: #86
[#210 pointer]: #92
[#210 primary_expression]: #67
[#210 sampled_texture_type]: #122
[#210 sampler_type]: #120
[#210 singular_expression]: #61
[#210 star]: #65
[#210 storage_texture_type]: #124
[#210 texture_and_sampler_types]: #94
[#210 tilde]: #64
[#210 type_decl_without_ident]: #79
[#210 uint32]: #91
[#210 unary_expression]: #280
[#210 vec_prefix]: #80
[#214 and]: #66
[#214 array_type_decl]: #93
[#214 bang]: #63
[#214 bool_literal]: #85
[#214 callable]: #74
[#214 const_literal]: #75
[#214 decimal_float_literal]: #110
[#214 depth_texture_type]: #121
[#214 float16]: #89
[#214 float32]: #88
[#214 float_literal]: #84
[#214 hex_float_literal]: #111
[#214 ident]: #73
[#214 int32]: #90
[#214 int_literal]: #83
[#214 mat_prefix]: #81
[#214 minus]: #62
[#214 multisampled_texture_type]: #123
[#214 paren_expression]: #76
[#214 paren_left]: #86
[#214 pointer]: #92
[#214 primary_expression]: #67
[#214 sampled_texture_type]: #122
[#214 sampler_type]: #120
[#214 singular_expression]: #61
[#214 star]: #65
[#214 storage_texture_type]: #124
[#214 texture_and_sampler_types]: #94
[#214 tilde]: #64
[#214 type_decl_without_ident]: #79
[#214 uint32]: #91
[#214 unary_expression]: #278
[#214 vec_prefix]: #80
[#216 and]: #66
[#216 array_type_decl]: #93
[#216 bang]: #63
[#216 bool_literal]: #85
[#216 callable]: #74
[#216 const_literal]: #75
[#216 decimal_float_literal]: #110
[#216 depth_texture_type]: #121
[#216 float16]: #89
[#216 float32]: #88
[#216 float_literal]: #84
[#216 hex_float_literal]: #111
[#216 ident]: #73
[#216 int32]: #90
[#216 int_literal]: #83
[#216 mat_prefix]: #81
[#216 minus]: #62
[#216 multisampled_texture_type]: #123
[#216 paren_expression]: #76
[#216 paren_left]: #86
[#216 pointer]: #92
[#216 primary_expression]: #67
[#216 sampled_texture_type]: #122
[#216 sampler_type]: #120
[#216 singular_expression]: #61
[#216 star]: #65
[#216 storage_texture_type]: #124
[#216 texture_and_sampler_types]: #94
[#216 tilde]: #64
[#216 type_decl_without_ident]: #79
[#216 uint32]: #91
[#216 unary_expression]: #277
[#216 vec_prefix]: #80
[#218 and]: #66
[#218 array_type_decl]: #93
[#218 bang]: #63
[#218 bool_literal]: #85
[#218 callable]: #74
[#218 const_literal]: #75
[#218 decimal_float_literal]: #110
[#218 depth_texture_type]: #121
[#218 float16]: #89
[#218 float32]: #88
[#218 float_literal]: #84
[#218 hex_float_literal]: #111
[#218 ident]: #73
[#218 int32]: #90
[#218 int_literal]: #83
[#218 mat_prefix]: #81
[#218 minus]: #62
[#218 multisampled_texture_type]: #123
[#218 paren_expression]: #76
[#218 paren_left]: #86
[#218 pointer]: #92
[#218 primary_expression]: #67
[#218 sampled_texture_type]: #122
[#218 sampler_type]: #120
[#218 singular_expression]: #61
[#218 star]: #65
[#218 storage_texture_type]: #124
[#218 texture_and_sampler_types]: #94
[#218 tilde]: #64
[#218 type_decl_without_ident]: #79
[#218 uint32]: #91
[#218 unary_expression]: #276
[#218 vec_prefix]: #80
[#219 additive_expression]: #58
[#219 and]: #66
[#219 array_type_decl]: #93
[#219 bang]: #63
[#219 bool_literal]: #85
[#219 callable]: #74
[#219 const_literal]: #75
[#219 decimal_float_literal]: #110
[#219 depth_texture_type]: #121
[#219 float16]: #89
[#219 float32]: #88
[#219 float_literal]: #84
[#219 hex_float_literal]: #111
[#219 ident]: #73
[#219 int32]: #90
[#219 int_literal]: #83
[#219 mat_prefix]: #81
[#219 minus]: #62
[#219 multiplicative_expression]: #60
[#219 multisampled_texture_type]: #123
[#219 paren_expression]: #76
[#219 paren_left]: #86
[#219 pointer]: #92
[#219 primary_expression]: #67
[#219 sampled_texture_type]: #122
[#219 sampler_type]: #120
[#219 shift_expression]: #275
[#219 singular_expression]: #61
[#219 star]: #65
[#219 storage_texture_type]: #124
[#219 texture_and_sampler_types]: #94
[#219 tilde]: #64
[#219 type_decl_without_ident]: #79
[#219 uint32]: #91
[#219 unary_expression]: #268
[#219 vec_prefix]: #80
[#220 additive_expression]: #58
[#220 and]: #66
[#220 array_type_decl]: #93
[#220 bang]: #63
[#220 bool_literal]: #85
[#220 callable]: #74
[#220 const_literal]: #75
[#220 decimal_float_literal]: #110
[#220 depth_texture_type]: #121
[#220 float16]: #89
[#220 float32]: #88
[#220 float_literal]: #84
[#220 hex_float_literal]: #111
[#220 ident]: #73
[#220 int32]: #90
[#220 int_literal]: #83
[#220 mat_prefix]: #81
[#220 minus]: #62
[#220 multiplicative_expression]: #60
[#220 multisampled_texture_type]: #123
[#220 paren_expression]: #76
[#220 paren_left]: #86
[#220 pointer]: #92
[#220 primary_expression]: #67
[#220 sampled_texture_type]: #122
[#220 sampler_type]: #120
[#220 shift_expression]: #274
[#220 singular_expression]: #61
[#220 star]: #65
[#220 storage_texture_type]: #124
[#220 texture_and_sampler_types]: #94
[#220 tilde]: #64
[#220 type_decl_without_ident]: #79
[#220 uint32]: #91
[#220 unary_expression]: #268
[#220 vec_prefix]: #80
[#221 additive_expression]: #58
[#221 and]: #66
[#221 array_type_decl]: #93
[#221 bang]: #63
[#221 bool_literal]: #85
[#221 callable]: #74
[#221 const_literal]: #75
[#221 decimal_float_literal]: #110
[#221 depth_texture_type]: #121
[#221 float16]: #89
[#221 float32]: #88
[#221 float_literal]: #84
[#221 hex_float_literal]: #111
[#221 ident]: #73
[#221 int32]: #90
[#221 int_literal]: #83
[#221 mat_prefix]: #81
[#221 minus]: #62
[#221 multiplicative_expression]: #60
[#221 multisampled_texture_type]: #123
[#221 paren_expression]: #76
[#221 paren_left]: #86
[#221 pointer]: #92
[#221 primary_expression]: #67
[#221 sampled_texture_type]: #122
[#221 sampler_type]: #120
[#221 shift_expression]: #273
[#221 singular_expression]: #61
[#221 star]: #65
[#221 storage_texture_type]: #124
[#221 texture_and_sampler_types]: #94
[#221 tilde]: #64
[#221 type_decl_without_ident]: #79
[#221 uint32]: #91
[#221 unary_expression]: #268
[#221 vec_prefix]: #80
[#222 additive_expression]: #58
[#222 and]: #66
[#222 array_type_decl]: #93
[#222 bang]: #63
[#222 bool_literal]: #85
[#222 callable]: #74
[#222 const_literal]: #75
[#222 decimal_float_literal]: #110
[#222 depth_texture_type]: #121
[#222 float16]: #89
[#222 float32]: #88
[#222 float_literal]: #84
[#222 hex_float_literal]: #111
[#222 ident]: #73
[#222 int32]: #90
[#222 int_literal]: #83
[#222 mat_prefix]: #81
[#222 minus]: #62
[#222 multiplicative_expression]: #60
[#222 multisampled_texture_type]: #123
[#222 paren_expression]: #76
[#222 paren_left]: #86
[#222 pointer]: #92
[#222 primary_expression]: #67
[#222 sampled_texture_type]: #122
[#222 sampler_type]: #120
[#222 shift_expression]: #272
[#222 singular_expression]: #61
[#222 star]: #65
[#222 storage_texture_type]: #124
[#222 texture_and_sampler_types]: #94
[#222 tilde]: #64
[#222 type_decl_without_ident]: #79
[#222 uint32]: #91
[#222 unary_expression]: #268
[#222 vec_prefix]: #80
[#223 additive_expression]: #58
[#223 and]: #66
[#223 array_type_decl]: #93
[#223 bang]: #63
[#223 bool_literal]: #85
[#223 callable]: #74
[#223 const_literal]: #75
[#223 decimal_float_literal]: #110
[#223 depth_texture_type]: #121
[#223 float16]: #89
[#223 float32]: #88
[#223 float_literal]: #84
[#223 hex_float_literal]: #111
[#223 ident]: #73
[#223 int32]: #90
[#223 int_literal]: #83
[#223 mat_prefix]: #81
[#223 minus]: #62
[#223 multiplicative_expression]: #60
[#223 multisampled_texture_type]: #123
[#223 paren_expression]: #76
[#223 paren_left]: #86
[#223 pointer]: #92
[#223 primary_expression]: #67
[#223 sampled_texture_type]: #122
[#223 sampler_type]: #120
[#223 shift_expression]: #271
[#223 singular_expression]: #61
[#223 star]: #65
[#223 storage_texture_type]: #124
[#223 texture_and_sampler_types]: #94
[#223 tilde]: #64
[#223 type_decl_without_ident]: #79
[#223 uint32]: #91
[#223 unary_expression]: #268
[#223 vec_prefix]: #80
[#224 additive_expression]: #58
[#224 and]: #66
[#224 array_type_decl]: #93
[#224 bang]: #63
[#224 bool_literal]: #85
[#224 callable]: #74
[#224 const_literal]: #75
[#224 decimal_float_literal]: #110
[#224 depth_texture_type]: #121
[#224 float16]: #89
[#224 float32]: #88
[#224 float_literal]: #84
[#224 hex_float_literal]: #111
[#224 ident]: #73
[#224 int32]: #90
[#224 int_literal]: #83
[#224 mat_prefix]: #81
[#224 minus]: #62
[#224 multiplicative_expression]: #60
[#224 multisampled_texture_type]: #123
[#224 paren_expression]: #76
[#224 paren_left]: #86
[#224 pointer]: #92
[#224 primary_expression]: #67
[#224 sampled_texture_type]: #122
[#224 sampler_type]: #120
[#224 shift_expression]: #270
[#224 singular_expression]: #61
[#224 star]: #65
[#224 storage_texture_type]: #124
[#224 texture_and_sampler_types]: #94
[#224 tilde]: #64
[#224 type_decl_without_ident]: #79
[#224 uint32]: #91
[#224 unary_expression]: #268
[#224 vec_prefix]: #80
[#230 additive_expression]: #58
[#230 and]: #66
[#230 array_type_decl]: #93
[#230 bang]: #63
[#230 bool_literal]: #85
[#230 callable]: #74
[#230 const_literal]: #75
[#230 decimal_float_literal]: #110
[#230 depth_texture_type]: #121
[#230 float16]: #89
[#230 float32]: #88
[#230 float_literal]: #84
[#230 hex_float_literal]: #111
[#230 ident]: #73
[#230 int32]: #90
[#230 int_literal]: #83
[#230 mat_prefix]: #81
[#230 minus]: #62
[#230 multiplicative_expression]: #60
[#230 multisampled_texture_type]: #123
[#230 paren_expression]: #76
[#230 paren_left]: #86
[#230 pointer]: #92
[#230 primary_expression]: #67
[#230 relational_expression]: #269
[#230 sampled_texture_type]: #122
[#230 sampler_type]: #120
[#230 shift_expression]: #54
[#230 singular_expression]: #61
[#230 star]: #65
[#230 storage_texture_type]: #124
[#230 texture_and_sampler_types]: #94
[#230 tilde]: #64
[#230 type_decl_without_ident]: #79
[#230 uint32]: #91
[#230 unary_expression]: #268
[#230 vec_prefix]: #80
[#232 additive_expression]: #58
[#232 and]: #66
[#232 array_type_decl]: #93
[#232 bang]: #63
[#232 bool_literal]: #85
[#232 callable]: #74
[#232 const_literal]: #75
[#232 decimal_float_literal]: #110
[#232 depth_texture_type]: #121
[#232 float16]: #89
[#232 float32]: #88
[#232 float_literal]: #84
[#232 hex_float_literal]: #111
[#232 ident]: #73
[#232 int32]: #90
[#232 int_literal]: #83
[#232 mat_prefix]: #81
[#232 minus]: #62
[#232 multiplicative_expression]: #60
[#232 multisampled_texture_type]: #123
[#232 paren_expression]: #76
[#232 paren_left]: #86
[#232 pointer]: #92
[#232 primary_expression]: #67
[#232 relational_expression]: #267
[#232 sampled_texture_type]: #122
[#232 sampler_type]: #120
[#232 shift_expression]: #54
[#232 singular_expression]: #61
[#232 star]: #65
[#232 storage_texture_type]: #124
[#232 texture_and_sampler_types]: #94
[#232 tilde]: #64
[#232 type_decl_without_ident]: #79
[#232 uint32]: #91
[#232 unary_expression]: #268
[#232 vec_prefix]: #80
[#234 additive_expression]: #58
[#234 and]: #66
[#234 array_type_decl]: #93
[#234 bang]: #63
[#234 binary_and_expression]: #55
[#234 binary_or_expression]: #56
[#234 binary_xor_expression]: #57
[#234 bitwise_expression]: #53
[#234 bool_literal]: #85
[#234 callable]: #74
[#234 const_literal]: #75
[#234 decimal_float_literal]: #110
[#234 depth_texture_type]: #121
[#234 expression]: #266
[#234 float16]: #89
[#234 float32]: #88
[#234 float_literal]: #84
[#234 hex_float_literal]: #111
[#234 ident]: #73
[#234 int32]: #90
[#234 int_literal]: #83
[#234 mat_prefix]: #81
[#234 minus]: #62
[#234 multiplicative_expression]: #60
[#234 multisampled_texture_type]: #123
[#234 paren_expression]: #76
[#234 paren_left]: #86
[#234 pointer]: #92
[#234 primary_expression]: #67
[#234 relational_expression]: #50
[#234 sampled_texture_type]: #122
[#234 sampler_type]: #120
[#234 shift_expression]: #54
[#234 short_circuit_and_expression]: #52
[#234 short_circuit_or_expression]: #51
[#234 singular_expression]: #61
[#234 star]: #65
[#234 storage_texture_type]: #124
[#234 texture_and_sampler_types]: #94
[#234 tilde]: #64
[#234 type_decl_without_ident]: #79
[#234 uint32]: #91
[#234 unary_expression]: #59
[#234 vec_prefix]: #80
[#235 additive_expression]: #58
[#235 and]: #66
[#235 array_type_decl]: #93
[#235 bang]: #63
[#235 binary_and_expression]: #55
[#235 binary_or_expression]: #56
[#235 binary_xor_expression]: #57
[#235 bitwise_expression]: #53
[#235 bool_literal]: #85
[#235 callable]: #74
[#235 const_literal]: #75
[#235 decimal_float_literal]: #110
[#235 depth_texture_type]: #121
[#235 expression]: #265
[#235 float16]: #89
[#235 float32]: #88
[#235 float_literal]: #84
[#235 hex_float_literal]: #111
[#235 ident]: #73
[#235 int32]: #90
[#235 int_literal]: #83
[#235 mat_prefix]: #81
[#235 minus]: #62
[#235 multiplicative_expression]: #60
[#235 multisampled_texture_type]: #123
[#235 paren_expression]: #76
[#235 paren_left]: #86
[#235 pointer]: #92
[#235 primary_expression]: #67
[#235 relational_expression]: #50
[#235 sampled_texture_type]: #122
[#235 sampler_type]: #120
[#235 shift_expression]: #54
[#235 short_circuit_and_expression]: #52
[#235 short_circuit_or_expression]: #51
[#235 singular_expression]: #61
[#235 star]: #65
[#235 storage_texture_type]: #124
[#235 texture_and_sampler_types]: #94
[#235 tilde]: #64
[#235 type_decl_without_ident]: #79
[#235 uint32]: #91
[#235 unary_expression]: #59
[#235 vec_prefix]: #80
[#236 additive_expression]: #58
[#236 and]: #66
[#236 array_type_decl]: #93
[#236 bang]: #63
[#236 binary_and_expression]: #55
[#236 binary_or_expression]: #56
[#236 binary_xor_expression]: #57
[#236 bitwise_expression]: #53
[#236 bool_literal]: #85
[#236 callable]: #74
[#236 const_literal]: #75
[#236 decimal_float_literal]: #110
[#236 depth_texture_type]: #121
[#236 expression]: #264
[#236 float16]: #89
[#236 float32]: #88
[#236 float_literal]: #84
[#236 hex_float_literal]: #111
[#236 ident]: #73
[#236 int32]: #90
[#236 int_literal]: #83
[#236 mat_prefix]: #81
[#236 minus]: #62
[#236 multiplicative_expression]: #60
[#236 multisampled_texture_type]: #123
[#236 paren_expression]: #76
[#236 paren_left]: #86
[#236 pointer]: #92
[#236 primary_expression]: #67
[#236 relational_expression]: #50
[#236 sampled_texture_type]: #122
[#236 sampler_type]: #120
[#236 shift_expression]: #54
[#236 short_circuit_and_expression]: #52
[#236 short_circuit_or_expression]: #51
[#236 singular_expression]: #61
[#236 star]: #65
[#236 storage_texture_type]: #124
[#236 texture_and_sampler_types]: #94
[#236 tilde]: #64
[#236 type_decl_without_ident]: #79
[#236 uint32]: #91
[#236 unary_expression]: #59
[#236 vec_prefix]: #80
[#237 interpolation_type_name]: #260
[#238 additive_expression]: #58
[#238 and]: #66
[#238 array_type_decl]: #93
[#238 bang]: #63
[#238 binary_and_expression]: #55
[#238 binary_or_expression]: #56
[#238 binary_xor_expression]: #57
[#238 bitwise_expression]: #53
[#238 bool_literal]: #85
[#238 callable]: #74
[#238 const_literal]: #75
[#238 decimal_float_literal]: #110
[#238 depth_texture_type]: #121
[#238 expression]: #259
[#238 float16]: #89
[#238 float32]: #88
[#238 float_literal]: #84
[#238 hex_float_literal]: #111
[#238 ident]: #73
[#238 int32]: #90
[#238 int_literal]: #83
[#238 mat_prefix]: #81
[#238 minus]: #62
[#238 multiplicative_expression]: #60
[#238 multisampled_texture_type]: #123
[#238 paren_expression]: #76
[#238 paren_left]: #86
[#238 pointer]: #92
[#238 primary_expression]: #67
[#238 relational_expression]: #50
[#238 sampled_texture_type]: #122
[#238 sampler_type]: #120
[#238 shift_expression]: #54
[#238 short_circuit_and_expression]: #52
[#238 short_circuit_or_expression]: #51
[#238 singular_expression]: #61
[#238 star]: #65
[#238 storage_texture_type]: #124
[#238 texture_and_sampler_types]: #94
[#238 tilde]: #64
[#238 type_decl_without_ident]: #79
[#238 uint32]: #91
[#238 unary_expression]: #59
[#238 vec_prefix]: #80
[#239 additive_expression]: #58
[#239 and]: #66
[#239 array_type_decl]: #93
[#239 bang]: #63
[#239 binary_and_expression]: #55
[#239 binary_or_expression]: #56
[#239 binary_xor_expression]: #57
[#239 bitwise_expression]: #53
[#239 bool_literal]: #85
[#239 callable]: #74
[#239 const_literal]: #75
[#239 decimal_float_literal]: #110
[#239 depth_texture_type]: #121
[#239 expression]: #258
[#239 float16]: #89
[#239 float32]: #88
[#239 float_literal]: #84
[#239 hex_float_literal]: #111
[#239 ident]: #73
[#239 int32]: #90
[#239 int_literal]: #83
[#239 mat_prefix]: #81
[#239 minus]: #62
[#239 multiplicative_expression]: #60
[#239 multisampled_texture_type]: #123
[#239 paren_expression]: #76
[#239 paren_left]: #86
[#239 pointer]: #92
[#239 primary_expression]: #67
[#239 relational_expression]: #50
[#239 sampled_texture_type]: #122
[#239 sampler_type]: #120
[#239 shift_expression]: #54
[#239 short_circuit_and_expression]: #52
[#239 short_circuit_or_expression]: #51
[#239 singular_expression]: #61
[#239 star]: #65
[#239 storage_texture_type]: #124
[#239 texture_and_sampler_types]: #94
[#239 tilde]: #64
[#239 type_decl_without_ident]: #79
[#239 uint32]: #91
[#239 unary_expression]: #59
[#239 vec_prefix]: #80
[#240 builtin_value_name]: #245
[#241 additive_expression]: #58
[#241 and]: #66
[#241 array_type_decl]: #93
[#241 bang]: #63
[#241 binary_and_expression]: #55
[#241 binary_or_expression]: #56
[#241 binary_xor_expression]: #57
[#241 bitwise_expression]: #53
[#241 bool_literal]: #85
[#241 callable]: #74
[#241 const_literal]: #75
[#241 decimal_float_literal]: #110
[#241 depth_texture_type]: #121
[#241 expression]: #244
[#241 float16]: #89
[#241 float32]: #88
[#241 float_literal]: #84
[#241 hex_float_literal]: #111
[#241 ident]: #73
[#241 int32]: #90
[#241 int_literal]: #83
[#241 mat_prefix]: #81
[#241 minus]: #62
[#241 multiplicative_expression]: #60
[#241 multisampled_texture_type]: #123
[#241 paren_expression]: #76
[#241 paren_left]: #86
[#241 pointer]: #92
[#241 primary_expression]: #67
[#241 relational_expression]: #50
[#241 sampled_texture_type]: #122
[#241 sampler_type]: #120
[#241 shift_expression]: #54
[#241 short_circuit_and_expression]: #52
[#241 short_circuit_or_expression]: #51
[#241 singular_expression]: #61
[#241 star]: #65
[#241 storage_texture_type]: #124
[#241 texture_and_sampler_types]: #94
[#241 tilde]: #64
[#241 type_decl_without_ident]: #79
[#241 uint32]: #91
[#241 unary_expression]: #59
[#241 vec_prefix]: #80
[#242 additive_expression]: #58
[#242 and]: #66
[#242 array_type_decl]: #93
[#242 bang]: #63
[#242 binary_and_expression]: #55
[#242 binary_or_expression]: #56
[#242 binary_xor_expression]: #57
[#242 bitwise_expression]: #53
[#242 bool_literal]: #85
[#242 callable]: #74
[#242 const_literal]: #75
[#242 decimal_float_literal]: #110
[#242 depth_texture_type]: #121
[#242 expression]: #243
[#242 float16]: #89
[#242 float32]: #88
[#242 float_literal]: #84
[#242 hex_float_literal]: #111
[#242 ident]: #73
[#242 int32]: #90
[#242 int_literal]: #83
[#242 mat_prefix]: #81
[#242 minus]: #62
[#242 multiplicative_expression]: #60
[#242 multisampled_texture_type]: #123
[#242 paren_expression]: #76
[#242 paren_left]: #86
[#242 pointer]: #92
[#242 primary_expression]: #67
[#242 relational_expression]: #50
[#242 sampled_texture_type]: #122
[#242 sampler_type]: #120
[#242 shift_expression]: #54
[#242 short_circuit_and_expression]: #52
[#242 short_circuit_or_expression]: #51
[#242 singular_expression]: #61
[#242 star]: #65
[#242 storage_texture_type]: #124
[#242 texture_and_sampler_types]: #94
[#242 tilde]: #64
[#242 type_decl_without_ident]: #79
[#242 uint32]: #91
[#242 unary_expression]: #59
[#242 vec_prefix]: #80
[#243 attrib_end]: #488
[#243 attrib_end/0.0]: #478
[#243 comma]: #480
[#244 attrib_end]: #487
[#244 attrib_end/0.0]: #478
[#244 comma]: #480
[#245 attrib_end]: #486
[#245 attrib_end/0.0]: #478
[#245 comma]: #480
[#258 attrib_end]: #485
[#258 attrib_end/0.0]: #478
[#258 comma]: #480
[#259 attrib_end]: #484
[#259 attrib_end/0.0]: #478
[#259 comma]: #480
[#260 attrib_end]: #482
[#260 attrib_end/0.0]: #478
[#260 comma]: #483
[#264 attrib_end]: #481
[#264 attrib_end/0.0]: #478
[#264 comma]: #480
[#265 attrib_end]: #479
[#265 attrib_end/0.0]: #478
[#265 comma]: #480
[#266 attrib_end]: #476
[#266 attrib_end/0.0]: #478
[#266 comma]: #477
[#268 shift_left]: #206
[#268 shift_right]: #207
[#279 forward_slash]: #202
[#279 modulo]: #203
[#279 multiplicative_operator]: #200
[#279 star]: #201
[#284 bracket_left]: #191
[#284 period]: #192
[#284 postfix_expression]: #475
[#284 postfix_expression/1.2]: #474
[#285 bracket_left]: #191
[#285 period]: #192
[#285 postfix_expression]: #473
[#285 postfix_expression/2.2]: #472
[#295 bracket_right]: #470
[#296 paren_right]: #469
[#297 argument_expression_list/0.1/0.1]: #465
[#297 argument_expression_list/0.1/0.1/0]: #466
[#297 argument_expression_list/0.1/0.1/0/0.0]: #467
[#297 comma]: #468
[#298 greater_than]: #464
[#301 less_than]: #185
[#302 array_type_decl/0.3]: #462
[#302 comma]: #463
[#305 comma]: #461
[#311 greater_than]: #460
[#312 greater_than]: #459
[#313 comma]: #458
[#330 brace_right]: #456
[#332 and]: #369
[#332 assignment_statement]: #360
[#332 brace_left]: #179
[#332 break_statement]: #342
[#332 compound_statement]: #346
[#332 compound_statement/0.1/0]: #455
[#332 continue_statement]: #343
[#332 decrement_statement]: #362
[#332 for_statement]: #338
[#332 func_call_statement]: #340
[#332 ident]: #354
[#332 if_clause]: #349
[#332 if_statement]: #335
[#332 increment_statement]: #361
[#332 lhs_expression]: #364
[#332 lhs_expression/0.0]: #365
[#332 lhs_expression/0.0/0]: #366
[#332 lhs_expression/0.0/0/0.0]: #367
[#332 loop_statement]: #337
[#332 return_statement]: #334
[#332 semicolon]: #333
[#332 star]: #368
[#332 statement]: #332
[#332 static_assert_statement]: #347
[#332 switch_statement]: #336
[#332 variable_decl]: #355
[#332 variable_statement]: #341
[#332 variable_updating_statement]: #345
[#332 while_statement]: #339
[#334 semicolon]: #454
[#340 semicolon]: #453
[#341 semicolon]: #452
[#342 semicolon]: #451
[#343 semicolon]: #450
[#344 semicolon]: #449
[#345 semicolon]: #448
[#347 semicolon]: #447
[#348 additive_expression]: #58
[#348 and]: #66
[#348 array_type_decl]: #93
[#348 bang]: #63
[#348 binary_and_expression]: #55
[#348 binary_or_expression]: #56
[#348 binary_xor_expression]: #57
[#348 bitwise_expression]: #53
[#348 bool_literal]: #85
[#348 callable]: #74
[#348 const_literal]: #75
[#348 decimal_float_literal]: #110
[#348 depth_texture_type]: #121
[#348 expression]: #446
[#348 float16]: #89
[#348 float32]: #88
[#348 float_literal]: #84
[#348 hex_float_literal]: #111
[#348 ident]: #73
[#348 int32]: #90
[#348 int_literal]: #83
[#348 mat_prefix]: #81
[#348 minus]: #62
[#348 multiplicative_expression]: #60
[#348 multisampled_texture_type]: #123
[#348 paren_expression]: #76
[#348 paren_left]: #86
[#348 pointer]: #92
[#348 primary_expression]: #67
[#348 relational_expression]: #50
[#348 return_statement/0.1]: #445
[#348 sampled_texture_type]: #122
[#348 sampler_type]: #120
[#348 shift_expression]: #54
[#348 short_circuit_and_expression]: #52
[#348 short_circuit_or_expression]: #51
[#348 singular_expression]: #61
[#348 star]: #65
[#348 storage_texture_type]: #124
[#348 texture_and_sampler_types]: #94
[#348 tilde]: #64
[#348 type_decl_without_ident]: #79
[#348 uint32]: #91
[#348 unary_expression]: #59
[#348 vec_prefix]: #80
[#349 else_if_clause]: #443
[#349 if_statement/0.1]: #441
[#349 if_statement/0.1/0]: #442
[#350 additive_expression]: #58
[#350 and]: #66
[#350 array_type_decl]: #93
[#350 bang]: #63
[#350 binary_and_expression]: #55
[#350 binary_or_expression]: #56
[#350 binary_xor_expression]: #57
[#350 bitwise_expression]: #53
[#350 bool_literal]: #85
[#350 callable]: #74
[#350 const_literal]: #75
[#350 decimal_float_literal]: #110
[#350 depth_texture_type]: #121
[#350 expression]: #440
[#350 float16]: #89
[#350 float32]: #88
[#350 float_literal]: #84
[#350 hex_float_literal]: #111
[#350 ident]: #73
[#350 int32]: #90
[#350 int_literal]: #83
[#350 mat_prefix]: #81
[#350 minus]: #62
[#350 multiplicative_expression]: #60
[#350 multisampled_texture_type]: #123
[#350 paren_expression]: #76
[#350 paren_left]: #86
[#350 pointer]: #92
[#350 primary_expression]: #67
[#350 relational_expression]: #50
[#350 sampled_texture_type]: #122
[#350 sampler_type]: #120
[#350 shift_expression]: #54
[#350 short_circuit_and_expression]: #52
[#350 short_circuit_or_expression]: #51
[#350 singular_expression]: #61
[#350 star]: #65
[#350 storage_texture_type]: #124
[#350 texture_and_sampler_types]: #94
[#350 tilde]: #64
[#350 type_decl_without_ident]: #79
[#350 uint32]: #91
[#350 unary_expression]: #59
[#350 vec_prefix]: #80
[#351 brace_left]: #439
[#352 paren_left]: #438
[#353 additive_expression]: #58
[#353 and]: #66
[#353 array_type_decl]: #93
[#353 bang]: #63
[#353 binary_and_expression]: #55
[#353 binary_or_expression]: #56
[#353 binary_xor_expression]: #57
[#353 bitwise_expression]: #53
[#353 bool_literal]: #85
[#353 callable]: #74
[#353 const_literal]: #75
[#353 decimal_float_literal]: #110
[#353 depth_texture_type]: #121
[#353 expression]: #437
[#353 float16]: #89
[#353 float32]: #88
[#353 float_literal]: #84
[#353 hex_float_literal]: #111
[#353 ident]: #73
[#353 int32]: #90
[#353 int_literal]: #83
[#353 mat_prefix]: #81
[#353 minus]: #62
[#353 multiplicative_expression]: #60
[#353 multisampled_texture_type]: #123
[#353 paren_expression]: #76
[#353 paren_left]: #86
[#353 pointer]: #92
[#353 primary_expression]: #67
[#353 relational_expression]: #50
[#353 sampled_texture_type]: #122
[#353 sampler_type]: #120
[#353 shift_expression]: #54
[#353 short_circuit_and_expression]: #52
[#353 short_circuit_or_expression]: #51
[#353 singular_expression]: #61
[#353 star]: #65
[#353 storage_texture_type]: #124
[#353 texture_and_sampler_types]: #94
[#353 tilde]: #64
[#353 type_decl_without_ident]: #79
[#353 uint32]: #91
[#353 unary_expression]: #59
[#353 vec_prefix]: #80
[#354 argument_expression_list]: #436
[#354 paren_left]: #188
[#355 equal]: #435
[#356 ident]: #172
[#356 optionally_typed_ident]: #434
[#357 ident]: #172
[#357 optionally_typed_ident]: #433
[#363 additive_expression]: #58
[#363 and]: #66
[#363 array_type_decl]: #93
[#363 bang]: #63
[#363 binary_and_expression]: #55
[#363 binary_or_expression]: #56
[#363 binary_xor_expression]: #57
[#363 bitwise_expression]: #53
[#363 bool_literal]: #85
[#363 callable]: #74
[#363 const_literal]: #75
[#363 decimal_float_literal]: #110
[#363 depth_texture_type]: #121
[#363 expression]: #432
[#363 float16]: #89
[#363 float32]: #88
[#363 float_literal]: #84
[#363 hex_float_literal]: #111
[#363 ident]: #73
[#363 int32]: #90
[#363 int_literal]: #83
[#363 mat_prefix]: #81
[#363 minus]: #62
[#363 multiplicative_expression]: #60
[#363 multisampled_texture_type]: #123
[#363 paren_expression]: #76
[#363 paren_left]: #86
[#363 pointer]: #92
[#363 primary_expression]: #67
[#363 relational_expression]: #50
[#363 sampled_texture_type]: #122
[#363 sampler_type]: #120
[#363 shift_expression]: #54
[#363 short_circuit_and_expression]: #52
[#363 short_circuit_or_expression]: #51
[#363 singular_expression]: #61
[#363 star]: #65
[#363 storage_texture_type]: #124
[#363 texture_and_sampler_types]: #94
[#363 tilde]: #64
[#363 type_decl_without_ident]: #79
[#363 uint32]: #91
[#363 unary_expression]: #59
[#363 vec_prefix]: #80
[#364 and_equal]: #417
[#364 assignment_statement/0.1]: #405
[#364 compound_assignment_operator]: #409
[#364 division_equal]: #415
[#364 equal]: #408
[#364 minus_equal]: #413
[#364 minus_minus]: #407
[#364 modulo_equal]: #416
[#364 or_equal]: #418
[#364 plus_equal]: #412
[#364 plus_plus]: #406
[#364 shift_left_equal]: #421
[#364 shift_right_equal]: #420
[#364 times_equal]: #414
[#364 xor_equal]: #419
[#365 core_lhs_expression]: #402
[#365 ident]: #403
[#365 paren_left]: #404
[#367 and]: #369
[#367 lhs_expression/0.0/0]: #401
[#367 lhs_expression/0.0/0/0.0]: #367
[#367 star]: #368
[#370 attr]: #30
[#370 attribute]: #400
[#370 function_header/0.3]: #395
[#370 param]: #397
[#370 param/0.0]: #398
[#370 param/0.0/0]: #399
[#370 param_list]: #396
[#371 comma]: #394
[#371 struct_body_decl/0.2]: #391
[#371 struct_body_decl/0.2/0]: #392
[#371 struct_body_decl/0.2/0/0.0]: #393
[#372 member_ident]: #390
[#374 attr]: #30
[#374 attribute]: #374
[#374 struct_member/0.0/0]: #389
[#377 array_type_decl]: #93
[#377 depth_texture_type]: #121
[#377 float16]: #89
[#377 float32]: #88
[#377 ident]: #299
[#377 int32]: #90
[#377 multisampled_texture_type]: #123
[#377 pointer]: #92
[#377 sampled_texture_type]: #122
[#377 sampler_type]: #120
[#377 storage_texture_type]: #124
[#377 texture_and_sampler_types]: #94
[#377 type_decl]: #388
[#377 type_decl_without_ident]: #300
[#377 uint32]: #91
[#380 additive_expression]: #58
[#380 and]: #66
[#380 array_type_decl]: #93
[#380 bang]: #63
[#380 binary_and_expression]: #55
[#380 binary_or_expression]: #56
[#380 binary_xor_expression]: #57
[#380 bitwise_expression]: #53
[#380 bool_literal]: #85
[#380 callable]: #74
[#380 const_literal]: #75
[#380 decimal_float_literal]: #110
[#380 depth_texture_type]: #121
[#380 expression]: #387
[#380 float16]: #89
[#380 float32]: #88
[#380 float_literal]: #84
[#380 hex_float_literal]: #111
[#380 ident]: #73
[#380 int32]: #90
[#380 int_literal]: #83
[#380 mat_prefix]: #81
[#380 minus]: #62
[#380 multiplicative_expression]: #60
[#380 multisampled_texture_type]: #123
[#380 paren_expression]: #76
[#380 paren_left]: #86
[#380 pointer]: #92
[#380 primary_expression]: #67
[#380 relational_expression]: #50
[#380 sampled_texture_type]: #122
[#380 sampler_type]: #120
[#380 shift_expression]: #54
[#380 short_circuit_and_expression]: #52
[#380 short_circuit_or_expression]: #51
[#380 singular_expression]: #61
[#380 star]: #65
[#380 storage_texture_type]: #124
[#380 texture_and_sampler_types]: #94
[#380 tilde]: #64
[#380 type_decl_without_ident]: #79
[#380 uint32]: #91
[#380 unary_expression]: #59
[#380 vec_prefix]: #80
[#382 comma]: #385
[#382 variable_qualifier/0.2]: #384
[#384 greater_than]: #549
[#385 access_mode]: #548
[#390 colon]: #547
[#391 comma]: #546
[#391 struct_body_decl/0.3]: #545
[#393 comma]: #394
[#393 struct_body_decl/0.2/0]: #544
[#393 struct_body_decl/0.2/0/0.0]: #393
[#394 attr]: #30
[#394 attribute]: #374
[#394 struct_member]: #543
[#394 struct_member/0.0]: #372
[#394 struct_member/0.0/0]: #373
[#395 paren_right]: #542
[#397 comma]: #541
[#397 param_list/0.1]: #538
[#397 param_list/0.1/0]: #539
[#397 param_list/0.1/0/0.0]: #540
[#398 ident]: #537
[#400 attr]: #30
[#400 attribute]: #400
[#400 param/0.0/0]: #536
[#402 bracket_left]: #191
[#402 lhs_expression/0.2]: #534
[#402 period]: #192
[#402 postfix_expression]: #535
[#404 and]: #369
[#404 lhs_expression]: #533
[#404 lhs_expression/0.0]: #365
[#404 lhs_expression/0.0/0]: #366
[#404 lhs_expression/0.0/0/0.0]: #367
[#404 star]: #368
[#405 additive_expression]: #58
[#405 and]: #66
[#405 array_type_decl]: #93
[#405 bang]: #63
[#405 binary_and_expression]: #55
[#405 binary_or_expression]: #56
[#405 binary_xor_expression]: #57
[#405 bitwise_expression]: #53
[#405 bool_literal]: #85
[#405 callable]: #74
[#405 const_literal]: #75
[#405 decimal_float_literal]: #110
[#405 depth_texture_type]: #121
[#405 expression]: #532
[#405 float16]: #89
[#405 float32]: #88
[#405 float_literal]: #84
[#405 hex_float_literal]: #111
[#405 ident]: #73
[#405 int32]: #90
[#405 int_literal]: #83
[#405 mat_prefix]: #81
[#405 minus]: #62
[#405 multiplicative_expression]: #60
[#405 multisampled_texture_type]: #123
[#405 paren_expression]: #76
[#405 paren_left]: #86
[#405 pointer]: #92
[#405 primary_expression]: #67
[#405 relational_expression]: #50
[#405 sampled_texture_type]: #122
[#405 sampler_type]: #120
[#405 shift_expression]: #54
[#405 short_circuit_and_expression]: #52
[#405 short_circuit_or_expression]: #51
[#405 singular_expression]: #61
[#405 star]: #65
[#405 storage_texture_type]: #124
[#405 texture_and_sampler_types]: #94
[#405 tilde]: #64
[#405 type_decl_without_ident]: #79
[#405 uint32]: #91
[#405 unary_expression]: #59
[#405 vec_prefix]: #80
[#432 brace_left]: #179
[#432 compound_statement]: #531
[#433 equal]: #530
[#434 equal]: #529
[#435 additive_expression]: #58
[#435 and]: #66
[#435 array_type_decl]: #93
[#435 bang]: #63
[#435 binary_and_expression]: #55
[#435 binary_or_expression]: #56
[#435 binary_xor_expression]: #57
[#435 bitwise_expression]: #53
[#435 bool_literal]: #85
[#435 callable]: #74
[#435 const_literal]: #75
[#435 decimal_float_literal]: #110
[#435 depth_texture_type]: #121
[#435 expression]: #528
[#435 float16]: #89
[#435 float32]: #88
[#435 float_literal]: #84
[#435 hex_float_literal]: #111
[#435 ident]: #73
[#435 int32]: #90
[#435 int_literal]: #83
[#435 mat_prefix]: #81
[#435 minus]: #62
[#435 multiplicative_expression]: #60
[#435 multisampled_texture_type]: #123
[#435 paren_expression]: #76
[#435 paren_left]: #86
[#435 pointer]: #92
[#435 primary_expression]: #67
[#435 relational_expression]: #50
[#435 sampled_texture_type]: #122
[#435 sampler_type]: #120
[#435 shift_expression]: #54
[#435 short_circuit_and_expression]: #52
[#435 short_circuit_or_expression]: #51
[#435 singular_expression]: #61
[#435 star]: #65
[#435 storage_texture_type]: #124
[#435 texture_and_sampler_types]: #94
[#435 tilde]: #64
[#435 type_decl_without_ident]: #79
[#435 uint32]: #91
[#435 unary_expression]: #59
[#435 vec_prefix]: #80
[#437 brace_left]: #179
[#437 compound_statement]: #527
[#438 and]: #369
[#438 assignment_statement]: #360
[#438 decrement_statement]: #362
[#438 for_header]: #521
[#438 for_header/0.0]: #522
[#438 for_init]: #523
[#438 func_call_statement]: #526
[#438 ident]: #354
[#438 increment_statement]: #361
[#438 lhs_expression]: #364
[#438 lhs_expression/0.0]: #365
[#438 lhs_expression/0.0/0]: #366
[#438 lhs_expression/0.0/0/0.0]: #367
[#438 star]: #368
[#438 variable_decl]: #355
[#438 variable_statement]: #524
[#438 variable_updating_statement]: #525
[#439 and]: #369
[#439 assignment_statement]: #360
[#439 brace_left]: #179
[#439 break_statement]: #342
[#439 compound_statement]: #346
[#439 continue_statement]: #343
[#439 decrement_statement]: #362
[#439 for_statement]: #338
[#439 func_call_statement]: #340
[#439 ident]: #354
[#439 if_clause]: #349
[#439 if_statement]: #335
[#439 increment_statement]: #361
[#439 lhs_expression]: #364
[#439 lhs_expression/0.0]: #365
[#439 lhs_expression/0.0/0]: #366
[#439 lhs_expression/0.0/0/0.0]: #367
[#439 loop_statement]: #337
[#439 loop_statement/0.2]: #518
[#439 loop_statement/0.2/0]: #519
[#439 return_statement]: #334
[#439 semicolon]: #333
[#439 star]: #368
[#439 statement]: #520
[#439 static_assert_statement]: #347
[#439 switch_statement]: #336
[#439 variable_decl]: #355
[#439 variable_statement]: #341
[#439 variable_updating_statement]: #345
[#439 while_statement]: #339
[#440 brace_left]: #517
[#441 else_clause]: #515
[#441 if_statement/0.2]: #514
[#443 else_if_clause]: #443
[#443 if_statement/0.1/0]: #513
[#458 access_mode]: #508
[#461 array_type_decl]: #93
[#461 depth_texture_type]: #121
[#461 float16]: #89
[#461 float32]: #88
[#461 ident]: #299
[#461 int32]: #90
[#461 multisampled_texture_type]: #123
[#461 pointer]: #92
[#461 sampled_texture_type]: #122
[#461 sampler_type]: #120
[#461 storage_texture_type]: #124
[#461 texture_and_sampler_types]: #94
[#461 type_decl]: #507
[#461 type_decl_without_ident]: #300
[#461 uint32]: #91
[#462 greater_than]: #506
[#463 additive_expression]: #503
[#463 and]: #66
[#463 array_type_decl]: #93
[#463 bang]: #63
[#463 binary_and_expression]: #55
[#463 binary_or_expression]: #56
[#463 binary_xor_expression]: #57
[#463 bitwise_expression]: #504
[#463 bool_literal]: #85
[#463 callable]: #74
[#463 const_literal]: #75
[#463 decimal_float_literal]: #110
[#463 depth_texture_type]: #121
[#463 element_count_expression]: #502
[#463 float16]: #89
[#463 float32]: #88
[#463 float_literal]: #84
[#463 hex_float_literal]: #111
[#463 ident]: #73
[#463 int32]: #90
[#463 int_literal]: #83
[#463 mat_prefix]: #81
[#463 minus]: #62
[#463 multiplicative_expression]: #60
[#463 multisampled_texture_type]: #123
[#463 paren_expression]: #76
[#463 paren_left]: #86
[#463 pointer]: #92
[#463 primary_expression]: #67
[#463 sampled_texture_type]: #122
[#463 sampler_type]: #120
[#463 singular_expression]: #61
[#463 star]: #65
[#463 storage_texture_type]: #124
[#463 texture_and_sampler_types]: #94
[#463 tilde]: #64
[#463 type_decl_without_ident]: #79
[#463 uint32]: #91
[#463 unary_expression]: #505
[#463 vec_prefix]: #80
[#464 paren_expression]: #501
[#464 paren_left]: #86
[#465 argument_expression_list/0.1/0.2]: #499
[#465 comma]: #500
[#467 argument_expression_list/0.1/0.1/0]: #498
[#467 argument_expression_list/0.1/0.1/0/0.0]: #467
[#467 comma]: #468
[#468 additive_expression]: #58
[#468 and]: #66
[#468 array_type_decl]: #93
[#468 bang]: #63
[#468 binary_and_expression]: #55
[#468 binary_or_expression]: #56
[#468 binary_xor_expression]: #57
[#468 bitwise_expression]: #53
[#468 bool_literal]: #85
[#468 callable]: #74
[#468 const_literal]: #75
[#468 decimal_float_literal]: #110
[#468 depth_texture_type]: #121
[#468 expression]: #497
[#468 float16]: #89
[#468 float32]: #88
[#468 float_literal]: #84
[#468 hex_float_literal]: #111
[#468 ident]: #73
[#468 int32]: #90
[#468 int_literal]: #83
[#468 mat_prefix]: #81
[#468 minus]: #62
[#468 multiplicative_expression]: #60
[#468 multisampled_texture_type]: #123
[#468 paren_expression]: #76
[#468 paren_left]: #86
[#468 pointer]: #92
[#468 primary_expression]: #67
[#468 relational_expression]: #50
[#468 sampled_texture_type]: #122
[#468 sampler_type]: #120
[#468 shift_expression]: #54
[#468 short_circuit_and_expression]: #52
[#468 short_circuit_or_expression]: #51
[#468 singular_expression]: #61
[#468 star]: #65
[#468 storage_texture_type]: #124
[#468 texture_and_sampler_types]: #94
[#468 tilde]: #64
[#468 type_decl_without_ident]: #79
[#468 uint32]: #91
[#468 unary_expression]: #59
[#468 vec_prefix]: #80
[#470 bracket_left]: #191
[#470 period]: #192
[#470 postfix_expression]: #496
[#470 postfix_expression/0.3]: #495
[#477 additive_expression]: #58
[#477 and]: #66
[#477 array_type_decl]: #93
[#477 bang]: #63
[#477 binary_and_expression]: #55
[#477 binary_or_expression]: #56
[#477 binary_xor_expression]: #57
[#477 bitwise_expression]: #53
[#477 bool_literal]: #85
[#477 callable]: #74
[#477 const_literal]: #75
[#477 decimal_float_literal]: #110
[#477 depth_texture_type]: #121
[#477 expression]: #494
[#477 float16]: #89
[#477 float32]: #88
[#477 float_literal]: #84
[#477 hex_float_literal]: #111
[#477 ident]: #73
[#477 int32]: #90
[#477 int_literal]: #83
[#477 mat_prefix]: #81
[#477 minus]: #62
[#477 multiplicative_expression]: #60
[#477 multisampled_texture_type]: #123
[#477 paren_expression]: #76
[#477 paren_left]: #86
[#477 pointer]: #92
[#477 primary_expression]: #67
[#477 relational_expression]: #50
[#477 sampled_texture_type]: #122
[#477 sampler_type]: #120
[#477 shift_expression]: #54
[#477 short_circuit_and_expression]: #52
[#477 short_circuit_or_expression]: #51
[#477 singular_expression]: #61
[#477 star]: #65
[#477 storage_texture_type]: #124
[#477 texture_and_sampler_types]: #94
[#477 tilde]: #64
[#477 type_decl_without_ident]: #79
[#477 uint32]: #91
[#477 unary_expression]: #59
[#477 vec_prefix]: #80
[#478 paren_right]: #493
[#483 interpolation_sample_name]: #489
[#489 attrib_end]: #583
[#489 attrib_end/0.0]: #478
[#489 comma]: #480
[#494 attrib_end]: #581
[#494 attrib_end/0.0]: #478
[#494 comma]: #582
[#503 additive_operator]: #210
[#503 minus]: #212
[#503 plus]: #211
[#507 comma]: #580
[#507 type_decl_without_ident/7.5]: #579
[#508 greater_than]: #578
[#512 additive_expression]: #58
[#512 and]: #66
[#512 array_type_decl]: #93
[#512 bang]: #63
[#512 binary_and_expression]: #55
[#512 binary_or_expression]: #56
[#512 binary_xor_expression]: #57
[#512 bitwise_expression]: #53
[#512 bool_literal]: #85
[#512 callable]: #74
[#512 const_literal]: #75
[#512 decimal_float_literal]: #110
[#512 depth_texture_type]: #121
[#512 expression]: #577
[#512 float16]: #89
[#512 float32]: #88
[#512 float_literal]: #84
[#512 hex_float_literal]: #111
[#512 ident]: #73
[#512 int32]: #90
[#512 int_literal]: #83
[#512 mat_prefix]: #81
[#512 minus]: #62
[#512 multiplicative_expression]: #60
[#512 multisampled_texture_type]: #123
[#512 paren_expression]: #76
[#512 paren_left]: #86
[#512 pointer]: #92
[#512 primary_expression]: #67
[#512 relational_expression]: #50
[#512 sampled_texture_type]: #122
[#512 sampler_type]: #120
[#512 shift_expression]: #54
[#512 short_circuit_and_expression]: #52
[#512 short_circuit_or_expression]: #51
[#512 singular_expression]: #61
[#512 star]: #65
[#512 storage_texture_type]: #124
[#512 texture_and_sampler_types]: #94
[#512 tilde]: #64
[#512 type_decl_without_ident]: #79
[#512 uint32]: #91
[#512 unary_expression]: #59
[#512 vec_prefix]: #80
[#516 brace_left]: #179
[#516 compound_statement]: #576
[#517 case_clause]: #572
[#517 default_alone_clause]: #573
[#517 switch_body]: #571
[#517 switch_statement/0.3]: #569
[#517 switch_statement/0.3/0]: #570
[#518 continuing_statement]: #567
[#518 loop_statement/0.3]: #566
[#520 and]: #369
[#520 assignment_statement]: #360
[#520 brace_left]: #179
[#520 break_statement]: #342
[#520 compound_statement]: #346
[#520 continue_statement]: #343
[#520 decrement_statement]: #362
[#520 for_statement]: #338
[#520 func_call_statement]: #340
[#520 ident]: #354
[#520 if_clause]: #349
[#520 if_statement]: #335
[#520 increment_statement]: #361
[#520 lhs_expression]: #364
[#520 lhs_expression/0.0]: #365
[#520 lhs_expression/0.0/0]: #366
[#520 lhs_expression/0.0/0/0.0]: #367
[#520 loop_statement]: #337
[#520 loop_statement/0.2/0]: #565
[#520 return_statement]: #334
[#520 semicolon]: #333
[#520 star]: #368
[#520 statement]: #520
[#520 static_assert_statement]: #347
[#520 switch_statement]: #336
[#520 variable_decl]: #355
[#520 variable_statement]: #341
[#520 variable_updating_statement]: #345
[#520 while_statement]: #339
[#521 paren_right]: #564
[#522 semicolon]: #563
[#529 additive_expression]: #58
[#529 and]: #66
[#529 array_type_decl]: #93
[#529 bang]: #63
[#529 binary_and_expression]: #55
[#529 binary_or_expression]: #56
[#529 binary_xor_expression]: #57
[#529 bitwise_expression]: #53
[#529 bool_literal]: #85
[#529 callable]: #74
[#529 const_literal]: #75
[#529 decimal_float_literal]: #110
[#529 depth_texture_type]: #121
[#529 expression]: #562
[#529 float16]: #89
[#529 float32]: #88
[#529 float_literal]: #84
[#529 hex_float_literal]: #111
[#529 ident]: #73
[#529 int32]: #90
[#529 int_literal]: #83
[#529 mat_prefix]: #81
[#529 minus]: #62
[#529 multiplicative_expression]: #60
[#529 multisampled_texture_type]: #123
[#529 paren_expression]: #76
[#529 paren_left]: #86
[#529 pointer]: #92
[#529 primary_expression]: #67
[#529 relational_expression]: #50
[#529 sampled_texture_type]: #122
[#529 sampler_type]: #120
[#529 shift_expression]: #54
[#529 short_circuit_and_expression]: #52
[#529 short_circuit_or_expression]: #51
[#529 singular_expression]: #61
[#529 star]: #65
[#529 storage_texture_type]: #124
[#529 texture_and_sampler_types]: #94
[#529 tilde]: #64
[#529 type_decl_without_ident]: #79
[#529 uint32]: #91
[#529 unary_expression]: #59
[#529 vec_prefix]: #80
[#530 additive_expression]: #58
[#530 and]: #66
[#530 array_type_decl]: #93
[#530 bang]: #63
[#530 binary_and_expression]: #55
[#530 binary_or_expression]: #56
[#530 binary_xor_expression]: #57
[#530 bitwise_expression]: #53
[#530 bool_literal]: #85
[#530 callable]: #74
[#530 const_literal]: #75
[#530 decimal_float_literal]: #110
[#530 depth_texture_type]: #121
[#530 expression]: #561
[#530 float16]: #89
[#530 float32]: #88
[#530 float_literal]: #84
[#530 hex_float_literal]: #111
[#530 ident]: #73
[#530 int32]: #90
[#530 int_literal]: #83
[#530 mat_prefix]: #81
[#530 minus]: #62
[#530 multiplicative_expression]: #60
[#530 multisampled_texture_type]: #123
[#530 paren_expression]: #76
[#530 paren_left]: #86
[#530 pointer]: #92
[#530 primary_expression]: #67
[#530 relational_expression]: #50
[#530 sampled_texture_type]: #122
[#530 sampler_type]: #120
[#530 shift_expression]: #54
[#530 short_circuit_and_expression]: #52
[#530 short_circuit_or_expression]: #51
[#530 singular_expression]: #61
[#530 star]: #65
[#530 storage_texture_type]: #124
[#530 texture_and_sampler_types]: #94
[#530 tilde]: #64
[#530 type_decl_without_ident]: #79
[#530 uint32]: #91
[#530 unary_expression]: #59
[#530 vec_prefix]: #80
[#533 paren_right]: #560
[#537 colon]: #559
[#538 comma]: #558
[#538 param_list/0.2]: #557
[#540 comma]: #541
[#540 param_list/0.1/0]: #556
[#540 param_list/0.1/0/0.0]: #540
[#541 attr]: #30
[#541 attribute]: #400
[#541 param]: #555
[#541 param/0.0]: #398
[#541 param/0.0/0]: #399
[#542 arrow]: #553
[#542 function_header/0.5]: #552
[#545 brace_right]: #551
[#547 array_type_decl]: #93
[#547 depth_texture_type]: #121
[#547 float16]: #89
[#547 float32]: #88
[#547 ident]: #299
[#547 int32]: #90
[#547 multisampled_texture_type]: #123
[#547 pointer]: #92
[#547 sampled_texture_type]: #122
[#547 sampler_type]: #120
[#547 storage_texture_type]: #124
[#547 texture_and_sampler_types]: #94
[#547 type_decl]: #550
[#547 type_decl_without_ident]: #300
[#547 uint32]: #91
[#553 attr]: #30
[#553 attribute]: #605
[#553 function_header/0.5/0.1]: #603
[#553 function_header/0.5/0.1/0]: #604
[#559 array_type_decl]: #93
[#559 depth_texture_type]: #121
[#559 float16]: #89
[#559 float32]: #88
[#559 ident]: #299
[#559 int32]: #90
[#559 multisampled_texture_type]: #123
[#559 pointer]: #92
[#559 sampled_texture_type]: #122
[#559 sampler_type]: #120
[#559 storage_texture_type]: #124
[#559 texture_and_sampler_types]: #94
[#559 type_decl]: #602
[#559 type_decl_without_ident]: #300
[#559 uint32]: #91
[#563 additive_expression]: #58
[#563 and]: #66
[#563 array_type_decl]: #93
[#563 bang]: #63
[#563 binary_and_expression]: #55
[#563 binary_or_expression]: #56
[#563 binary_xor_expression]: #57
[#563 bitwise_expression]: #53
[#563 bool_literal]: #85
[#563 callable]: #74
[#563 const_literal]: #75
[#563 decimal_float_literal]: #110
[#563 depth_texture_type]: #121
[#563 expression]: #601
[#563 float16]: #89
[#563 float32]: #88
[#563 float_literal]: #84
[#563 for_header/0.2]: #600
[#563 hex_float_literal]: #111
[#563 ident]: #73
[#563 int32]: #90
[#563 int_literal]: #83
[#563 mat_prefix]: #81
[#563 minus]: #62
[#563 multiplicative_expression]: #60
[#563 multisampled_texture_type]: #123
[#563 paren_expression]: #76
[#563 paren_left]: #86
[#563 pointer]: #92
[#563 primary_expression]: #67
[#563 relational_expression]: #50
[#563 sampled_texture_type]: #122
[#563 sampler_type]: #120
[#563 shift_expression]: #54
[#563 short_circuit_and_expression]: #52
[#563 short_circuit_or_expression]: #51
[#563 singular_expression]: #61
[#563 star]: #65
[#563 storage_texture_type]: #124
[#563 texture_and_sampler_types]: #94
[#563 tilde]: #64
[#563 type_decl_without_ident]: #79
[#563 uint32]: #91
[#563 unary_expression]: #59
[#563 vec_prefix]: #80
[#564 brace_left]: #179
[#564 compound_statement]: #599
[#566 brace_right]: #598
[#568 brace_left]: #597
[#568 continuing_compound_statement]: #596
[#569 brace_right]: #595
[#571 case_clause]: #572
[#571 default_alone_clause]: #573
[#571 switch_body]: #571
[#571 switch_statement/0.3/0]: #594
[#574 additive_expression]: #58
[#574 and]: #66
[#574 array_type_decl]: #93
[#574 bang]: #63
[#574 binary_and_expression]: #55
[#574 binary_or_expression]: #56
[#574 binary_xor_expression]: #57
[#574 bitwise_expression]: #53
[#574 bool_literal]: #85
[#574 callable]: #74
[#574 case_selector]: #591
[#574 case_selectors]: #590
[#574 const_literal]: #75
[#574 decimal_float_literal]: #110
[#574 depth_texture_type]: #121
[#574 expression]: #593
[#574 float16]: #89
[#574 float32]: #88
[#574 float_literal]: #84
[#574 hex_float_literal]: #111
[#574 ident]: #73
[#574 int32]: #90
[#574 int_literal]: #83
[#574 mat_prefix]: #81
[#574 minus]: #62
[#574 multiplicative_expression]: #60
[#574 multisampled_texture_type]: #123
[#574 paren_expression]: #76
[#574 paren_left]: #86
[#574 pointer]: #92
[#574 primary_expression]: #67
[#574 relational_expression]: #50
[#574 sampled_texture_type]: #122
[#574 sampler_type]: #120
[#574 shift_expression]: #54
[#574 short_circuit_and_expression]: #52
[#574 short_circuit_or_expression]: #51
[#574 singular_expression]: #61
[#574 star]: #65
[#574 storage_texture_type]: #124
[#574 texture_and_sampler_types]: #94
[#574 tilde]: #64
[#574 type_decl_without_ident]: #79
[#574 uint32]: #91
[#574 unary_expression]: #59
[#574 vec_prefix]: #80
[#575 colon]: #589
[#575 default_alone_clause/0.1]: #588
[#577 brace_left]: #179
[#577 compound_statement]: #587
[#579 greater_than]: #586
[#580 access_mode]: #585
[#582 additive_expression]: #58
[#582 and]: #66
[#582 array_type_decl]: #93
[#582 bang]: #63
[#582 binary_and_expression]: #55
[#582 binary_or_expression]: #56
[#582 binary_xor_expression]: #57
[#582 bitwise_expression]: #53
[#582 bool_literal]: #85
[#582 callable]: #74
[#582 const_literal]: #75
[#582 decimal_float_literal]: #110
[#582 depth_texture_type]: #121
[#582 expression]: #584
[#582 float16]: #89
[#582 float32]: #88
[#582 float_literal]: #84
[#582 hex_float_literal]: #111
[#582 ident]: #73
[#582 int32]: #90
[#582 int_literal]: #83
[#582 mat_prefix]: #81
[#582 minus]: #62
[#582 multiplicative_expression]: #60
[#582 multisampled_texture_type]: #123
[#582 paren_expression]: #76
[#582 paren_left]: #86
[#582 pointer]: #92
[#582 primary_expression]: #67
[#582 relational_expression]: #50
[#582 sampled_texture_type]: #122
[#582 sampler_type]: #120
[#582 shift_expression]: #54
[#582 short_circuit_and_expression]: #52
[#582 short_circuit_or_expression]: #51
[#582 singular_expression]: #61
[#582 star]: #65
[#582 storage_texture_type]: #124
[#582 texture_and_sampler_types]: #94
[#582 tilde]: #64
[#582 type_decl_without_ident]: #79
[#582 uint32]: #91
[#582 unary_expression]: #59
[#582 vec_prefix]: #80
[#584 attrib_end]: #619
[#584 attrib_end/0.0]: #478
[#584 comma]: #480
[#588 brace_left]: #179
[#588 compound_statement]: #618
[#590 case_clause/0.2]: #616
[#590 colon]: #617
[#591 case_selectors/0.1]: #612
[#591 case_selectors/0.1/0]: #613
[#591 case_selectors/0.1/0/0.0]: #614
[#591 comma]: #615
[#597 and]: #369
[#597 assignment_statement]: #360
[#597 brace_left]: #179
[#597 break_statement]: #342
[#597 compound_statement]: #346
[#597 continue_statement]: #343
[#597 continuing_compound_statement/0.1]: #609
[#597 continuing_compound_statement/0.1/0]: #610
[#597 decrement_statement]: #362
[#597 for_statement]: #338
[#597 func_call_statement]: #340
[#597 ident]: #354
[#597 if_clause]: #349
[#597 if_statement]: #335
[#597 increment_statement]: #361
[#597 lhs_expression]: #364
[#597 lhs_expression/0.0]: #365
[#597 lhs_expression/0.0/0]: #366
[#597 lhs_expression/0.0/0/0.0]: #367
[#597 loop_statement]: #337
[#597 return_statement]: #334
[#597 semicolon]: #333
[#597 star]: #368
[#597 statement]: #611
[#597 static_assert_statement]: #347
[#597 switch_statement]: #336
[#597 variable_decl]: #355
[#597 variable_statement]: #341
[#597 variable_updating_statement]: #345
[#597 while_statement]: #339
[#600 semicolon]: #608
[#603 array_type_decl]: #93
[#603 depth_texture_type]: #121
[#603 float16]: #89
[#603 float32]: #88
[#603 ident]: #299
[#603 int32]: #90
[#603 multisampled_texture_type]: #123
[#603 pointer]: #92
[#603 sampled_texture_type]: #122
[#603 sampler_type]: #120
[#603 storage_texture_type]: #124
[#603 texture_and_sampler_types]: #94
[#603 type_decl]: #607
[#603 type_decl_without_ident]: #300
[#603 uint32]: #91
[#605 attr]: #30
[#605 attribute]: #605
[#605 function_header/0.5/0.1/0]: #606
[#608 and]: #369
[#608 assignment_statement]: #360
[#608 decrement_statement]: #362
[#608 for_header/0.4]: #629
[#608 for_update]: #630
[#608 func_call_statement]: #632
[#608 ident]: #354
[#608 increment_statement]: #361
[#608 lhs_expression]: #364
[#608 lhs_expression/0.0]: #365
[#608 lhs_expression/0.0/0]: #366
[#608 lhs_expression/0.0/0/0.0]: #367
[#608 star]: #368
[#608 variable_updating_statement]: #631
[#609 break_if_statement]: #627
[#609 continuing_compound_statement/0.2]: #626
[#611 and]: #369
[#611 assignment_statement]: #360
[#611 brace_left]: #179
[#611 break_statement]: #342
[#611 compound_statement]: #346
[#611 continue_statement]: #343
[#611 continuing_compound_statement/0.1/0]: #625
[#611 decrement_statement]: #362
[#611 for_statement]: #338
[#611 func_call_statement]: #340
[#611 ident]: #354
[#611 if_clause]: #349
[#611 if_statement]: #335
[#611 increment_statement]: #361
[#611 lhs_expression]: #364
[#611 lhs_expression/0.0]: #365
[#611 lhs_expression/0.0/0]: #366
[#611 lhs_expression/0.0/0/0.0]: #367
[#611 loop_statement]: #337
[#611 return_statement]: #334
[#611 semicolon]: #333
[#611 star]: #368
[#611 statement]: #611
[#611 static_assert_statement]: #347
[#611 switch_statement]: #336
[#611 variable_decl]: #355
[#611 variable_statement]: #341
[#611 variable_updating_statement]: #345
[#611 while_statement]: #339
[#612 case_selectors/0.2]: #623
[#612 comma]: #624
[#614 case_selectors/0.1/0]: #622
[#614 case_selectors/0.1/0/0.0]: #614
[#614 comma]: #615
[#615 additive_expression]: #58
[#615 and]: #66
[#615 array_type_decl]: #93
[#615 bang]: #63
[#615 binary_and_expression]: #55
[#615 binary_or_expression]: #56
[#615 binary_xor_expression]: #57
[#615 bitwise_expression]: #53
[#615 bool_literal]: #85
[#615 callable]: #74
[#615 case_selector]: #621
[#615 const_literal]: #75
[#615 decimal_float_literal]: #110
[#615 depth_texture_type]: #121
[#615 expression]: #593
[#615 float16]: #89
[#615 float32]: #88
[#615 float_literal]: #84
[#615 hex_float_literal]: #111
[#615 ident]: #73
[#615 int32]: #90
[#615 int_literal]: #83
[#615 mat_prefix]: #81
[#615 minus]: #62
[#615 multiplicative_expression]: #60
[#615 multisampled_texture_type]: #123
[#615 paren_expression]: #76
[#615 paren_left]: #86
[#615 pointer]: #92
[#615 primary_expression]: #67
[#615 relational_expression]: #50
[#615 sampled_texture_type]: #122
[#615 sampler_type]: #120
[#615 shift_expression]: #54
[#615 short_circuit_and_expression]: #52
[#615 short_circuit_or_expression]: #51
[#615 singular_expression]: #61
[#615 star]: #65
[#615 storage_texture_type]: #124
[#615 texture_and_sampler_types]: #94
[#615 tilde]: #64
[#615 type_decl_without_ident]: #79
[#615 uint32]: #91
[#615 unary_expression]: #59
[#615 vec_prefix]: #80
[#616 brace_left]: #179
[#616 compound_statement]: #620
[#626 brace_right]: #634
[#633 additive_expression]: #58
[#633 and]: #66
[#633 array_type_decl]: #93
[#633 bang]: #63
[#633 binary_and_expression]: #55
[#633 binary_or_expression]: #56
[#633 binary_xor_expression]: #57
[#633 bitwise_expression]: #53
[#633 bool_literal]: #85
[#633 callable]: #74
[#633 const_literal]: #75
[#633 decimal_float_literal]: #110
[#633 depth_texture_type]: #121
[#633 expression]: #635
[#633 float16]: #89
[#633 float32]: #88
[#633 float_literal]: #84
[#633 hex_float_literal]: #111
[#633 ident]: #73
[#633 int32]: #90
[#633 int_literal]: #83
[#633 mat_prefix]: #81
[#633 minus]: #62
[#633 multiplicative_expression]: #60
[#633 multisampled_texture_type]: #123
[#633 paren_expression]: #76
[#633 paren_left]: #86
[#633 pointer]: #92
[#633 primary_expression]: #67
[#633 relational_expression]: #50
[#633 sampled_texture_type]: #122
[#633 sampler_type]: #120
[#633 shift_expression]: #54
[#633 short_circuit_and_expression]: #52
[#633 short_circuit_or_expression]: #51
[#633 singular_expression]: #61
[#633 star]: #65
[#633 storage_texture_type]: #124
[#633 texture_and_sampler_types]: #94
[#633 tilde]: #64
[#633 type_decl_without_ident]: #79
[#633 uint32]: #91
[#633 unary_expression]: #59
[#633 vec_prefix]: #80
[#635 semicolon]: #636
